// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis//notification/v1/notification_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis//notification/v1/notification_grpc.pb.go -self_package=github.com/antinvestor/apis/notification/v1 -package=notificationv1 -destination=/home/j/code/antinvestor/apis//notification/v1/notification_grpc_mock.go
//
// Package notificationv1 is a generated GoMock package.
package notificationv1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockNotificationServiceClient is a mock of NotificationServiceClient interface.
type MockNotificationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceClientMockRecorder
}

// MockNotificationServiceClientMockRecorder is the mock recorder for MockNotificationServiceClient.
type MockNotificationServiceClientMockRecorder struct {
	mock *MockNotificationServiceClient
}

// NewMockNotificationServiceClient creates a new mock instance.
func NewMockNotificationServiceClient(ctrl *gomock.Controller) *MockNotificationServiceClient {
	mock := &MockNotificationServiceClient{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationServiceClient) EXPECT() *MockNotificationServiceClientMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockNotificationServiceClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Receive", varargs...)
	ret0, _ := ret[0].(*ReceiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockNotificationServiceClientMockRecorder) Receive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockNotificationServiceClient)(nil).Receive), varargs...)
}

// Release mocks base method.
func (m *MockNotificationServiceClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Release", varargs...)
	ret0, _ := ret[0].(*ReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockNotificationServiceClientMockRecorder) Release(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNotificationServiceClient)(nil).Release), varargs...)
}

// Search mocks base method.
func (m *MockNotificationServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (NotificationService_SearchClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(NotificationService_SearchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNotificationServiceClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNotificationServiceClient)(nil).Search), varargs...)
}

// Send mocks base method.
func (m *MockNotificationServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockNotificationServiceClientMockRecorder) Send(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationServiceClient)(nil).Send), varargs...)
}

// Status mocks base method.
func (m *MockNotificationServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockNotificationServiceClientMockRecorder) Status(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNotificationServiceClient)(nil).Status), varargs...)
}

// StatusUpdate mocks base method.
func (m *MockNotificationServiceClient) StatusUpdate(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*StatusUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatusUpdate", varargs...)
	ret0, _ := ret[0].(*StatusUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusUpdate indicates an expected call of StatusUpdate.
func (mr *MockNotificationServiceClientMockRecorder) StatusUpdate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockNotificationServiceClient)(nil).StatusUpdate), varargs...)
}

// MockNotificationService_SearchClient is a mock of NotificationService_SearchClient interface.
type MockNotificationService_SearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationService_SearchClientMockRecorder
}

// MockNotificationService_SearchClientMockRecorder is the mock recorder for MockNotificationService_SearchClient.
type MockNotificationService_SearchClientMockRecorder struct {
	mock *MockNotificationService_SearchClient
}

// NewMockNotificationService_SearchClient creates a new mock instance.
func NewMockNotificationService_SearchClient(ctrl *gomock.Controller) *MockNotificationService_SearchClient {
	mock := &MockNotificationService_SearchClient{ctrl: ctrl}
	mock.recorder = &MockNotificationService_SearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService_SearchClient) EXPECT() *MockNotificationService_SearchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNotificationService_SearchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNotificationService_SearchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNotificationService_SearchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNotificationService_SearchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNotificationService_SearchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNotificationService_SearchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNotificationService_SearchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNotificationService_SearchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNotificationService_SearchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNotificationService_SearchClient) Recv() (*SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNotificationService_SearchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNotificationService_SearchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockNotificationService_SearchClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNotificationService_SearchClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNotificationService_SearchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockNotificationService_SearchClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNotificationService_SearchClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNotificationService_SearchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockNotificationService_SearchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNotificationService_SearchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNotificationService_SearchClient)(nil).Trailer))
}

// MockNotificationServiceServer is a mock of NotificationServiceServer interface.
type MockNotificationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceServerMockRecorder
}

// MockNotificationServiceServerMockRecorder is the mock recorder for MockNotificationServiceServer.
type MockNotificationServiceServerMockRecorder struct {
	mock *MockNotificationServiceServer
}

// NewMockNotificationServiceServer creates a new mock instance.
func NewMockNotificationServiceServer(ctrl *gomock.Controller) *MockNotificationServiceServer {
	mock := &MockNotificationServiceServer{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationServiceServer) EXPECT() *MockNotificationServiceServerMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockNotificationServiceServer) Receive(arg0 context.Context, arg1 *ReceiveRequest) (*ReceiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(*ReceiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockNotificationServiceServerMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockNotificationServiceServer)(nil).Receive), arg0, arg1)
}

// Release mocks base method.
func (m *MockNotificationServiceServer) Release(arg0 context.Context, arg1 *ReleaseRequest) (*ReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1)
	ret0, _ := ret[0].(*ReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockNotificationServiceServerMockRecorder) Release(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNotificationServiceServer)(nil).Release), arg0, arg1)
}

// Search mocks base method.
func (m *MockNotificationServiceServer) Search(arg0 *SearchRequest, arg1 NotificationService_SearchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockNotificationServiceServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNotificationServiceServer)(nil).Search), arg0, arg1)
}

// Send mocks base method.
func (m *MockNotificationServiceServer) Send(arg0 context.Context, arg1 *SendRequest) (*SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockNotificationServiceServerMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationServiceServer)(nil).Send), arg0, arg1)
}

// Status mocks base method.
func (m *MockNotificationServiceServer) Status(arg0 context.Context, arg1 *StatusRequest) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockNotificationServiceServerMockRecorder) Status(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNotificationServiceServer)(nil).Status), arg0, arg1)
}

// StatusUpdate mocks base method.
func (m *MockNotificationServiceServer) StatusUpdate(arg0 context.Context, arg1 *StatusUpdateRequest) (*StatusUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusUpdate", arg0, arg1)
	ret0, _ := ret[0].(*StatusUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusUpdate indicates an expected call of StatusUpdate.
func (mr *MockNotificationServiceServerMockRecorder) StatusUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockNotificationServiceServer)(nil).StatusUpdate), arg0, arg1)
}

// mustEmbedUnimplementedNotificationServiceServer mocks base method.
func (m *MockNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNotificationServiceServer")
}

// mustEmbedUnimplementedNotificationServiceServer indicates an expected call of mustEmbedUnimplementedNotificationServiceServer.
func (mr *MockNotificationServiceServerMockRecorder) mustEmbedUnimplementedNotificationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNotificationServiceServer", reflect.TypeOf((*MockNotificationServiceServer)(nil).mustEmbedUnimplementedNotificationServiceServer))
}

// MockUnsafeNotificationServiceServer is a mock of UnsafeNotificationServiceServer interface.
type MockUnsafeNotificationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeNotificationServiceServerMockRecorder
}

// MockUnsafeNotificationServiceServerMockRecorder is the mock recorder for MockUnsafeNotificationServiceServer.
type MockUnsafeNotificationServiceServerMockRecorder struct {
	mock *MockUnsafeNotificationServiceServer
}

// NewMockUnsafeNotificationServiceServer creates a new mock instance.
func NewMockUnsafeNotificationServiceServer(ctrl *gomock.Controller) *MockUnsafeNotificationServiceServer {
	mock := &MockUnsafeNotificationServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeNotificationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeNotificationServiceServer) EXPECT() *MockUnsafeNotificationServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedNotificationServiceServer mocks base method.
func (m *MockUnsafeNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNotificationServiceServer")
}

// mustEmbedUnimplementedNotificationServiceServer indicates an expected call of mustEmbedUnimplementedNotificationServiceServer.
func (mr *MockUnsafeNotificationServiceServerMockRecorder) mustEmbedUnimplementedNotificationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNotificationServiceServer", reflect.TypeOf((*MockUnsafeNotificationServiceServer)(nil).mustEmbedUnimplementedNotificationServiceServer))
}

// MockNotificationService_SearchServer is a mock of NotificationService_SearchServer interface.
type MockNotificationService_SearchServer struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationService_SearchServerMockRecorder
}

// MockNotificationService_SearchServerMockRecorder is the mock recorder for MockNotificationService_SearchServer.
type MockNotificationService_SearchServerMockRecorder struct {
	mock *MockNotificationService_SearchServer
}

// NewMockNotificationService_SearchServer creates a new mock instance.
func NewMockNotificationService_SearchServer(ctrl *gomock.Controller) *MockNotificationService_SearchServer {
	mock := &MockNotificationService_SearchServer{ctrl: ctrl}
	mock.recorder = &MockNotificationService_SearchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService_SearchServer) EXPECT() *MockNotificationService_SearchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockNotificationService_SearchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNotificationService_SearchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNotificationService_SearchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockNotificationService_SearchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNotificationService_SearchServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNotificationService_SearchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockNotificationService_SearchServer) Send(arg0 *SearchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNotificationService_SearchServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationService_SearchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockNotificationService_SearchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockNotificationService_SearchServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockNotificationService_SearchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockNotificationService_SearchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNotificationService_SearchServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNotificationService_SearchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockNotificationService_SearchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockNotificationService_SearchServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockNotificationService_SearchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockNotificationService_SearchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockNotificationService_SearchServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockNotificationService_SearchServer)(nil).SetTrailer), arg0)
}
