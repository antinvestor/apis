syntax = "proto3";
 
package notification;
option go_package ="notification";

//QueueRequest for Queue Request with these defined requirements
message QueueRequest{
    string profileID = 1;
    string massagetemplete = 2; 
    string language = 3;
    map<string ,string> massagevariables = 4;    
    string channel = 5;
    string autosend = 6;
}


message StatusRequest{
    string notificationID = 1;
    
}

message StatusResponse{
    string notificationID = 1;
    string messagestatus = 2;
    
}

message ReleaseRequest{
    string notificationID = 1;
    string releasemassage = 2;
}

message IncomeRequest{
    string profileID = 1;
    string requeststatus = 2;
    string massagetype = 3;
    string language = 4;
    string product =5;
}

message SearchRequest{
    string notificationID = 1;
}


message SearchResponse{
    string notificationID = 1;
    string requeststatus = 2;
    string massagetype = 3;
    string language = 4;
    string productID =5;
    map<string,string> payload = 6;
    string profileID =7;
}

service NotificationService{

    //Out method for queueing massages as requested
        rpc Out (QueueRequest) returns (StatusResponse);
    
    //CommunicationStatus request to determine if notification is prepared or released
        rpc Status (StatusRequest) returns (StatusResponse);
    
    //QueueRelease method for releasing queued massages and returns if notification status if released
        rpc Release (ReleaseRequest) returns (StatusResponse);
    
    //In method is for client request for particular notification respones from system
        rpc In (IncomeRequest) returns (StatusResponse);

    //Search method is for client request for particular notification details from system
        rpc Search (SearchRequest) returns (stream SearchResponse);
      
    }