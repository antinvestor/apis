// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification.proto

package notificationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusResponseMultiError,
// or nil if none found.
func (m *StatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 3 || l > 40 {
		err := StatusResponseValidationError{
			field:  "Id",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StatusResponse_Id_Pattern.MatchString(m.GetId()) {
		err := StatusResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for Status

	// no validation rules for ExternalId

	// no validation rules for TransientId

	// no validation rules for Extras

	if len(errors) > 0 {
		return StatusResponseMultiError(errors)
	}

	return nil
}

// StatusResponseMultiError is an error wrapping multiple validation errors
// returned by StatusResponse.ValidateAll() if the designated constraints
// aren't met.
type StatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusResponseMultiError) AllErrors() []error { return m }

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

var _StatusResponse_Id_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccessId() != "" {

		if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
			err := NotificationValidationError{
				field:  "AccessId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Notification_AccessId_Pattern.MatchString(m.GetAccessId()) {
			err := NotificationValidationError{
				field:  "AccessId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetId() != "" {

		if l := utf8.RuneCountInString(m.GetId()); l < 3 || l > 40 {
			err := NotificationValidationError{
				field:  "Id",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Notification_Id_Pattern.MatchString(m.GetId()) {
			err := NotificationValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetProfileId() != "" {

		if l := utf8.RuneCountInString(m.GetProfileId()); l < 3 || l > 40 {
			err := NotificationValidationError{
				field:  "ProfileId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Notification_ProfileId_Pattern.MatchString(m.GetProfileId()) {
			err := NotificationValidationError{
				field:  "ProfileId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,40}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Type

	// no validation rules for Template

	// no validation rules for Payload

	// no validation rules for Data

	// no validation rules for Language

	// no validation rules for OutBound

	// no validation rules for AutoRelease

	if m.GetRouteId() != "" {

		if l := utf8.RuneCountInString(m.GetRouteId()); l < 3 || l > 40 {
			err := NotificationValidationError{
				field:  "RouteId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Notification_RouteId_Pattern.MatchString(m.GetRouteId()) {
			err := NotificationValidationError{
				field:  "RouteId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// skipping validation for status

	// no validation rules for Extras

	// no validation rules for Priority

	oneofContactPresent := false
	switch v := m.Contact.(type) {
	case *Notification_ContactId:
		if v == nil {
			err := NotificationValidationError{
				field:  "Contact",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofContactPresent = true

		if m.GetContactId() != "" {

			if l := utf8.RuneCountInString(m.GetContactId()); l < 3 || l > 40 {
				err := NotificationValidationError{
					field:  "ContactId",
					reason: "value length must be between 3 and 40 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_Notification_ContactId_Pattern.MatchString(m.GetContactId()) {
				err := NotificationValidationError{
					field:  "ContactId",
					reason: "value does not match regex pattern \"[0-9a-z_-]{3,40}\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	case *Notification_Detail:
		if v == nil {
			err := NotificationValidationError{
				field:  "Contact",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofContactPresent = true

		if m.GetDetail() != "" {

			if l := utf8.RuneCountInString(m.GetDetail()); l < 3 || l > 250 {
				err := NotificationValidationError{
					field:  "Detail",
					reason: "value length must be between 3 and 250 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_Notification_Detail_Pattern.MatchString(m.GetDetail()) {
				err := NotificationValidationError{
					field:  "Detail",
					reason: "value does not match regex pattern \"[0-9a-z_-]{3,250}\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	default:
		_ = v // ensures v is used
	}
	if !oneofContactPresent {
		err := NotificationValidationError{
			field:  "Contact",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

var _Notification_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _Notification_Id_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _Notification_ProfileId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,40}")

var _Notification_ContactId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,40}")

var _Notification_Detail_Pattern = regexp.MustCompile("[0-9a-z_-]{3,250}")

var _Notification_RouteId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on StatusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusRequestMultiError, or
// nil if none found.
func (m *StatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := StatusRequestValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StatusRequest_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := StatusRequestValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 3 || l > 40 {
		err := StatusRequestValidationError{
			field:  "Id",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StatusRequest_Id_Pattern.MatchString(m.GetId()) {
		err := StatusRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StatusRequestMultiError(errors)
	}

	return nil
}

// StatusRequestMultiError is an error wrapping multiple validation errors
// returned by StatusRequest.ValidateAll() if the designated constraints
// aren't met.
type StatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusRequestMultiError) AllErrors() []error { return m }

// StatusRequestValidationError is the validation error returned by
// StatusRequest.Validate if the designated constraints aren't met.
type StatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusRequestValidationError) ErrorName() string { return "StatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusRequestValidationError{}

var _StatusRequest_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _StatusRequest_Id_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on StatusUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatusUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatusUpdateRequestMultiError, or nil if none found.
func (m *StatusUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := StatusUpdateRequestValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StatusUpdateRequest_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := StatusUpdateRequestValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 3 || l > 40 {
		err := StatusUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StatusUpdateRequest_Id_Pattern.MatchString(m.GetId()) {
		err := StatusUpdateRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for Status

	// no validation rules for ExternalId

	// no validation rules for Extras

	if len(errors) > 0 {
		return StatusUpdateRequestMultiError(errors)
	}

	return nil
}

// StatusUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by StatusUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type StatusUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusUpdateRequestMultiError) AllErrors() []error { return m }

// StatusUpdateRequestValidationError is the validation error returned by
// StatusUpdateRequest.Validate if the designated constraints aren't met.
type StatusUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusUpdateRequestValidationError) ErrorName() string {
	return "StatusUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StatusUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusUpdateRequestValidationError{}

var _StatusUpdateRequest_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _StatusUpdateRequest_Id_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ReleaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseRequestMultiError,
// or nil if none found.
func (m *ReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := ReleaseRequestValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReleaseRequest_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := ReleaseRequestValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 3 || l > 40 {
		err := ReleaseRequestValidationError{
			field:  "Id",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReleaseRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ReleaseRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return ReleaseRequestMultiError(errors)
	}

	return nil
}

// ReleaseRequestMultiError is an error wrapping multiple validation errors
// returned by ReleaseRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseRequestMultiError) AllErrors() []error { return m }

// ReleaseRequestValidationError is the validation error returned by
// ReleaseRequest.Validate if the designated constraints aren't met.
type ReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseRequestValidationError) ErrorName() string { return "ReleaseRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseRequestValidationError{}

var _ReleaseRequest_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _ReleaseRequest_Id_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRequestMultiError, or
// nil if none found.
func (m *SearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := SearchRequestValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SearchRequest_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := SearchRequestValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() != "" {

		if l := utf8.RuneCountInString(m.GetId()); l < 3 || l > 40 {
			err := SearchRequestValidationError{
				field:  "Id",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_SearchRequest_Id_Pattern.MatchString(m.GetId()) {
			err := SearchRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Query

	// no validation rules for Page

	// no validation rules for Count

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return SearchRequestMultiError(errors)
	}

	return nil
}

// SearchRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRequestMultiError) AllErrors() []error { return m }

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

var _SearchRequest_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _SearchRequest_Id_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")
