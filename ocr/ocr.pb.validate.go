// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ocr.proto

package ocrv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OCRFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OCRFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OCRFile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OCRFileMultiError, or nil if none found.
func (m *OCRFile) ValidateAll() error {
	return m.validate(true)
}

func (m *OCRFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileId

	// no validation rules for Language

	// no validation rules for Status

	// no validation rules for Text

	// no validation rules for Properties

	if len(errors) > 0 {
		return OCRFileMultiError(errors)
	}

	return nil
}

// OCRFileMultiError is an error wrapping multiple validation errors returned
// by OCRFile.ValidateAll() if the designated constraints aren't met.
type OCRFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OCRFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OCRFileMultiError) AllErrors() []error { return m }

// OCRFileValidationError is the validation error returned by OCRFile.Validate
// if the designated constraints aren't met.
type OCRFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OCRFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OCRFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OCRFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OCRFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OCRFileValidationError) ErrorName() string { return "OCRFileValidationError" }

// Error satisfies the builtin error interface
func (e OCRFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOCRFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OCRFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OCRFileValidationError{}

// Validate checks the field values on OcrRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OcrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OcrRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OcrRequestMultiError, or
// nil if none found.
func (m *OcrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OcrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetReferenceId()); l < 3 || l > 40 {
		err := OcrRequestValidationError{
			field:  "ReferenceId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OcrRequest_ReferenceId_Pattern.MatchString(m.GetReferenceId()) {
		err := OcrRequestValidationError{
			field:  "ReferenceId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLanguageId()); l < 2 || l > 3 {
		err := OcrRequestValidationError{
			field:  "LanguageId",
			reason: "value length must be between 2 and 3 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OcrRequest_LanguageId_Pattern.MatchString(m.GetLanguageId()) {
		err := OcrRequestValidationError{
			field:  "LanguageId",
			reason: "value does not match regex pattern \"[a-z]{2,3}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Properties

	// no validation rules for Async

	if l := len(m.GetFileId()); l < 1 || l > 5 {
		err := OcrRequestValidationError{
			field:  "FileId",
			reason: "value must contain between 1 and 5 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFileId() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 3 || l > 40 {
			err := OcrRequestValidationError{
				field:  fmt.Sprintf("FileId[%v]", idx),
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_OcrRequest_FileId_Pattern.MatchString(item) {
			err := OcrRequestValidationError{
				field:  fmt.Sprintf("FileId[%v]", idx),
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return OcrRequestMultiError(errors)
	}

	return nil
}

// OcrRequestMultiError is an error wrapping multiple validation errors
// returned by OcrRequest.ValidateAll() if the designated constraints aren't met.
type OcrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OcrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OcrRequestMultiError) AllErrors() []error { return m }

// OcrRequestValidationError is the validation error returned by
// OcrRequest.Validate if the designated constraints aren't met.
type OcrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OcrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OcrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OcrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OcrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OcrRequestValidationError) ErrorName() string { return "OcrRequestValidationError" }

// Error satisfies the builtin error interface
func (e OcrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOcrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OcrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OcrRequestValidationError{}

var _OcrRequest_ReferenceId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _OcrRequest_LanguageId_Pattern = regexp.MustCompile("[a-z]{2,3}")

var _OcrRequest_FileId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on OcrResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OcrResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OcrResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OcrResponseMultiError, or
// nil if none found.
func (m *OcrResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OcrResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReferenceId

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OcrResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OcrResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OcrResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OcrResponseMultiError(errors)
	}

	return nil
}

// OcrResponseMultiError is an error wrapping multiple validation errors
// returned by OcrResponse.ValidateAll() if the designated constraints aren't met.
type OcrResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OcrResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OcrResponseMultiError) AllErrors() []error { return m }

// OcrResponseValidationError is the validation error returned by
// OcrResponse.Validate if the designated constraints aren't met.
type OcrResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OcrResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OcrResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OcrResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OcrResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OcrResponseValidationError) ErrorName() string { return "OcrResponseValidationError" }

// Error satisfies the builtin error interface
func (e OcrResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOcrResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OcrResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OcrResponseValidationError{}

// Validate checks the field values on StatusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusRequestMultiError, or
// nil if none found.
func (m *StatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetReferenceId()); l < 3 || l > 40 {
		err := StatusRequestValidationError{
			field:  "ReferenceId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StatusRequest_ReferenceId_Pattern.MatchString(m.GetReferenceId()) {
		err := StatusRequestValidationError{
			field:  "ReferenceId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StatusRequestMultiError(errors)
	}

	return nil
}

// StatusRequestMultiError is an error wrapping multiple validation errors
// returned by StatusRequest.ValidateAll() if the designated constraints
// aren't met.
type StatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusRequestMultiError) AllErrors() []error { return m }

// StatusRequestValidationError is the validation error returned by
// StatusRequest.Validate if the designated constraints aren't met.
type StatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusRequestValidationError) ErrorName() string { return "StatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusRequestValidationError{}

var _StatusRequest_ReferenceId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")
