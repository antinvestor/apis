// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package profile.v1;

import "buf/validate/validate.proto";
import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/antinvestor/apis/go/profile/v1;profilev1";
option java_multiple_files = true;
option java_package = "profilev1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Profile Service"
    version: "1.0"
    contact: {
      name: "Ant Investor Ltd"
      url: "https://github.com/antinvestor/service-profile"
      email: "info@antinvestor.com"
    }
  }

  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"

  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {key: "bearer"}
  }
};

// buf:lint:ignore ENUM_VALUE_PREFIX
enum ContactType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  EMAIL = 0;
  MSISDN = 1;
}

// buf:lint:ignore ENUM_VALUE_PREFIX
enum CommunicationLevel {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  ALL = 0; // Any communication including 3rd party marketing is welcome.
  INTERNAL_MARKETING = 1; // Can receive marketing messages from our services
  IMPORTANT_ALERTS = 2; // These can be things like policy changes
  SYSTEM_ALERTS = 3; // This include user actions expecting a response.
  NO_CONTACT = 4; // This one needs prayers
}

message ContactObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  ContactType type = 2;
  string detail = 3;
  bool verified = 4;
  CommunicationLevel communication_level = 5;
  common.v1.STATE state = 6;
  google.protobuf.Struct extra = 7;
}

message RosterObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string profile_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  ContactObject contact = 3;
  google.protobuf.Struct extra = 4;
}

message AddressObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string name = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 100
  ];
  string country = 3;
  string city = 4;
  string area = 5;
  string street = 6;
  string house = 7;
  string postcode = 8;
  double latitude = 9;
  double longitude = 10;
  string extra = 11 [
    (buf.validate.field).string.min_len = 10,
    (buf.validate.field).string.max_len = 500
  ];
}

// buf:lint:ignore ENUM_VALUE_PREFIX
enum ProfileType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  PERSON = 0;
  INSTITUTION = 1;
  BOT = 2;
}

// The response message containing the full profile object
message ProfileObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  ProfileType type = 2;
  google.protobuf.Struct properties = 3;
  repeated ContactObject contacts = 4;
  repeated AddressObject addresses = 5;
  common.v1.STATE state = 6;
}

// RelationshipType enum represents the way two profiles are linked.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum RelationshipType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  MEMBER = 0;
  AFFILIATED = 1;
  BLACK_LISTED = 2;
}

message EntryItem {
  string object_name = 1;
  string object_id = 2;
}

// A Relationship object
message RelationshipObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  RelationshipType type = 2;
  google.protobuf.Struct properties = 3;

  EntryItem child_entry = 4;
  EntryItem parent_entry = 5;

  ProfileObject peer_profile = 6;
}

// The request message containing the profile's hash
message GetByIdRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message GetByIdResponse {
  ProfileObject data = 1;
}

message SearchRequest {
  string query = 1;
  int64 page = 2;
  int32 count = 3;
  string start_date = 4;
  string end_date = 5;
  repeated string properties = 6;
  google.protobuf.Struct extras = 7;
}

message SearchResponse {
  repeated ProfileObject data = 1;
}

// The request message containing the profile's hash
message MergeRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string mergeid = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message MergeResponse {
  ProfileObject data = 1;
}

// The request message containing the information necessary to create a profile
message CreateRequest {
  ProfileType type = 1 [(buf.validate.field).enum.defined_only = true];
  string contact = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 255
  ];
  google.protobuf.Struct properties = 3;
}

message CreateResponse {
  ProfileObject data = 1;
}

// The request message containing the information necessary to create a profile
message UpdateRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  google.protobuf.Struct properties = 2;
  common.v1.STATE state = 3;
}

message UpdateResponse {
  ProfileObject data = 1;
}

// The request message containing the information necessary to create a profile
message AddContactRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string contact = 2;
  google.protobuf.Struct extras = 3;
}

message AddContactResponse {
  ProfileObject data = 1;
  string verification_id = 2;
}

// The request message containing the information necessary to create a profile
message CreateContactRequest {
  string id = 1 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string contact = 2;
  google.protobuf.Struct extras = 3;
}

message CreateContactResponse {
  ContactObject data = 1;
}

// The request message containing the information necessary to verify a contact
message CreateContactVerificationRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string contact_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string code = 3;

  // This is the string amount of time before code expires e.g. 3m or 500s
  string durationToExpire = 4;
}

message CreateContactVerificationResponse {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  bool success = 2;
}

message CheckVerificationRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];

  string code = 2;
}

message CheckVerificationResponse {
  string id = 1;
  int32 check_attempts = 2;
  bool success = 3;
}

// The request message containing the information necessary to remove a contact
message RemoveContactRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message RemoveContactResponse {
  ProfileObject data = 1;
}

message SearchRosterRequest {
  string query = 1;
  int64 page = 2;
  int32 count = 3;
  string start_date = 4;
  string end_date = 5;
  repeated string properties = 6;
  google.protobuf.Struct extras = 7;
  string profile_id = 8 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 250,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,250}"
  ];
}

message SearchRosterResponse {
  repeated RosterObject data = 1;
}

message AddRosterRequest {
  repeated AddContactRequest data = 1;
}

message AddRosterResponse {
  repeated RosterObject data = 1;
}

message RemoveRosterRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message RemoveRosterResponse {
  RosterObject roster = 1;
}

// The request message containing the information necessary to create a profile
message AddAddressRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  AddressObject address = 2;
}

message AddAddressResponse {
  ProfileObject data = 1;
}

// Request message containing a contact necessary to link to a profile
message GetByContactRequest {
  string contact = 1;
}

message GetByContactResponse {
  ProfileObject data = 1;
}

// Request message to list all profiles related to the supplied profile id
message ListRelationshipRequest {
  string peer_name = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.in = "Contact",
    (buf.validate.field).string.in = "Profile",
    (buf.validate.field).string.in = "Group"
  ];
  string peer_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string last_relationship_id = 3 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  repeated string related_children_id = 4; // Related profile ids to specifically search for.
  int32 count = 5;
  bool invert_relation = 6;
}

message ListRelationshipResponse {
  repeated RelationshipObject data = 1;
}

// The request message containing the information necessary to create a profile
message AddRelationshipRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string parent = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.in = "Contact",
    (buf.validate.field).string.in = "Profile",
    (buf.validate.field).string.in = "Group"
  ];
  string parent_id = 3 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string child = 4 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.in = "Contact",
    (buf.validate.field).string.in = "Profile",
    (buf.validate.field).string.in = "Group"
  ];
  string child_id = 5 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  RelationshipType type = 6;
  google.protobuf.Struct properties = 7;
}

message AddRelationshipResponse {
  RelationshipObject data = 1;
}

// The request message containing the information necessary to delete relationship to a profile
message DeleteRelationshipRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string parent_id = 2 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message DeleteRelationshipResponse {
  RelationshipObject data = 1;
}

// The profile service definition.
service ProfileService {
  // Obtains a profile by its hash
  rpc GetById(GetByIdRequest) returns (GetByIdResponse) {
    option (google.api.http) = {get: "/{id}"};
  }

  // Obtains a profile by its hash
  rpc GetByContact(GetByContactRequest) returns (GetByContactResponse) {
    option (google.api.http) = {get: "/contact"};
  }

  // Obtains a profile by its hash
  rpc Search(SearchRequest) returns (stream SearchResponse) {
    option (google.api.http) = {get: "/search"};
  }

  // Uses data found in the profile from mergeHash to update the current profile.
  rpc Merge(MergeRequest) returns (MergeResponse) {
    option (google.api.http) = {
      post: "/merge"
      body: "*"
    };
  }

  // Creates a new profile based on the request.
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/"
      body: "*"
    };
  }

  // Creates a new profile based on the request.
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/{id}"
      body: "*"
    };
  }

  // Adds a new contact based on the request/this leads to automatic verification.
  rpc AddContact(AddContactRequest) returns (AddContactResponse) {
    option (google.api.http) = {
      post: "/{id}/contact"
      body: "*"
    };
  }

  // Creates a new free contact based on the details provided.
  rpc CreateContact(CreateContactRequest) returns (CreateContactResponse) {
    option (google.api.http) = {
      post: "/contact"
      body: "*"
    };
  }
  // Create a new contact verification request
  rpc CreateContactVerification(CreateContactVerificationRequest) returns (CreateContactVerificationResponse) {
    option (google.api.http) = {
      post: "/contact/{id}/verification/create"
      body: "*"
    };
  }

  //Checks the status of a verification
  rpc CheckVerification(CheckVerificationRequest) returns (CheckVerificationResponse) {
    option (google.api.http) = {
      post: "/contact/{id}/verification/check"
      body: "*"
    };
  }

  // Removes an old contact based on this request's id
  rpc RemoveContact(RemoveContactRequest) returns (RemoveContactResponse) {
    option (google.api.http) = {delete: "/contact/{id}"};
  }

  // Searches all contacts tied to a users profile and based on the active request.
  rpc SearchRoster(SearchRosterRequest) returns (stream SearchRosterResponse) {
    option (google.api.http) = {get: "/roster"};
  }

  // Adds a new contact based on the request/this leads to automatic verification.
  rpc AddRoster(AddRosterRequest) returns (AddRosterResponse) {
    option (google.api.http) = {
      post: "/roster"
      body: "*"
    };
  }

  // Removes a contact from a user's circle based on this request's id
  rpc RemoveRoster(RemoveRosterRequest) returns (RemoveRosterResponse) {
    option (google.api.http) = {delete: "/roster/{id}"};
  }

  // Adds a new address based on the request.
  rpc AddAddress(AddAddressRequest) returns (AddAddressResponse) {
    option (google.api.http) = {
      post: "/address"
      body: "*"
    };
  }

  // Adds a new relationship between different proiles.
  rpc AddRelationship(AddRelationshipRequest) returns (AddRelationshipResponse) {
    option (google.api.http) = {
      post: "/relationship"
      body: "*"
    };
  }

  // Remove an existing relationship between profiles.
  rpc DeleteRelationship(DeleteRelationshipRequest) returns (DeleteRelationshipResponse) {
    option (google.api.http) = {delete: "/relationship/{id}"};
  }

  // Lists relationships a profile has.
  rpc ListRelationship(ListRelationshipRequest) returns (stream ListRelationshipResponse) {
    option (google.api.http) = {get: "/relationship"};
  }
}
