// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package profile.v1;

// -----------------------------------------------------
// Core notes (normative):
// - Profile Service manages user and entity profiles
// - Supports persons, institutions, and bots
// - Contact verification via email and phone (MSISDN)
// - Roster management for user contact lists
// - Relationship tracking between profiles
// - Address management with geocoding support
// -----------------------------------------------------

import "buf/validate/validate.proto";
import "common/v1/common.proto";
import "google/protobuf/struct.proto";
import "gnostic/openapi/v3/annotations.proto";

option go_package = "github.com/antinvestor/apis/go/profile/v1;profilev1";
option java_multiple_files = true;
option java_package = "profilev1";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "Profile Service";
    version: "v1.0.0";
    description: "The Profile Service manages user and entity profiles including persons, institutions, and bots. It provides comprehensive profile management with contact verification (email, phone), roster management for user contact lists, relationship tracking between profiles, and address management with geocoding support. The service supports profile merging, communication preferences, and hierarchical relationships.";
    contact: {
      name: "Ant Investor Ltd";
      url: "https://github.com/antinvestor/service-profile";
      email: "info@antinvestor.com";
    }
    license: {
      name: "Apache License";
      url: "https://github.com/antinvestor/apis/blob/master/LICENSE";
    }
  }
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
              bearer_format: "JWT";
            }
          }
        }
      ]
    }
  }
};

// -----------------------------------------------------
// Enumerations
// -----------------------------------------------------

// ContactType defines the type of contact information.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum ContactType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  EMAIL = 0;   // Email address
  MSISDN = 1;  // Mobile phone number (MSISDN format)
}

// CommunicationLevel defines user's communication preferences.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum CommunicationLevel {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  ALL = 0;                 // All communications including 3rd party marketing
  INTERNAL_MARKETING = 1;  // Marketing messages from our services only
  IMPORTANT_ALERTS = 2;    // Important alerts like policy changes
  SYSTEM_ALERTS = 3;       // System alerts for user actions requiring response
  NO_CONTACT = 4;          // No communications (opt-out)
}

// ProfileType defines the type of profile entity.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum ProfileType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  PERSON = 0;      // Individual person
  INSTITUTION = 1; // Organization or institution
  BOT = 2;         // Automated bot or service account
}

// RelationshipType defines how two profiles are linked.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum RelationshipType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  MEMBER = 0;       // Member of an organization
  AFFILIATED = 1;   // Affiliated or associated with
  BLACK_LISTED = 2; // Blocked or blacklisted
}

// -----------------------------------------------------
// Core Data Types
// -----------------------------------------------------

// ContactObject represents a contact method (email or phone).
message ContactObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];                                       // Unique contact ID
  ContactType type = 2;                    // Contact type (email or MSISDN)
  string detail = 3;                       // Contact detail (email address or phone number)
  bool verified = 4;                       // Whether contact has been verified
  CommunicationLevel communication_level = 5; // User's communication preferences
  common.v1.STATE state = 6;               // Contact state
  google.protobuf.Struct extra = 7;        // Additional metadata
}

// RosterObject represents a contact in a user's roster/contact list.
message RosterObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];                    // Unique roster entry ID
  string profile_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];                    // Profile ID of the contact
  ContactObject contact = 3; // Contact information
  google.protobuf.Struct extra = 4; // Additional metadata
}

// AddressObject represents a physical address with geocoding.
message AddressObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];                    // Unique address ID
  string name = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 100
  ];                    // Address name/label (e.g., "Home", "Office")
  string country = 3;   // Country name or code
  string city = 4;      // City name
  string area = 5;      // Area/district/neighborhood
  string street = 6;    // Street name
  string house = 7;     // House/building number
  string postcode = 8;  // Postal/ZIP code
  double latitude = 9;  // Latitude coordinate
  double longitude = 10; // Longitude coordinate
  string extra = 11 [
    (buf.validate.field).string.min_len = 10,
    (buf.validate.field).string.max_len = 500
  ];                    // Additional address details
}

// ProfileObject represents a complete user or entity profile.
message ProfileObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];                                    // Unique profile ID
  ProfileType type = 2;                 // Profile type (person, institution, bot)
  google.protobuf.Struct properties = 3; // Profile properties (name, bio, avatar, etc.)
  repeated ContactObject contacts = 4;  // Associated contacts
  repeated AddressObject addresses = 5; // Associated addresses
  common.v1.STATE state = 6;            // Profile state
}

// EntryItem identifies an object in a relationship.
message EntryItem {
  string object_name = 1;  // Object type (Contact, Profile, Group)
  string object_id = 2;    // Object ID
}

// RelationshipObject represents a relationship between two profiles.
message RelationshipObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];                                    // Unique relationship ID
  RelationshipType type = 2;            // Relationship type
  google.protobuf.Struct properties = 3; // Relationship properties
  EntryItem child_entry = 4;            // Child entry in relationship
  EntryItem parent_entry = 5;           // Parent entry in relationship
  ProfileObject peer_profile = 6;       // Peer profile information
}

// The request message containing the profile's hash
message GetByIdRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message GetByIdResponse {
  ProfileObject data = 1;
}

message SearchRequest {
  string query = 1;
  int64 page = 2;
  int32 count = 3;
  string start_date = 4;
  string end_date = 5;
  repeated string properties = 6;
  google.protobuf.Struct extras = 7;
}

message SearchResponse {
  repeated ProfileObject data = 1;
}

// The request message containing the profile's hash
message MergeRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string mergeid = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message MergeResponse {
  ProfileObject data = 1;
}

// The request message containing the information necessary to create a profile
message CreateRequest {
  ProfileType type = 1 [(buf.validate.field).enum.defined_only = true];
  string contact = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 255
  ];
  google.protobuf.Struct properties = 3;
}

message CreateResponse {
  ProfileObject data = 1;
}

// The request message containing the information necessary to create a profile
message UpdateRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  google.protobuf.Struct properties = 2;
  common.v1.STATE state = 3;
}

message UpdateResponse {
  ProfileObject data = 1;
}

// The request message containing the information necessary to create a profile
message AddContactRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string contact = 2;
  google.protobuf.Struct extras = 3;
}

message AddContactResponse {
  ProfileObject data = 1;
  string verification_id = 2;
}

// The request message containing the information necessary to create a profile
message CreateContactRequest {
  string id = 1 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string contact = 2;
  google.protobuf.Struct extras = 3;
}

message CreateContactResponse {
  ContactObject data = 1;
}

// The request message containing the information necessary to verify a contact
message CreateContactVerificationRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string contact_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string code = 3;

  // This is the string amount of time before code expires e.g. 3m or 500s
  string durationToExpire = 4;
}

message CreateContactVerificationResponse {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  bool success = 2;
}

message CheckVerificationRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];

  string code = 2;
}

message CheckVerificationResponse {
  string id = 1;
  int32 check_attempts = 2;
  bool success = 3;
}

// The request message containing the information necessary to remove a contact
message RemoveContactRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message RemoveContactResponse {
  ProfileObject data = 1;
}

message SearchRosterRequest {
  string query = 1;
  int64 page = 2;
  int32 count = 3;
  string start_date = 4;
  string end_date = 5;
  repeated string properties = 6;
  google.protobuf.Struct extras = 7;
  string profile_id = 8 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 250,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,250}"
  ];
}

message SearchRosterResponse {
  repeated RosterObject data = 1;
}

message AddRosterRequest {
  repeated AddContactRequest data = 1;
}

message AddRosterResponse {
  repeated RosterObject data = 1;
}

message RemoveRosterRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message RemoveRosterResponse {
  RosterObject roster = 1;
}

// The request message containing the information necessary to create a profile
message AddAddressRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  AddressObject address = 2;
}

message AddAddressResponse {
  ProfileObject data = 1;
}

// Request message containing a contact necessary to link to a profile
message GetByContactRequest {
  string contact = 1;
}

message GetByContactResponse {
  ProfileObject data = 1;
}

// Request message to list all profiles related to the supplied profile id
message ListRelationshipRequest {
  string peer_name = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.in = "Contact",
    (buf.validate.field).string.in = "Profile",
    (buf.validate.field).string.in = "Group"
  ];
  string peer_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string last_relationship_id = 3 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  repeated string related_children_id = 4; // Related profile ids to specifically search for.
  int32 count = 5;
  bool invert_relation = 6;
}

message ListRelationshipResponse {
  repeated RelationshipObject data = 1;
}

// The request message containing the information necessary to create a profile
message AddRelationshipRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string parent = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.in = "Contact",
    (buf.validate.field).string.in = "Profile",
    (buf.validate.field).string.in = "Group"
  ];
  string parent_id = 3 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string child = 4 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.in = "Contact",
    (buf.validate.field).string.in = "Profile",
    (buf.validate.field).string.in = "Group"
  ];
  string child_id = 5 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  RelationshipType type = 6;
  google.protobuf.Struct properties = 7;
}

message AddRelationshipResponse {
  RelationshipObject data = 1;
}

// The request message containing the information necessary to delete relationship to a profile
message DeleteRelationshipRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string parent_id = 2 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message DeleteRelationshipResponse {
  RelationshipObject data = 1;
}

// -----------------------------------------------------
// Profile Service
// -----------------------------------------------------

// ProfileService manages user and entity profiles.
// All RPCs require authentication via Bearer token.
service ProfileService {
  // GetById retrieves a profile by its unique ID.
  rpc GetById(GetByIdRequest) returns (GetByIdResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "getProfileById"
      summary: "Get profile by ID"
      description: "Retrieves a complete profile by its unique identifier including contacts, addresses, and properties."
      tags: "Profiles"
    };
  }

  // GetByContact retrieves a profile by contact information.
  rpc GetByContact(GetByContactRequest) returns (GetByContactResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "getProfileByContact"
      summary: "Get profile by contact"
      description: "Retrieves a profile associated with a specific contact (email or phone number)."
      tags: "Profiles"
    };
  }

  // Search finds profiles matching specified criteria.
  rpc Search(SearchRequest) returns (stream SearchResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "searchProfiles"
      summary: "Search profiles"
      description: "Searches for profiles matching specified criteria including name, contact, date range, and custom properties. Returns a stream of matching profiles."
      tags: "Profiles"
    };
  }

  // Merge combines two profiles into one.
  rpc Merge(MergeRequest) returns (MergeResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "mergeProfiles"
      summary: "Merge profiles"
      description: "Merges two profiles by combining their data. The merge source profile data is incorporated into the target profile."
      tags: "Profiles"
    };
  }

  // Create creates a new profile.
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "createProfile"
      summary: "Create profile"
      description: "Creates a new profile with the specified type (person, institution, bot) and initial contact information."
      tags: "Profiles"
    };
  }

  // Update updates an existing profile's properties.
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "updateProfile"
      summary: "Update profile"
      description: "Updates an existing profile's properties and state. Contacts and addresses are managed via separate RPCs."
      tags: "Profiles"
    };
  }

  // AddContact adds a new contact to a profile with automatic verification.
  rpc AddContact(AddContactRequest) returns (AddContactResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "addContact"
      summary: "Add contact to profile"
      description: "Adds a new contact (email or phone) to a profile and initiates automatic verification. Returns the updated profile and verification ID."
      tags: "Contacts"
    };
  }

  // CreateContact creates a standalone contact not linked to a profile.
  rpc CreateContact(CreateContactRequest) returns (CreateContactResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "createContact"
      summary: "Create standalone contact"
      description: "Creates a standalone contact that can later be linked to a profile. Useful for pre-registration scenarios."
      tags: "Contacts"
    };
  }

  // CreateContactVerification initiates contact verification.
  rpc CreateContactVerification(CreateContactVerificationRequest) returns (CreateContactVerificationResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "createContactVerification"
      summary: "Create contact verification"
      description: "Initiates contact verification by sending a verification code via email or SMS. The code expires after the specified duration."
      tags: "Contacts"
    };
  }

  // CheckVerification verifies a contact using the provided code.
  rpc CheckVerification(CheckVerificationRequest) returns (CheckVerificationResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "checkVerification"
      summary: "Check verification code"
      description: "Verifies a contact by checking the provided verification code. Tracks verification attempts and returns success status."
      tags: "Contacts"
    };
  }

  // RemoveContact removes a contact from a profile.
  rpc RemoveContact(RemoveContactRequest) returns (RemoveContactResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "removeContact"
      summary: "Remove contact"
      description: "Removes a contact from a profile. The contact is disassociated but may remain in the system."
      tags: "Contacts"
    };
  }

  // SearchRoster searches a user's contact roster.
  rpc SearchRoster(SearchRosterRequest) returns (stream SearchRosterResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "searchRoster"
      summary: "Search roster"
      description: "Searches a user's contact roster (contact list) with filtering by date range, properties, and custom criteria. Returns a stream of roster entries."
      tags: "Roster"
    };
  }

  // AddRoster adds multiple contacts to a user's roster.
  rpc AddRoster(AddRosterRequest) returns (AddRosterResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "addRoster"
      summary: "Add roster entries"
      description: "Adds multiple contacts to a user's roster (contact list). Each contact is verified automatically."
      tags: "Roster"
    };
  }

  // RemoveRoster removes a contact from a user's roster.
  rpc RemoveRoster(RemoveRosterRequest) returns (RemoveRosterResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "removeRoster"
      summary: "Remove roster entry"
      description: "Removes a contact from a user's roster (contact list). The profile remains but is no longer in the user's contacts."
      tags: "Roster"
    };
  }

  // AddAddress adds a new address to a profile.
  rpc AddAddress(AddAddressRequest) returns (AddAddressResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "addAddress"
      summary: "Add address"
      description: "Adds a new physical address to a profile with optional geocoding (latitude/longitude)."
      tags: "Addresses"
    };
  }

  // AddRelationship creates a relationship between profiles.
  rpc AddRelationship(AddRelationshipRequest) returns (AddRelationshipResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "addRelationship"
      summary: "Add relationship"
      description: "Creates a relationship between two profiles (member, affiliated, blacklisted). Supports hierarchical relationships."
      tags: "Relationships"
    };
  }

  // DeleteRelationship removes a relationship between profiles.
  rpc DeleteRelationship(DeleteRelationshipRequest) returns (DeleteRelationshipResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "deleteRelationship"
      summary: "Delete relationship"
      description: "Removes an existing relationship between profiles. The profiles remain but are no longer linked."
      tags: "Relationships"
    };
  }

  // ListRelationship lists all relationships for a profile.
  rpc ListRelationship(ListRelationshipRequest) returns (stream ListRelationshipResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "listRelationships"
      summary: "List relationships"
      description: "Lists all relationships for a profile with optional filtering by type and related profiles. Supports pagination and relationship inversion."
      tags: "Relationships"
    };
  }
}
