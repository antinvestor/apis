// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package common.v1;

import "buf/validate/validate.proto";

option cc_enable_arenas = true;
option go_package = "github.com/antinvestor/apis/go/common/v1;commonv1";
option java_multiple_files = true;
option java_package = "commonv1";

// buf:lint:ignore ENUM_VALUE_PREFIX
enum STATE {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  CREATED = 0;
  CHECKED = 1;
  ACTIVE = 2;
  INACTIVE = 3;
  DELETED = 4;
}

// buf:lint:ignore ENUM_VALUE_PREFIX
enum STATUS {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UNKNOWN = 0;
  QUEUED = 1;
  IN_PROCESS = 2;
  FAILED = 3;
  SUCCESSFUL = 4;
}

message SearchRequest {
  string query = 1;
  string id_query = 2;
  int64 page = 3;
  int32 count = 4;
  string start_date = 5;
  string end_date = 6;
  repeated string properties = 7;
  map<string, string> extras = 8;
}

message StatusRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  map<string, string> extras = 2;
}

message StatusResponse {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  STATE state = 2;
  STATUS status = 3;
  string external_id = 4;
  string transient_id = 5;
  map<string, string> extras = 6;
}

message StatusUpdateRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  STATE state = 2;
  STATUS status = 3;
  string external_id = 4;
  map<string, string> extras = 5;
}

message StatusUpdateResponse {
  StatusResponse data = 1;
}

message ContactLink {
  string profile_name = 1 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 250,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,250}"
  ];

  string profile_id = 2 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,40}"
  ];

  string profile_image_id = 3 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,40}"
  ];

  string contact_id = 4 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,40}"
  ];
  string detail = 5 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 250,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,250}"
  ];

  map<string, string> extras = 6;
}

// Represents an amount of money with its currency type.
message Money {
  // The three-letter currency code defined in ISO 4217.
  string currency_code = 1;

  // The whole units of the amount.
  // For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
  int64 units = 2;

  // Number of nano (10^-9) units of the amount.
  // The value must be between -999,999,999 and +999,999,999 inclusive.
  // If `units` is positive, `nanos` must be positive or zero.
  // If `units` is zero, `nanos` can be positive, zero, or negative.
  // If `units` is negative, `nanos` must be negative or zero.
  // For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
  int32 nanos = 3;
}

// Localized variant of a text in a particular language.
message LocalizedText {
  // Localized string in the language corresponding to `language_code' below.
  string text = 1;

  // The text's BCP-47 language code, such as "en-US" or "sr-Latn".
  //
  // For more information, see
  // http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
  string language_code = 2;
}