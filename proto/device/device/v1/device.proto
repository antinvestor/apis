// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package device.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/antinvestor/apis/go/device/v1;devicev1";
option java_multiple_files = true;
option java_package = "devicev1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Device Service"
    version: "1.0"
    contact: {
      name: "Ant Investor Ltd"
      url: "https://github.com/antinvestor/service-device"
      email: "info@antinvestor.com"
    }
  }

  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"

  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {key: "bearer"}
  }
};

// buf:lint:ignore ENUM_VALUE_PREFIX
enum KeyType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  MATRIX_KEY = 0;
  NOTIFICATION_KEY = 1;
}

message Locale {
  repeated string language = 1;
  string timezone = 5;
  string utc_offset = 6;
  string currency = 8;
  string currency_name = 9;
  string code = 10;
}

// The response message containing the full device key object
message KeyObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string device_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];

  bytes key = 3;
  google.protobuf.Struct extra = 4;
}

// Contained message representing a device's log
message DeviceLog {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string device_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string session_id = 3 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string ip = 4;
  Locale locale = 5;
  string user_agent = 6;
  string os = 7;
  string last_seen = 8;
  google.protobuf.Struct location = 9;
  google.protobuf.Struct extra = 10;
}

// The response message containing the full device object
message DeviceObject {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string name = 2;
  string session_id = 3;
  string ip = 4;
  string user_agent = 5;
  string os = 6;
  string last_seen = 7;
  string profile_id = 8;
  Locale locale = 9;
  google.protobuf.Struct location = 11;
  google.protobuf.Struct properties = 15;
}

// The request message containing the device's hash
message GetByIdRequest {
  repeated string id = 1 [(buf.validate.field).repeated.items = {
    string: {
      min_len: 3
      max_len: 40
      pattern: "[0-9a-z_-]{3,20}"
    }
  }];
  bool extensive = 2;
}

message GetByIdResponse {
  repeated DeviceObject data = 1;
}

// The request message containing the device's hash
message GetBySessionIdRequest {
  string id = 1 [(buf.validate.field).string = {
    min_len: 3
    max_len: 40
    pattern: "[0-9a-z_-]{3,20}"
  }];
}

message GetBySessionIdResponse {
  DeviceObject data = 1;
}

message SearchRequest {
  string query = 1;
  int32 page = 2;
  int32 count = 3;
  string start_date = 4;
  string end_date = 5;
  repeated string properties = 6;
  google.protobuf.Struct extras = 7;
}

message SearchResponse {
  repeated DeviceObject data = 1;
}

// The request message containing the information necessary to create a device
message CreateRequest {
  string name = 2;
  google.protobuf.Struct properties = 3;
}

message CreateResponse {
  DeviceObject data = 1;
}

// The request message containing the information necessary to update a device
message UpdateRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string name = 2;
  google.protobuf.Struct properties = 3;
}

message UpdateResponse {
  DeviceObject data = 1;
}

// The request message has data to link a session to a user
message LinkRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string profile_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  google.protobuf.Struct properties = 3;
}

message LinkResponse {
  DeviceObject data = 1;
}

// The request message containing the information necessary to remove a device
message RemoveRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
}

message RemoveResponse {
  DeviceObject data = 1;
}

// The request message containing the information necessary to create a key
message LogRequest {
  string device_id = 1 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];

  string session_id = 3 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];

  string ip = 4;
  string locale = 5;
  string user_agent = 6;
  string os = 7;
  string last_seen = 8;
  google.protobuf.Struct extras = 9;
}

message LogResponse {
  DeviceLog data = 1;
}

// Request message to list device logs related to the supplied device id
message ListLogsRequest {
  string device_id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  int32 count = 2;
}

message ListLogsResponse {
  repeated DeviceLog data = 1;
}

// The request message containing the information necessary to create a key
message AddKeyRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string device_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  KeyType key_type = 3;
  bytes data = 4;
  google.protobuf.Struct extras = 5;
}

message AddKeyResponse {
  KeyObject data = 1;
}

// The request message containing the information necessary to remove a key
message RemoveKeyRequest {
  repeated string id = 1 [(buf.validate.field).repeated.items = {
    string: {
      min_len: 3
      max_len: 40
      pattern: "[0-9a-z_-]{3,20}"
    }
  }];
}

message RemoveKeyResponse {
  repeated string id = 1;
}

// Request message to list all keys related to the supplied device id
message SearchKeyRequest {
  string query = 1;
  string device_id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  KeyType key_type = 3;
  int32 page = 4;
  int32 count = 5;
}

message SearchKeyResponse {
  repeated KeyObject data = 1;
}

// The device service definition.
service DeviceService {
  // Obtains a device by its hash
  rpc GetById(GetByIdRequest) returns (GetByIdResponse) {
    option (google.api.http) = {get: "/{id}"};
  }
  // Obtains a device by its session id
  rpc GetBySessionId(GetBySessionIdRequest) returns (GetBySessionIdResponse) {
    option (google.api.http) = {get: "/session/{id}"};
  }
  // Obtains a device by its hash
  rpc Search(SearchRequest) returns (stream SearchResponse) {
    option (google.api.http) = {get: "/search"};
  }
  // Creates a new device based on the request.
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/"
      body: "*"
    };
  }
  // Updates an existing device based on the request.
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/{id}"
      body: "*"
    };
  }

  // Links an existing device session based on the request to a profile.
  rpc Link(LinkRequest) returns (LinkResponse) {
    option (google.api.http) = {
      patch: "/link/{id}"
      body: "*"
    };
  }

  // Removes an existing device based on the request.
  rpc Remove(RemoveRequest) returns (RemoveResponse) {
    option (google.api.http) = {delete: "/{id}"};
  }

  // Log a new key based on the request.
  rpc Log(LogRequest) returns (LogResponse) {
    option (google.api.http) = {
      post: "/logs"
      body: "*"
    };
  }

  // Lists logs the a device has/owns.
  rpc ListLogs(ListLogsRequest) returns (stream ListLogsResponse) {
    option (google.api.http) = {get: "/logs"};
  }

  // Adds a new key based on the request.
  rpc AddKey(AddKeyRequest) returns (AddKeyResponse) {
    option (google.api.http) = {
      post: "/keys"
      body: "*"
    };
  }

  // Removes an old device keys based on this request's id
  rpc RemoveKey(RemoveKeyRequest) returns (RemoveKeyResponse) {
    option (google.api.http) = {delete: "/keys/{id}"};
  }

  // Lists all the keys a device has/owns.
  rpc SearchKey(SearchKeyRequest) returns (stream SearchKeyResponse) {
    option (google.api.http) = {get: "/keys"};
  }
}
