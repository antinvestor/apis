// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ocr.v1;

import "buf/validate/validate.proto";
import "common/v1/common.proto";

option go_package = "github.com/antinvestor/apis/go/ocr/v1;ocrv1";
option java_multiple_files = true;
option java_package = "ocrv1";

message OCRFile {
  string file_id = 1;
  string language = 2;
  common.v1.STATUS status = 3;
  string text = 4;
  map<string, string> properties = 5;
}

//Request to determine text found in a file
message RecognizeRequest {
  string reference_id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string language_id = 2 [
    (buf.validate.field).string.min_len = 2,
    (buf.validate.field).string.max_len = 3,
    (buf.validate.field).string.pattern = "[a-z]{2,3}"
  ];
  map<string, string> properties = 3;
  bool async = 4;
  repeated string file_id = 5 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 5,
    (buf.validate.field).repeated.items = {
      string: {
        min_len: 3,
        max_len: 40,
        pattern: "[0-9a-z_-]{3,20}"
      }
    }
  ];
}

message RecognizeResponse {
  string reference_id = 1;
  repeated OCRFile result = 2;
}

message StatusRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  map<string, string> extras = 2;
}

message StatusResponse {
  RecognizeResponse data = 1;
}

service OCRService {
  // Perform a new ocr process request
  rpc Recognize(RecognizeRequest) returns (RecognizeResponse);

  // Check the status of request if queued
  rpc Status(StatusRequest) returns (StatusResponse);
}
