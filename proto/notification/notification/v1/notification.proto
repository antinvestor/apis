// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package notification.v1;

import "buf/validate/validate.proto";
import "common/v1/common.proto";

option go_package = "github.com/antinvestor/apis/go/notification/v1;notificationv1";
option java_multiple_files = true;
option java_package = "notificationv1";

// buf:lint:ignore ENUM_VALUE_PREFIX
enum PRIORITY {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  HIGH = 0;
  LOW = 1;
  VERY_LOW = 2;
}

message Language {
  string id = 1 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string code = 2;
  string name = 3;
  map<string, string> extra = 4;
}

message TemplateData {
  string id = 1 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];

  string type = 2;
  string detail = 3;

  Language language = 4;
}

message Template {
  string id = 1 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string name = 2;

  repeated TemplateData data = 4;
  map<string, string> extra = 5;
}

message Notification {
  string id = 1 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];

  string profile_type = 2 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 250,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,250}"
  ];

  string profile_id = 3 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,40}"
  ];

  oneof contact {
    option (buf.validate.oneof).required = false;
    string contact_id = 4 [
      (buf.validate.field).ignore_empty = true,
      (buf.validate.field).string.min_len = 3,
      (buf.validate.field).string.max_len = 40,
      (buf.validate.field).string.pattern = "[0-9a-z_-]{3,40}"
    ];
    string detail = 5 [
      (buf.validate.field).ignore_empty = true,
      (buf.validate.field).string.min_len = 3,
      (buf.validate.field).string.max_len = 250,
      (buf.validate.field).string.pattern = "[0-9a-z_-]{3,250}"
    ];
  }
  string type = 6;
  string template = 7;
  map<string, string> payload = 8;
  string data = 9;
  string language = 10;
  bool out_bound = 11;
  bool auto_release = 12;
  string route_id = 13 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  common.v1.StatusResponse status = 14 [(buf.validate.field).skipped = true];
  map<string, string> extras = 15;

  PRIORITY priority = 16;

  string parent_id = 17 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];

  string source = 18 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 250,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,250}"
  ];

  string source_contact_id = 19 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,40}"
  ];
}

message SearchResponse {
  repeated Notification data = 1;
}

message SendRequest {
  Notification data = 1;
}

message SendResponse {
  common.v1.StatusResponse data = 1;
}

message ReleaseRequest {
  string access_id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string id = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];
  string comment = 3;
}

message ReleaseResponse {
  common.v1.StatusResponse data = 1;
}

message ReceiveRequest {
  Notification data = 1;
}

message ReceiveResponse {
  common.v1.StatusResponse data = 1;
}

message TemplateSearchRequest {
  string query = 1;
  string language_code = 2;
  int64 page = 3;
  int32 count = 4;
}

message TemplateSearchResponse {
  repeated Template data = 1;
}

message TemplateSaveRequest {
  string name = 1;
  string language_code = 2;
  map<string, string> data = 3;
  map<string, string> extra = 4;
}

message TemplateSaveResponse {
  Template data = 1;
}

service NotificationService {
  //Send method for queueing massages as requested
  rpc Send(SendRequest) returns (SendResponse);

  //Status request to determine if notification is prepared or released
  rpc Status(common.v1.StatusRequest) returns (common.v1.StatusResponse);

  //Status update request to allow continuation of notification processing
  rpc StatusUpdate(common.v1.StatusUpdateRequest) returns (common.v1.StatusUpdateResponse);

  //Release method for releasing queued massages and returns if notification status if released
  rpc Release(ReleaseRequest) returns (ReleaseResponse);

  //Receive method is for client request for particular notification responses from system
  rpc Receive(ReceiveRequest) returns (ReceiveResponse);

  //Search method is for client request for particular notification details from system
  rpc Search(common.v1.SearchRequest) returns (stream SearchResponse);

  // Utility to allow system obtain templates within the system
  rpc TemplateSearch(TemplateSearchRequest) returns (stream TemplateSearchResponse);

  rpc TemplateSave(TemplateSaveRequest) returns (TemplateSaveResponse);
}
