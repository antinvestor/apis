// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lostid.v1;

// -----------------------------------------------------
// Core notes (normative):
// - Lost ID Service manages lost and found identification documents
// - Supports collectible item registration with image uploads
// - Tracks search requests and matching progress
// - Maintains transaction history for rewards and fees
// - All timestamps are RFC3339 / google.protobuf.Timestamp
// -----------------------------------------------------

import "buf/validate/validate.proto";
import "common/v1/common.proto";
import "google/protobuf/struct.proto";
import "google/type/interval.proto";
import "google/type/money.proto";
import "gnostic/openapi/v3/annotations.proto";

option go_package = "github.com/antinvestor/apis/go/lostid/v1;lostidv1";
option java_multiple_files = true;
option java_package = "lostidv1";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "Lost ID Service";
    version: "v1.0.0";
    description: "The Lost ID Service provides a platform for managing lost and found identification documents. It enables users to register found items (collectibles) with images, search for lost items, track matching progress, and manage financial transactions related to rewards and service fees. The service facilitates reuniting people with their lost identification documents through a secure, tracked process.";
    contact: {
      name: "Ant Investor Ltd";
      url: "https://github.com/antinvestor/service-lostid";
      email: "info@antinvestor.com";
    }
    license: {
      name: "Apache License";
      url: "https://github.com/antinvestor/apis/blob/master/LICENSE";
    }
  }
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
              bearer_format: "JWT";
            }
          }
        }
      ]
    }
  }
};

// -----------------------------------------------------
// Enumerations
// -----------------------------------------------------

// ItemType defines the types of items tracked in the system.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum ItemType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  COLLECTIBLE = 0;  // Found item registered in the system
  SEARCH = 1;       // Search request for a lost item
  TRANSACTION = 2;  // Financial transaction (reward, fee)
}

// -----------------------------------------------------
// Collectible Messages
// -----------------------------------------------------

// CollectibleRequest registers a found identification document.
// Supports up to 5 images of the found item.
message CollectibleRequest {
  repeated string file_id = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 5,
    (buf.validate.field).repeated.items = {
      string: {
        min_len: 3
        max_len: 40
        pattern: "[0-9a-z_-]{3,20}"
      }
    }
  ];  // File IDs of uploaded images (1-5 images)
  google.protobuf.Struct properties = 2;  // Additional item details (type, location found, etc.)
}

// CollectibleResponse returns the registered collectible item.
message CollectibleResponse {
  string id = 1;                          // Unique collectible ID
  repeated string file_id = 2;            // Associated image file IDs
  google.protobuf.Struct properties = 3;  // Item properties
  string state = 4;                       // Current state (registered, matched, claimed, etc.)
}

// ListCollectibleRequest retrieves collectibles by pagination or time range.
message ListCollectibleRequest {
  oneof range {
    // either pagination or time interval must be set.
    option (buf.validate.oneof).required = true;

    common.v1.Pagination pagination = 1;  // Offset-based pagination
    google.type.Interval interval = 2;    // Time range filter
  }
}

// ListCollectibleResponse returns a list of collectibles.
message ListCollectibleResponse {
  repeated CollectibleResponse data = 1;  // List of collectibles
}

// -----------------------------------------------------
// Search Messages
// -----------------------------------------------------

// SearchResponse returns a search request for a lost item.
message SearchResponse {
  string id = 1;                          // Unique search ID
  string query = 2;                       // Search query/description
  google.protobuf.Struct properties = 3;  // Search criteria
  string state = 4;                       // Current state (active, matched, closed)
}

// ListSearchRequest retrieves searches by pagination or time range.
message ListSearchRequest {
  oneof range {
    // either pagination or time interval must be set.
    option (buf.validate.oneof).required = true;

    common.v1.Pagination pagination = 1;  // Offset-based pagination
    google.type.Interval interval = 2;    // Time range filter
  }
}

// ListSearchResponse returns a list of searches.
message ListSearchResponse {
  repeated SearchResponse data = 1;  // List of search requests
}

// -----------------------------------------------------
// Progress Tracking Messages
// -----------------------------------------------------

// ProgressRequest retrieves progress for a collectible or search.
message ProgressRequest {
  string id = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 40,
    (buf.validate.field).string.pattern = "[0-9a-z_-]{3,20}"
  ];  // Item ID (collectible or search)
  ItemType type = 2 [(buf.validate.field).enum.defined_only = true];  // Item type
}

// ProgressItem represents a status update in the item's lifecycle.
message ProgressItem {
  string id = 1;          // Progress entry ID
  string datetime = 2;    // Timestamp of this update (RFC3339)
  string state = 3;       // State at this point (registered, matched, claimed, etc.)
  string description = 4; // Human-readable description of the update
}

// TransactionItem represents a financial transaction.
message TransactionItem {
  string id = 1;                // Transaction ID
  string datetime = 2;          // Transaction timestamp (RFC3339)
  bool credit = 3;              // True if credit, false if debit
  google.type.Money amount = 4; // Transaction amount
  string description = 5;       // Transaction description (reward, fee, etc.)
}

// ProgressResponse returns the complete progress history for an item.
message ProgressResponse {
  string id = 1;                          // Item ID
  ItemType type = 2;                      // Item type
  google.protobuf.Struct properties = 3;  // Item properties
  string state = 4;                       // Current state
  repeated ProgressItem items = 5;        // Progress history
  repeated TransactionItem transactions = 6; // Associated financial transactions
}

// -----------------------------------------------------
// Transaction Messages
// -----------------------------------------------------

// ListTransactionRequest retrieves transactions by pagination or time range.
message ListTransactionRequest {
  oneof range {
    // either pagination or time interval must be set.
    option (buf.validate.oneof).required = true;

    common.v1.Pagination pagination = 1;  // Offset-based pagination
    google.type.Interval interval = 2;    // Time range filter
  }
}

// ListTransactionResponse returns a list of transactions.
message ListTransactionResponse {
  repeated TransactionItem data = 1;  // List of transactions
}

// -----------------------------------------------------
// Lost ID Service
// -----------------------------------------------------

// LostIdService manages lost and found identification documents.
// All RPCs require authentication via Bearer token.
service LostIdService {
  // Collectible registers a found identification document.
  // Supports up to 5 images of the found item.
  rpc Collectible(CollectibleRequest) returns (CollectibleResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "registerCollectible"
      summary: "Register found item"
      description: "Registers a found identification document in the system. Supports uploading 1-5 images of the found item along with details like location found, item type, and description. The system will attempt to match with active search requests."
      tags: "Collectibles"
    };
  }

  // ListCollectible retrieves registered collectibles.
  // Supports pagination or time-based filtering.
  rpc ListCollectible(ListCollectibleRequest) returns (stream ListCollectibleResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "listCollectibles"
      summary: "List found items"
      description: "Retrieves a list of registered collectibles (found items). Supports both offset-based pagination and time range filtering. Returns a stream of collectibles."
      tags: "Collectibles"
    };
  }

  // Search creates a search request for a lost item.
  // The system will attempt to match with registered collectibles.
  rpc Search(common.v1.SearchRequest) returns (SearchResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "searchLostItem"
      summary: "Search for lost item"
      description: "Creates a search request for a lost identification document. Provide details like item type, location lost, and description. The system will attempt to match with registered collectibles and notify if a match is found."
      tags: "Searches"
    };
  }

  // ListSearch retrieves search requests.
  // Supports pagination or time-based filtering.
  rpc ListSearch(ListSearchRequest) returns (stream ListSearchResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "listSearches"
      summary: "List search requests"
      description: "Retrieves a list of search requests for lost items. Supports both offset-based pagination and time range filtering. Returns a stream of search requests."
      tags: "Searches"
    };
  }

  // Progress retrieves the complete history for a collectible or search.
  // Includes status updates and financial transactions.
  rpc Progress(ProgressRequest) returns (ProgressResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "getProgress"
      summary: "Get item progress"
      description: "Retrieves the complete progress history for a collectible or search request. Includes all status updates (registered, matched, claimed) and associated financial transactions (rewards, fees)."
      tags: "Progress"
    };
  }

  // ListTransaction retrieves financial transactions.
  // Includes rewards paid and service fees charged.
  rpc ListTransaction(ListTransactionRequest) returns (stream ListTransactionResponse) {
    option (gnostic.openapi.v3.operation) = {
      operation_id: "listTransactions"
      summary: "List financial transactions"
      description: "Retrieves a list of financial transactions including rewards paid to finders and service fees charged. Supports both offset-based pagination and time range filtering."
      tags: "Transactions"
    };
  }
}
