name: Changelog CI

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect Changed Packages
        id: set-matrix
        run: |
          # Fetch base branch refs
          git fetch origin ${{ github.base_ref }}
          
          # Get the list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD^..HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Initialize arrays for each language
          declare -A packages
          
          # Define all packages
          ALL_PACKAGES=("chat" "common" "device" "files" "ledger" "lostid" "notification" "ocr" "partition" "payment" "profile" "property" "settings")
          LANGUAGES=("dart" "go" "java")
          
          # Check each language/package combination
          for lang in "${LANGUAGES[@]}"; do
            for pkg in "${ALL_PACKAGES[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "^${lang}/${pkg}/"; then
                packages["${lang}/${pkg}"]=1
              fi
            done
          done
          
          # Build JSON array for matrix
          matrix_json="["
          first=true
          for key in "${!packages[@]}"; do
            lang="${key%%/*}"
            pkg="${key##*/}"
            if [ "$first" = true ]; then
              first=false
            else
              matrix_json+=","
            fi
            matrix_json+="{\"language\":\"${lang}\",\"package\":\"${pkg}\"}"
          done
          matrix_json+="]"
          
          # If no changes detected, create empty matrix
          if [ "$matrix_json" = "[]" ]; then
            echo "No package changes detected"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":${matrix_json}}" >> $GITHUB_OUTPUT
          fi
          
          echo "Matrix: {\"include\":${matrix_json}}"

  changelog:
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Version
        id: release-version
        run: |
          # Fetch the latest release (draft or published)
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName,isDraft --jq '.[0] | .tagName')
          
          if [ -n "$LATEST_RELEASE" ]; then
            # If we have a release, check if it's a draft
            IS_DRAFT=$(gh release view "$LATEST_RELEASE" --json isDraft --jq '.isDraft')
            
            if [ "$IS_DRAFT" = "true" ]; then
              # Use draft version as is
              VERSION="${LATEST_RELEASE#v}"
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "Using draft release version: $VERSION"
            else
              # Increment patch version for non-draft releases
              IFS='.' read -r major minor patch <<< "${LATEST_RELEASE#v}"
              NEW_PATCH=$((patch + 1))
              VERSION="${major}.${minor}.${NEW_PATCH}"
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "Incremented patch version: ${LATEST_RELEASE} -> $VERSION"
            fi
          else
            # No releases found, check PR title for version
            PR_TITLE="${{ github.event.pull_request.title }}"
            VERSION=$(echo "$PR_TITLE" | grep -oP 'v?\K[0-9]+\.[0-9]+\.[0-9]+' || echo "")
            if [ -n "$VERSION" ]; then
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "Using version from PR title: $VERSION"
            else
              # Default to 0.1.0 if no version found
              VERSION="0.1.0"
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "No releases found, using default version: $VERSION"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Changelog CI for ${{ matrix.language }}/${{ matrix.package }}
        uses: saadmk11/changelog-ci@v1.2.0
        id: changelog
        with:
          changelog_filename: ${{ matrix.language }}/${{ matrix.package }}/CHANGELOG.md
          config_file: .github/changelog-ci-config.yml
          committer_username: 'github-actions[bot]'
          committer_email: 'github-actions[bot]@users.noreply.github.com'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_version: ${{ steps.draft-version.outputs.version }}

      - name: Display Changelog for ${{ matrix.language }}/${{ matrix.package }}
        if: steps.changelog.outputs.changelog != ''
        run: |
          echo "## 📝 Changelog for ${{ matrix.language }}/${{ matrix.package }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
