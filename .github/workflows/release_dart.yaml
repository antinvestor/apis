name: Release Dart Packages

on:
  push:
    tags:
      - "v*.*.*"
    paths:
      - 'dart/**'
      - 'proto/**'
  workflow_dispatch:
    inputs:
      force:
        description: 'Force release all packages'
        required: false
        type: boolean
        default: false

jobs:
  release:
    strategy:
      matrix:
        package: [common, chat, device, notification, ocr, partition, payment, profile, property, settings, ledger, lostid, files]
      fail-fast: false
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for changes
        id: check_changes
        run: |
          PACKAGE="${{ matrix.package }}"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force }}" = "true" ]; then
            echo "Force release enabled"
            echo "should_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if package files or proto files changed
          if git diff --name-only HEAD~1 HEAD | grep -E "(^dart/${PACKAGE}/|^proto/${PACKAGE}/)" > /dev/null; then
            echo "Changes detected in $PACKAGE"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in $PACKAGE"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
          
          # Special case: if common package changed, all packages should be released
          if [ "$PACKAGE" != "common" ]; then
            if git diff --name-only HEAD~1 HEAD | grep -E "^dart/common/" > /dev/null; then
              echo "Common package changed - releasing $PACKAGE"
              echo "should_release=true" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Setup Dart
        if: steps.check_changes.outputs.should_release == 'true'
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
      
      - name: Configure Git
        if: steps.check_changes.outputs.should_release == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Setup pub credentials
        if: steps.check_changes.outputs.should_release == 'true'
        run: |
          mkdir -p ~/.config/dart
          echo '${{ secrets.PUB_DEV_CREDENTIALS }}' > ~/.config/dart/pub-credentials.json
      
      - name: Release package
        if: steps.check_changes.outputs.should_release == 'true'
        run: |
          PACKAGE="${{ matrix.package }}"
          PACKAGE_DIR="dart/$PACKAGE"
          
          echo "================================================"
          echo "Processing package: $PACKAGE"
          echo "================================================"
          
          if [ ! -d "$PACKAGE_DIR" ]; then
            echo "  Package directory not found: $PACKAGE_DIR"
            exit 1
          fi
          
          cd "$PACKAGE_DIR"
          
          # Get package name
          PACKAGE_NAME=$(grep '^name:' pubspec.yaml | sed 's/name: //')
          echo "Package name: $PACKAGE_NAME"
          
          # Extract version from global tag (format: vX.Y.Z)
          TAG_NAME="${{ github.ref_name }}"
          if [[ "$TAG_NAME" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            NEW_VERSION="${BASH_REMATCH[1]}"
            echo "Release version from tag: $NEW_VERSION"
          else
            echo "❌ Could not parse version from tag: $TAG_NAME"
            echo "Expected format: vX.Y.Z (e.g., v1.47.0)"
            exit 1
          fi
          
          # Install dependencies
          echo "Installing dependencies..."
          dart pub get
          
          # Run analysis
          echo "Running dart analyze..."
          dart analyze
          
          # Dry run publish
          echo "Running dry-run publish..."
          dart pub publish --dry-run
          
          # Publish to pub.dev
          echo "Publishing to pub.dev..."
          dart pub publish --force
          
          echo "✅ Successfully published $PACKAGE v$NEW_VERSION"
          
          # Go back to repository root
          cd "$GITHUB_WORKSPACE"
          
          # Create and push package-specific tag after successful publish
          PACKAGE_TAG="dart/${PACKAGE}/v${NEW_VERSION}"
          if ! git rev-parse "$PACKAGE_TAG" >/dev/null 2>&1; then
            git tag -a "$PACKAGE_TAG" -m "Release $PACKAGE v$NEW_VERSION"
            git push origin "$PACKAGE_TAG"
            echo "✅ Created and pushed package-specific tag: $PACKAGE_TAG"
          else
            echo "ℹ️  Tag $PACKAGE_TAG already exists"
          fi
      
