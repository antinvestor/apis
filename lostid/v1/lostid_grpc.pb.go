// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: lostid/v1/lostid.proto

package lostidv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LostIdService_Collectible_FullMethodName     = "/lostid.v1.LostIdService/Collectible"
	LostIdService_ListCollectible_FullMethodName = "/lostid.v1.LostIdService/ListCollectible"
	LostIdService_Search_FullMethodName          = "/lostid.v1.LostIdService/Search"
	LostIdService_ListSearch_FullMethodName      = "/lostid.v1.LostIdService/ListSearch"
	LostIdService_Progress_FullMethodName        = "/lostid.v1.LostIdService/Progress"
	LostIdService_ListTransaction_FullMethodName = "/lostid.v1.LostIdService/ListTransaction"
)

// LostIdServiceClient is the client API for LostIdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LostIdServiceClient interface {
	// Log a new Collectible request
	Collectible(ctx context.Context, in *CollectibleRequest, opts ...grpc.CallOption) (*CollectibleResponse, error)
	ListCollectible(ctx context.Context, in *ListCollectibleRequest, opts ...grpc.CallOption) (LostIdService_ListCollectibleClient, error)
	// Log a new search request
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	ListSearch(ctx context.Context, in *ListSearchRequest, opts ...grpc.CallOption) (LostIdService_ListSearchClient, error)
	Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error)
	ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (LostIdService_ListTransactionClient, error)
}

type lostIdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLostIdServiceClient(cc grpc.ClientConnInterface) LostIdServiceClient {
	return &lostIdServiceClient{cc}
}

func (c *lostIdServiceClient) Collectible(ctx context.Context, in *CollectibleRequest, opts ...grpc.CallOption) (*CollectibleResponse, error) {
	out := new(CollectibleResponse)
	err := c.cc.Invoke(ctx, LostIdService_Collectible_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostIdServiceClient) ListCollectible(ctx context.Context, in *ListCollectibleRequest, opts ...grpc.CallOption) (LostIdService_ListCollectibleClient, error) {
	stream, err := c.cc.NewStream(ctx, &LostIdService_ServiceDesc.Streams[0], LostIdService_ListCollectible_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lostIdServiceListCollectibleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LostIdService_ListCollectibleClient interface {
	Recv() (*ListCollectibleResponse, error)
	grpc.ClientStream
}

type lostIdServiceListCollectibleClient struct {
	grpc.ClientStream
}

func (x *lostIdServiceListCollectibleClient) Recv() (*ListCollectibleResponse, error) {
	m := new(ListCollectibleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lostIdServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, LostIdService_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostIdServiceClient) ListSearch(ctx context.Context, in *ListSearchRequest, opts ...grpc.CallOption) (LostIdService_ListSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &LostIdService_ServiceDesc.Streams[1], LostIdService_ListSearch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lostIdServiceListSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LostIdService_ListSearchClient interface {
	Recv() (*ListSearchResponse, error)
	grpc.ClientStream
}

type lostIdServiceListSearchClient struct {
	grpc.ClientStream
}

func (x *lostIdServiceListSearchClient) Recv() (*ListSearchResponse, error) {
	m := new(ListSearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lostIdServiceClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	out := new(ProgressResponse)
	err := c.cc.Invoke(ctx, LostIdService_Progress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostIdServiceClient) ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (LostIdService_ListTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &LostIdService_ServiceDesc.Streams[2], LostIdService_ListTransaction_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lostIdServiceListTransactionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LostIdService_ListTransactionClient interface {
	Recv() (*ListTransactionResponse, error)
	grpc.ClientStream
}

type lostIdServiceListTransactionClient struct {
	grpc.ClientStream
}

func (x *lostIdServiceListTransactionClient) Recv() (*ListTransactionResponse, error) {
	m := new(ListTransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LostIdServiceServer is the server API for LostIdService service.
// All implementations must embed UnimplementedLostIdServiceServer
// for forward compatibility
type LostIdServiceServer interface {
	// Log a new Collectible request
	Collectible(context.Context, *CollectibleRequest) (*CollectibleResponse, error)
	ListCollectible(*ListCollectibleRequest, LostIdService_ListCollectibleServer) error
	// Log a new search request
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	ListSearch(*ListSearchRequest, LostIdService_ListSearchServer) error
	Progress(context.Context, *ProgressRequest) (*ProgressResponse, error)
	ListTransaction(*ListTransactionRequest, LostIdService_ListTransactionServer) error
	mustEmbedUnimplementedLostIdServiceServer()
}

// UnimplementedLostIdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLostIdServiceServer struct {
}

func (UnimplementedLostIdServiceServer) Collectible(context.Context, *CollectibleRequest) (*CollectibleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collectible not implemented")
}
func (UnimplementedLostIdServiceServer) ListCollectible(*ListCollectibleRequest, LostIdService_ListCollectibleServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCollectible not implemented")
}
func (UnimplementedLostIdServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedLostIdServiceServer) ListSearch(*ListSearchRequest, LostIdService_ListSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSearch not implemented")
}
func (UnimplementedLostIdServiceServer) Progress(context.Context, *ProgressRequest) (*ProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedLostIdServiceServer) ListTransaction(*ListTransactionRequest, LostIdService_ListTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTransaction not implemented")
}
func (UnimplementedLostIdServiceServer) mustEmbedUnimplementedLostIdServiceServer() {}

// UnsafeLostIdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LostIdServiceServer will
// result in compilation errors.
type UnsafeLostIdServiceServer interface {
	mustEmbedUnimplementedLostIdServiceServer()
}

func RegisterLostIdServiceServer(s grpc.ServiceRegistrar, srv LostIdServiceServer) {
	s.RegisterService(&LostIdService_ServiceDesc, srv)
}

func _LostIdService_Collectible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectibleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostIdServiceServer).Collectible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostIdService_Collectible_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostIdServiceServer).Collectible(ctx, req.(*CollectibleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostIdService_ListCollectible_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCollectibleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LostIdServiceServer).ListCollectible(m, &lostIdServiceListCollectibleServer{stream})
}

type LostIdService_ListCollectibleServer interface {
	Send(*ListCollectibleResponse) error
	grpc.ServerStream
}

type lostIdServiceListCollectibleServer struct {
	grpc.ServerStream
}

func (x *lostIdServiceListCollectibleServer) Send(m *ListCollectibleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LostIdService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostIdServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostIdService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostIdServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostIdService_ListSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LostIdServiceServer).ListSearch(m, &lostIdServiceListSearchServer{stream})
}

type LostIdService_ListSearchServer interface {
	Send(*ListSearchResponse) error
	grpc.ServerStream
}

type lostIdServiceListSearchServer struct {
	grpc.ServerStream
}

func (x *lostIdServiceListSearchServer) Send(m *ListSearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LostIdService_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostIdServiceServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostIdService_Progress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostIdServiceServer).Progress(ctx, req.(*ProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostIdService_ListTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LostIdServiceServer).ListTransaction(m, &lostIdServiceListTransactionServer{stream})
}

type LostIdService_ListTransactionServer interface {
	Send(*ListTransactionResponse) error
	grpc.ServerStream
}

type lostIdServiceListTransactionServer struct {
	grpc.ServerStream
}

func (x *lostIdServiceListTransactionServer) Send(m *ListTransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LostIdService_ServiceDesc is the grpc.ServiceDesc for LostIdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LostIdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lostid.v1.LostIdService",
	HandlerType: (*LostIdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collectible",
			Handler:    _LostIdService_Collectible_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _LostIdService_Search_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _LostIdService_Progress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCollectible",
			Handler:       _LostIdService_ListCollectible_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSearch",
			Handler:       _LostIdService_ListSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTransaction",
			Handler:       _LostIdService_ListTransaction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lostid/v1/lostid.proto",
}
