syntax = "proto3";

package apis;
option go_package =".;profilev1";

import "validate.proto";
import "common.proto";

enum ContactType {
  EMAIL = 0;
  PHONE = 1;
}

enum CommunicationLevel {
  ALL = 0; // Any communication including 3rd party marketing is welcome.
  INTERNAL_MARKETING = 1; // Can receive marketing messages from our services
  IMPORTANT_ALERTS = 2; // These can be things like policy changes
  SYSTEM_ALERTS = 3; // This include user actions expecting a response.
  NO_CONTACT = 4; // This one needs prayers
}

message ContactObject {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  ContactType type = 2;
  string detail = 3;
  bool verifed = 4;
  CommunicationLevel communication_level = 5;
  apis.STATE state = 6;
}

message AddressObject {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  string name = 2 [(validate.rules).string = {min_len: 3, max_len: 100}];
  string country = 3;
  string city = 4;
  string area = 5;
  string street = 6;
  string house = 7;
  string postcode = 8;
  double latitude = 9;
  double longitude = 10;
  string extra = 11 [(validate.rules).string = {min_len: 10, max_len: 500}];
}

enum ProfileType {
  PERSON = 0;
  INSTITUTION = 1;
  BOT = 2;
}

// The response message containing the full profile object
message ProfileObject {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  ProfileType type = 2;
  map<string, string> properties =3;
  repeated ContactObject contacts = 4;
  repeated AddressObject addresses = 5;
  apis.STATE state = 6;
}

// RelationshipType enum represents the way two profiles are linked.
enum RelationshipType{
  MEMBER = 0;
  AFFILIATED = 1;
  BLACK_LISTED = 2;
}

// A Relationship object
message RelationshipObject {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  RelationshipType type = 2;
  ProfileObject profile = 3;
  map<string, string> properties =4;
}

// The request message containing the profile's hash
message ProfileIDRequest {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
}

// The request message containing the profile's hash
message ProfileSearchRequest {
  string query = 1;
  repeated string properties = 2; // Properties to include in the search request.
  apis.STATE state = 3;
  int32 page = 4;
  int32 count = 5;

}

// The request message containing the profile's hash
message ProfileMergeRequest {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  string mergeID = 2 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
}

// The request message containing the information necessary to create a profile
message ProfileCreateRequest {
  ProfileType type = 1 [(validate.rules).enum.defined_only = true];
  string contact = 2 [(validate.rules).string = {min_len: 3, max_len: 255}];
  map<string, string> properties =3;
}


// The request message containing the information necessary to create a profile
message ProfileUpdateRequest {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  map<string, string> properties =2;
  apis.STATE state = 3;
}


// The request message containing the information necessary to create a profile
message ProfileAddContactRequest {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  string contact = 2;
}

// The request message containing the information necessary to create a profile
message ProfileAddAddressRequest {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  AddressObject address = 2;
}

// Request message containing a contact necessary to link to a profile
message ProfileContactRequest {
  string contact = 1;
}


// Request message to list all profiles related to the supplied profile id
message ProfileListRelationshipRequest {
  string ProfileID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  string LastRelationshipID = 2 [(validate.rules).string = {ignore_empty: true, min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  repeated string relatedProfileID = 3; // Related profile ids to specifically search for.
  int32 count = 4;
}

// The request message containing the information necessary to create a profile
message ProfileAddRelationshipRequest {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  string ProfileID = 2 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  string ChildProfileID = 3 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  RelationshipType type = 4;
  map<string, string> properties =5;
}

// The request message containing the information necessary to delete relationship to a profile
message ProfileDeleteRelationshipRequest {
  string ID = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
  string ProfileID = 2 [(validate.rules).string = {ignore_empty: true, min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
}

// The profile service definition.
service ProfileService {
  // Obtains a profile by its hash
  rpc GetByID (ProfileIDRequest) returns (ProfileObject) {}

  // Obtains a profile by its hash
  rpc GetByContact (ProfileContactRequest) returns (ProfileObject) {}

  // Obtains a profile by its hash
  rpc Search (ProfileSearchRequest) returns (stream ProfileObject) {}

  // Uses data found in the profile from mergeHash to update the current profile.
  rpc Merge (ProfileMergeRequest) returns (ProfileObject) {}

  // Creates a new profile based on the request.
  rpc Create (ProfileCreateRequest) returns (ProfileObject) {}

  // Creates a new profile based on the request.
  rpc Update (ProfileUpdateRequest) returns (ProfileObject) {}

  // Adds a new contact based on the request/this leads to automatic verification.
  rpc AddContact (ProfileAddContactRequest) returns (ProfileObject) {}

  // Adds a new address based on the request.
  rpc AddAddress (ProfileAddAddressRequest) returns (ProfileObject) {}

  // Adds a new relationship between different proiles.
  rpc AddRelationship (ProfileAddRelationshipRequest) returns (RelationshipObject) {}

  // Remove an existing relationship between profiles.
  rpc DeleteRelationship (ProfileDeleteRelationshipRequest) returns (RelationshipObject) {}

  // Lists relationships a profile has.
  rpc ListRelationships (ProfileListRelationshipRequest) returns ( stream RelationshipObject) {}

}

