// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: profile.proto

package profilev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContactObject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContactObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContactObjectMultiError, or
// nil if none found.
func (m *ContactObject) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ContactObjectValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ContactObject_ID_Pattern.MatchString(m.GetID()) {
		err := ContactObjectValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Detail

	// no validation rules for Verifed

	// no validation rules for CommunicationLevel

	// no validation rules for State

	if len(errors) > 0 {
		return ContactObjectMultiError(errors)
	}

	return nil
}

// ContactObjectMultiError is an error wrapping multiple validation errors
// returned by ContactObject.ValidateAll() if the designated constraints
// aren't met.
type ContactObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactObjectMultiError) AllErrors() []error { return m }

// ContactObjectValidationError is the validation error returned by
// ContactObject.Validate if the designated constraints aren't met.
type ContactObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactObjectValidationError) ErrorName() string { return "ContactObjectValidationError" }

// Error satisfies the builtin error interface
func (e ContactObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactObjectValidationError{}

var _ContactObject_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AddressObject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressObjectMultiError, or
// nil if none found.
func (m *AddressObject) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := AddressObjectValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddressObject_ID_Pattern.MatchString(m.GetID()) {
		err := AddressObjectValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := AddressObjectValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Country

	// no validation rules for City

	// no validation rules for Area

	// no validation rules for Street

	// no validation rules for House

	// no validation rules for Postcode

	// no validation rules for Latitude

	// no validation rules for Longitude

	if l := utf8.RuneCountInString(m.GetExtra()); l < 10 || l > 500 {
		err := AddressObjectValidationError{
			field:  "Extra",
			reason: "value length must be between 10 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddressObjectMultiError(errors)
	}

	return nil
}

// AddressObjectMultiError is an error wrapping multiple validation errors
// returned by AddressObject.ValidateAll() if the designated constraints
// aren't met.
type AddressObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressObjectMultiError) AllErrors() []error { return m }

// AddressObjectValidationError is the validation error returned by
// AddressObject.Validate if the designated constraints aren't met.
type AddressObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressObjectValidationError) ErrorName() string { return "AddressObjectValidationError" }

// Error satisfies the builtin error interface
func (e AddressObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressObjectValidationError{}

var _AddressObject_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileObject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileObjectMultiError, or
// nil if none found.
func (m *ProfileObject) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ProfileObjectValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileObject_ID_Pattern.MatchString(m.GetID()) {
		err := ProfileObjectValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Properties

	for idx, item := range m.GetContacts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileObjectValidationError{
						field:  fmt.Sprintf("Contacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileObjectValidationError{
						field:  fmt.Sprintf("Contacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileObjectValidationError{
					field:  fmt.Sprintf("Contacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileObjectValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileObjectValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileObjectValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	if len(errors) > 0 {
		return ProfileObjectMultiError(errors)
	}

	return nil
}

// ProfileObjectMultiError is an error wrapping multiple validation errors
// returned by ProfileObject.ValidateAll() if the designated constraints
// aren't met.
type ProfileObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileObjectMultiError) AllErrors() []error { return m }

// ProfileObjectValidationError is the validation error returned by
// ProfileObject.Validate if the designated constraints aren't met.
type ProfileObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileObjectValidationError) ErrorName() string { return "ProfileObjectValidationError" }

// Error satisfies the builtin error interface
func (e ProfileObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileObjectValidationError{}

var _ProfileObject_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on RelationshipObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationshipObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationshipObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationshipObjectMultiError, or nil if none found.
func (m *RelationshipObject) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationshipObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := RelationshipObjectValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RelationshipObject_ID_Pattern.MatchString(m.GetID()) {
		err := RelationshipObjectValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Properties

	switch v := m.Child.(type) {
	case *RelationshipObject_Profile:
		if v == nil {
			err := RelationshipObjectValidationError{
				field:  "Child",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProfile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationshipObjectValidationError{
						field:  "Profile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationshipObjectValidationError{
						field:  "Profile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationshipObjectValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RelationshipObject_Contact:
		if v == nil {
			err := RelationshipObjectValidationError{
				field:  "Child",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContact()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationshipObjectValidationError{
						field:  "Contact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationshipObjectValidationError{
						field:  "Contact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationshipObjectValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RelationshipObjectMultiError(errors)
	}

	return nil
}

// RelationshipObjectMultiError is an error wrapping multiple validation errors
// returned by RelationshipObject.ValidateAll() if the designated constraints
// aren't met.
type RelationshipObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipObjectMultiError) AllErrors() []error { return m }

// RelationshipObjectValidationError is the validation error returned by
// RelationshipObject.Validate if the designated constraints aren't met.
type RelationshipObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipObjectValidationError) ErrorName() string {
	return "RelationshipObjectValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipObjectValidationError{}

var _RelationshipObject_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProfileIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileIDRequestMultiError, or nil if none found.
func (m *ProfileIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ProfileIDRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileIDRequest_ID_Pattern.MatchString(m.GetID()) {
		err := ProfileIDRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProfileIDRequestMultiError(errors)
	}

	return nil
}

// ProfileIDRequestMultiError is an error wrapping multiple validation errors
// returned by ProfileIDRequest.ValidateAll() if the designated constraints
// aren't met.
type ProfileIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileIDRequestMultiError) AllErrors() []error { return m }

// ProfileIDRequestValidationError is the validation error returned by
// ProfileIDRequest.Validate if the designated constraints aren't met.
type ProfileIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileIDRequestValidationError) ErrorName() string { return "ProfileIDRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProfileIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileIDRequestValidationError{}

var _ProfileIDRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileSearchRequestMultiError, or nil if none found.
func (m *ProfileSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for State

	// no validation rules for Page

	// no validation rules for Count

	if len(errors) > 0 {
		return ProfileSearchRequestMultiError(errors)
	}

	return nil
}

// ProfileSearchRequestMultiError is an error wrapping multiple validation
// errors returned by ProfileSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileSearchRequestMultiError) AllErrors() []error { return m }

// ProfileSearchRequestValidationError is the validation error returned by
// ProfileSearchRequest.Validate if the designated constraints aren't met.
type ProfileSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileSearchRequestValidationError) ErrorName() string {
	return "ProfileSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileSearchRequestValidationError{}

// Validate checks the field values on ProfileMergeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileMergeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileMergeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileMergeRequestMultiError, or nil if none found.
func (m *ProfileMergeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileMergeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ProfileMergeRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileMergeRequest_ID_Pattern.MatchString(m.GetID()) {
		err := ProfileMergeRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMergeID()); l < 3 || l > 40 {
		err := ProfileMergeRequestValidationError{
			field:  "MergeID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileMergeRequest_MergeID_Pattern.MatchString(m.GetMergeID()) {
		err := ProfileMergeRequestValidationError{
			field:  "MergeID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProfileMergeRequestMultiError(errors)
	}

	return nil
}

// ProfileMergeRequestMultiError is an error wrapping multiple validation
// errors returned by ProfileMergeRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileMergeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMergeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMergeRequestMultiError) AllErrors() []error { return m }

// ProfileMergeRequestValidationError is the validation error returned by
// ProfileMergeRequest.Validate if the designated constraints aren't met.
type ProfileMergeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileMergeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileMergeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileMergeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileMergeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileMergeRequestValidationError) ErrorName() string {
	return "ProfileMergeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileMergeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileMergeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileMergeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileMergeRequestValidationError{}

var _ProfileMergeRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _ProfileMergeRequest_MergeID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileCreateRequestMultiError, or nil if none found.
func (m *ProfileCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ProfileType_name[int32(m.GetType())]; !ok {
		err := ProfileCreateRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContact()); l < 3 || l > 255 {
		err := ProfileCreateRequestValidationError{
			field:  "Contact",
			reason: "value length must be between 3 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Properties

	if len(errors) > 0 {
		return ProfileCreateRequestMultiError(errors)
	}

	return nil
}

// ProfileCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ProfileCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileCreateRequestMultiError) AllErrors() []error { return m }

// ProfileCreateRequestValidationError is the validation error returned by
// ProfileCreateRequest.Validate if the designated constraints aren't met.
type ProfileCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileCreateRequestValidationError) ErrorName() string {
	return "ProfileCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileCreateRequestValidationError{}

// Validate checks the field values on ProfileUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileUpdateRequestMultiError, or nil if none found.
func (m *ProfileUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ProfileUpdateRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileUpdateRequest_ID_Pattern.MatchString(m.GetID()) {
		err := ProfileUpdateRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Properties

	// no validation rules for State

	if len(errors) > 0 {
		return ProfileUpdateRequestMultiError(errors)
	}

	return nil
}

// ProfileUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ProfileUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileUpdateRequestMultiError) AllErrors() []error { return m }

// ProfileUpdateRequestValidationError is the validation error returned by
// ProfileUpdateRequest.Validate if the designated constraints aren't met.
type ProfileUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileUpdateRequestValidationError) ErrorName() string {
	return "ProfileUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileUpdateRequestValidationError{}

var _ProfileUpdateRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileAddContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileAddContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileAddContactRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileAddContactRequestMultiError, or nil if none found.
func (m *ProfileAddContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileAddContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ProfileAddContactRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileAddContactRequest_ID_Pattern.MatchString(m.GetID()) {
		err := ProfileAddContactRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Contact

	if len(errors) > 0 {
		return ProfileAddContactRequestMultiError(errors)
	}

	return nil
}

// ProfileAddContactRequestMultiError is an error wrapping multiple validation
// errors returned by ProfileAddContactRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileAddContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileAddContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileAddContactRequestMultiError) AllErrors() []error { return m }

// ProfileAddContactRequestValidationError is the validation error returned by
// ProfileAddContactRequest.Validate if the designated constraints aren't met.
type ProfileAddContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAddContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAddContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAddContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAddContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAddContactRequestValidationError) ErrorName() string {
	return "ProfileAddContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileAddContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAddContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAddContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAddContactRequestValidationError{}

var _ProfileAddContactRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileAddAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileAddAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileAddAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileAddAddressRequestMultiError, or nil if none found.
func (m *ProfileAddAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileAddAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ProfileAddAddressRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileAddAddressRequest_ID_Pattern.MatchString(m.GetID()) {
		err := ProfileAddAddressRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileAddAddressRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileAddAddressRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileAddAddressRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileAddAddressRequestMultiError(errors)
	}

	return nil
}

// ProfileAddAddressRequestMultiError is an error wrapping multiple validation
// errors returned by ProfileAddAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileAddAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileAddAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileAddAddressRequestMultiError) AllErrors() []error { return m }

// ProfileAddAddressRequestValidationError is the validation error returned by
// ProfileAddAddressRequest.Validate if the designated constraints aren't met.
type ProfileAddAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAddAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAddAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAddAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAddAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAddAddressRequestValidationError) ErrorName() string {
	return "ProfileAddAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileAddAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAddAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAddAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAddAddressRequestValidationError{}

var _ProfileAddAddressRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileContactRequestMultiError, or nil if none found.
func (m *ProfileContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Contact

	if len(errors) > 0 {
		return ProfileContactRequestMultiError(errors)
	}

	return nil
}

// ProfileContactRequestMultiError is an error wrapping multiple validation
// errors returned by ProfileContactRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileContactRequestMultiError) AllErrors() []error { return m }

// ProfileContactRequestValidationError is the validation error returned by
// ProfileContactRequest.Validate if the designated constraints aren't met.
type ProfileContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileContactRequestValidationError) ErrorName() string {
	return "ProfileContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileContactRequestValidationError{}

// Validate checks the field values on ProfileListRelationshipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileListRelationshipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileListRelationshipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProfileListRelationshipRequestMultiError, or nil if none found.
func (m *ProfileListRelationshipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileListRelationshipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ProfileListRelationshipRequest_Parent_InLookup[m.GetParent()]; !ok {
		err := ProfileListRelationshipRequestValidationError{
			field:  "Parent",
			reason: "value must be in list [Contact Profile]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetParent()); l < 3 || l > 40 {
		err := ProfileListRelationshipRequestValidationError{
			field:  "Parent",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetParentID()); l < 3 || l > 40 {
		err := ProfileListRelationshipRequestValidationError{
			field:  "ParentID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileListRelationshipRequest_ParentID_Pattern.MatchString(m.GetParentID()) {
		err := ProfileListRelationshipRequestValidationError{
			field:  "ParentID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLastRelationshipID() != "" {

		if l := utf8.RuneCountInString(m.GetLastRelationshipID()); l < 3 || l > 40 {
			err := ProfileListRelationshipRequestValidationError{
				field:  "LastRelationshipID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ProfileListRelationshipRequest_LastRelationshipID_Pattern.MatchString(m.GetLastRelationshipID()) {
			err := ProfileListRelationshipRequestValidationError{
				field:  "LastRelationshipID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ProfileListRelationshipRequestMultiError(errors)
	}

	return nil
}

// ProfileListRelationshipRequestMultiError is an error wrapping multiple
// validation errors returned by ProfileListRelationshipRequest.ValidateAll()
// if the designated constraints aren't met.
type ProfileListRelationshipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileListRelationshipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileListRelationshipRequestMultiError) AllErrors() []error { return m }

// ProfileListRelationshipRequestValidationError is the validation error
// returned by ProfileListRelationshipRequest.Validate if the designated
// constraints aren't met.
type ProfileListRelationshipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileListRelationshipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileListRelationshipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileListRelationshipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileListRelationshipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileListRelationshipRequestValidationError) ErrorName() string {
	return "ProfileListRelationshipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileListRelationshipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileListRelationshipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileListRelationshipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileListRelationshipRequestValidationError{}

var _ProfileListRelationshipRequest_Parent_InLookup = map[string]struct{}{
	"Contact": {},
	"Profile": {},
}

var _ProfileListRelationshipRequest_ParentID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _ProfileListRelationshipRequest_LastRelationshipID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileAddRelationshipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileAddRelationshipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileAddRelationshipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProfileAddRelationshipRequestMultiError, or nil if none found.
func (m *ProfileAddRelationshipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileAddRelationshipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileAddRelationshipRequest_ID_Pattern.MatchString(m.GetID()) {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ProfileAddRelationshipRequest_Parent_InLookup[m.GetParent()]; !ok {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "Parent",
			reason: "value must be in list [Contact Profile]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetParent()); l < 3 || l > 40 {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "Parent",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetParentID()); l < 3 || l > 40 {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "ParentID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileAddRelationshipRequest_ParentID_Pattern.MatchString(m.GetParentID()) {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "ParentID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ProfileAddRelationshipRequest_Child_InLookup[m.GetChild()]; !ok {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "Child",
			reason: "value must be in list [Contact Profile]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetChild()); l < 3 || l > 40 {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "Child",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetChildID()); l < 3 || l > 40 {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "ChildID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileAddRelationshipRequest_ChildID_Pattern.MatchString(m.GetChildID()) {
		err := ProfileAddRelationshipRequestValidationError{
			field:  "ChildID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Properties

	if len(errors) > 0 {
		return ProfileAddRelationshipRequestMultiError(errors)
	}

	return nil
}

// ProfileAddRelationshipRequestMultiError is an error wrapping multiple
// validation errors returned by ProfileAddRelationshipRequest.ValidateAll()
// if the designated constraints aren't met.
type ProfileAddRelationshipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileAddRelationshipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileAddRelationshipRequestMultiError) AllErrors() []error { return m }

// ProfileAddRelationshipRequestValidationError is the validation error
// returned by ProfileAddRelationshipRequest.Validate if the designated
// constraints aren't met.
type ProfileAddRelationshipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAddRelationshipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAddRelationshipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAddRelationshipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAddRelationshipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAddRelationshipRequestValidationError) ErrorName() string {
	return "ProfileAddRelationshipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileAddRelationshipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAddRelationshipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAddRelationshipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAddRelationshipRequestValidationError{}

var _ProfileAddRelationshipRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _ProfileAddRelationshipRequest_Parent_InLookup = map[string]struct{}{
	"Contact": {},
	"Profile": {},
}

var _ProfileAddRelationshipRequest_ParentID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _ProfileAddRelationshipRequest_Child_InLookup = map[string]struct{}{
	"Contact": {},
	"Profile": {},
}

var _ProfileAddRelationshipRequest_ChildID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileDeleteRelationshipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProfileDeleteRelationshipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileDeleteRelationshipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProfileDeleteRelationshipRequestMultiError, or nil if none found.
func (m *ProfileDeleteRelationshipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileDeleteRelationshipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := ProfileDeleteRelationshipRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProfileDeleteRelationshipRequest_ID_Pattern.MatchString(m.GetID()) {
		err := ProfileDeleteRelationshipRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentID() != "" {

		if l := utf8.RuneCountInString(m.GetParentID()); l < 3 || l > 40 {
			err := ProfileDeleteRelationshipRequestValidationError{
				field:  "ParentID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ProfileDeleteRelationshipRequest_ParentID_Pattern.MatchString(m.GetParentID()) {
			err := ProfileDeleteRelationshipRequestValidationError{
				field:  "ParentID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ProfileDeleteRelationshipRequestMultiError(errors)
	}

	return nil
}

// ProfileDeleteRelationshipRequestMultiError is an error wrapping multiple
// validation errors returned by
// ProfileDeleteRelationshipRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileDeleteRelationshipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileDeleteRelationshipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileDeleteRelationshipRequestMultiError) AllErrors() []error { return m }

// ProfileDeleteRelationshipRequestValidationError is the validation error
// returned by ProfileDeleteRelationshipRequest.Validate if the designated
// constraints aren't met.
type ProfileDeleteRelationshipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileDeleteRelationshipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileDeleteRelationshipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileDeleteRelationshipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileDeleteRelationshipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileDeleteRelationshipRequestValidationError) ErrorName() string {
	return "ProfileDeleteRelationshipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileDeleteRelationshipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileDeleteRelationshipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileDeleteRelationshipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileDeleteRelationshipRequestValidationError{}

var _ProfileDeleteRelationshipRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _ProfileDeleteRelationshipRequest_ParentID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")
