// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file partition/v1/partition.proto (package partition.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateAccessRequest, CreateAccessResponse, CreateAccessRoleRequest, CreateAccessRoleResponse, CreatePageRequest, CreatePageResponse, CreatePartitionRequest, CreatePartitionResponse, CreatePartitionRoleRequest, CreatePartitionRoleResponse, CreateTenantRequest, CreateTenantResponse, GetAccessRequest, GetAccessResponse, GetPageRequest, GetPageResponse, GetPartitionRequest, GetPartitionResponse, GetTenantRequest, GetTenantResponse, ListAccessRoleRequest, ListAccessRoleResponse, ListPartitionRequest, ListPartitionResponse, ListPartitionRoleRequest, ListPartitionRoleResponse, ListTenantRequest, ListTenantResponse, RemoveAccessRequest, RemoveAccessResponse, RemoveAccessRoleRequest, RemoveAccessRoleResponse, RemovePageRequest, RemovePageResponse, RemovePartitionRoleRequest, RemovePartitionRoleResponse, UpdatePartitionRequest, UpdatePartitionResponse } from "./partition_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service partition.v1.PartitionService
 */
export const PartitionService = {
  typeName: "partition.v1.PartitionService",
  methods: {
    /**
     * Get a tenant in the system matching the id
     *
     * @generated from rpc partition.v1.PartitionService.GetTenant
     */
    getTenant: {
      name: "GetTenant",
      I: GetTenantRequest,
      O: GetTenantResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List all tenants in the system matching the query in some way
     *
     * @generated from rpc partition.v1.PartitionService.ListTenant
     */
    listTenant: {
      name: "ListTenant",
      I: ListTenantRequest,
      O: ListTenantResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Log a new tenant request
     *
     * @generated from rpc partition.v1.PartitionService.CreateTenant
     */
    createTenant: {
      name: "CreateTenant",
      I: CreateTenantRequest,
      O: CreateTenantResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List all partitions in the system matching the query in some way
     *
     * @generated from rpc partition.v1.PartitionService.ListPartition
     */
    listPartition: {
      name: "ListPartition",
      I: ListPartitionRequest,
      O: ListPartitionResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Log a new partition request
     *
     * @generated from rpc partition.v1.PartitionService.CreatePartition
     */
    createPartition: {
      name: "CreatePartition",
      I: CreatePartitionRequest,
      O: CreatePartitionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get an existing partition object
     *
     * @generated from rpc partition.v1.PartitionService.GetPartition
     */
    getPartition: {
      name: "GetPartition",
      I: GetPartitionRequest,
      O: GetPartitionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update an existing partition object
     *
     * @generated from rpc partition.v1.PartitionService.UpdatePartition
     */
    updatePartition: {
      name: "UpdatePartition",
      I: UpdatePartitionRequest,
      O: UpdatePartitionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a partition Role for a particular partition
     *
     * @generated from rpc partition.v1.PartitionService.CreatePartitionRole
     */
    createPartitionRole: {
      name: "CreatePartitionRole",
      I: CreatePartitionRoleRequest,
      O: CreatePartitionRoleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List partition roles available for this particular partition
     *
     * @generated from rpc partition.v1.PartitionService.ListPartitionRole
     */
    listPartitionRole: {
      name: "ListPartitionRole",
      I: ListPartitionRoleRequest,
      O: ListPartitionRoleResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Remove a partition role that is not required
     *
     * @generated from rpc partition.v1.PartitionService.RemovePartitionRole
     */
    removePartitionRole: {
      name: "RemovePartitionRole",
      I: RemovePartitionRoleRequest,
      O: RemovePartitionRoleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new page for access or customization of how a partition looks like
     *
     * @generated from rpc partition.v1.PartitionService.CreatePage
     */
    createPage: {
      name: "CreatePage",
      I: CreatePageRequest,
      O: CreatePageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Obtains a new page specific to a partition
     *
     * @generated from rpc partition.v1.PartitionService.GetPage
     */
    getPage: {
      name: "GetPage",
      I: GetPageRequest,
      O: GetPageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes a page from being accessible for a partition
     *
     * @generated from rpc partition.v1.PartitionService.RemovePage
     */
    removePage: {
      name: "RemovePage",
      I: RemovePageRequest,
      O: RemovePageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a users ability to access a partition
     *
     * @generated from rpc partition.v1.PartitionService.CreateAccess
     */
    createAccess: {
      name: "CreateAccess",
      I: CreateAccessRequest,
      O: CreateAccessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Obtains a users access to a partition by access id or partition and profile id
     *
     * @generated from rpc partition.v1.PartitionService.GetAccess
     */
    getAccess: {
      name: "GetAccess",
      I: GetAccessRequest,
      O: GetAccessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes a user's ability to access a partition
     *
     * @generated from rpc partition.v1.PartitionService.RemoveAccess
     */
    removeAccess: {
      name: "RemoveAccess",
      I: RemoveAccessRequest,
      O: RemoveAccessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create an access Role for a particular access
     *
     * @generated from rpc partition.v1.PartitionService.CreateAccessRole
     */
    createAccessRole: {
      name: "CreateAccessRole",
      I: CreateAccessRoleRequest,
      O: CreateAccessRoleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List access roles available for this particular access
     *
     * @generated from rpc partition.v1.PartitionService.ListAccessRole
     */
    listAccessRole: {
      name: "ListAccessRole",
      I: ListAccessRoleRequest,
      O: ListAccessRoleResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Remove an access role that is not required
     *
     * @generated from rpc partition.v1.PartitionService.RemoveAccessRole
     */
    removeAccessRole: {
      name: "RemoveAccessRole",
      I: RemoveAccessRoleRequest,
      O: RemoveAccessRoleResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

