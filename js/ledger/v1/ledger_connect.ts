// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file ledger/v1/ledger.proto (package ledger.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Account, Ledger, SearchRequest, Transaction, TransactionEntry } from "./ledger_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * The ledger service definition.
 *
 * @generated from service ledger.v1.LedgerService
 */
export const LedgerService = {
  typeName: "ledger.v1.LedgerService",
  methods: {
    /**
     * Searches for an ledger based on details
     *
     * @generated from rpc ledger.v1.LedgerService.SearchLedgers
     */
    searchLedgers: {
      name: "SearchLedgers",
      I: SearchRequest,
      O: Ledger,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Creates a new ledger based on supplied data
     *
     * @generated from rpc ledger.v1.LedgerService.CreateLedger
     */
    createLedger: {
      name: "CreateLedger",
      I: Ledger,
      O: Ledger,
      kind: MethodKind.Unary,
    },
    /**
     * Updates the data component of the ledger.
     *
     * @generated from rpc ledger.v1.LedgerService.UpdateLedger
     */
    updateLedger: {
      name: "UpdateLedger",
      I: Ledger,
      O: Ledger,
      kind: MethodKind.Unary,
    },
    /**
     * Searches for an account based on details
     *
     * @generated from rpc ledger.v1.LedgerService.SearchAccounts
     */
    searchAccounts: {
      name: "SearchAccounts",
      I: SearchRequest,
      O: Account,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Creates a new account based on supplied data
     *
     * @generated from rpc ledger.v1.LedgerService.CreateAccount
     */
    createAccount: {
      name: "CreateAccount",
      I: Account,
      O: Account,
      kind: MethodKind.Unary,
    },
    /**
     * Updates the data component of the account.
     *
     * @generated from rpc ledger.v1.LedgerService.UpdateAccount
     */
    updateAccount: {
      name: "UpdateAccount",
      I: Account,
      O: Account,
      kind: MethodKind.Unary,
    },
    /**
     * Searches for a transaction based on details
     *
     * @generated from rpc ledger.v1.LedgerService.SearchTransactions
     */
    searchTransactions: {
      name: "SearchTransactions",
      I: SearchRequest,
      O: Transaction,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Creates a new transaction
     *
     * @generated from rpc ledger.v1.LedgerService.CreateTransaction
     */
    createTransaction: {
      name: "CreateTransaction",
      I: Transaction,
      O: Transaction,
      kind: MethodKind.Unary,
    },
    /**
     * Reverses a transaction by creating a new one with inverted entries
     *
     * @generated from rpc ledger.v1.LedgerService.ReverseTransaction
     */
    reverseTransaction: {
      name: "ReverseTransaction",
      I: Transaction,
      O: Transaction,
      kind: MethodKind.Unary,
    },
    /**
     * Updates a transaction's details
     *
     * @generated from rpc ledger.v1.LedgerService.UpdateTransaction
     */
    updateTransaction: {
      name: "UpdateTransaction",
      I: Transaction,
      O: Transaction,
      kind: MethodKind.Unary,
    },
    /**
     * Searches for entries matching the search details
     *
     * @generated from rpc ledger.v1.LedgerService.SearchTransactionEntries
     */
    searchTransactionEntries: {
      name: "SearchTransactionEntries",
      I: SearchRequest,
      O: TransactionEntry,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

