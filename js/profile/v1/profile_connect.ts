// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file profile/v1/profile.proto (package profile.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddAddressRequest, AddAddressResponse, AddContactRequest, AddContactResponse, AddRelationshipRequest, AddRelationshipResponse, CreateRequest, CreateResponse, DeleteRelationshipRequest, DeleteRelationshipResponse, GetByContactRequest, GetByContactResponse, GetByIdRequest, GetByIdResponse, ListRelationshipRequest, ListRelationshipResponse, MergeRequest, MergeResponse, SearchRequest, SearchResponse, UpdateRequest, UpdateResponse } from "./profile_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * The profile service definition.
 *
 * @generated from service profile.v1.ProfileService
 */
export const ProfileService = {
  typeName: "profile.v1.ProfileService",
  methods: {
    /**
     * Obtains a profile by its hash
     *
     * @generated from rpc profile.v1.ProfileService.GetById
     */
    getById: {
      name: "GetById",
      I: GetByIdRequest,
      O: GetByIdResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Obtains a profile by its hash
     *
     * @generated from rpc profile.v1.ProfileService.GetByContact
     */
    getByContact: {
      name: "GetByContact",
      I: GetByContactRequest,
      O: GetByContactResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Obtains a profile by its hash
     *
     * @generated from rpc profile.v1.ProfileService.Search
     */
    search: {
      name: "Search",
      I: SearchRequest,
      O: SearchResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Uses data found in the profile from mergeHash to update the current profile.
     *
     * @generated from rpc profile.v1.ProfileService.Merge
     */
    merge: {
      name: "Merge",
      I: MergeRequest,
      O: MergeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new profile based on the request.
     *
     * @generated from rpc profile.v1.ProfileService.Create
     */
    create: {
      name: "Create",
      I: CreateRequest,
      O: CreateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new profile based on the request.
     *
     * @generated from rpc profile.v1.ProfileService.Update
     */
    update: {
      name: "Update",
      I: UpdateRequest,
      O: UpdateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a new contact based on the request/this leads to automatic verification.
     *
     * @generated from rpc profile.v1.ProfileService.AddContact
     */
    addContact: {
      name: "AddContact",
      I: AddContactRequest,
      O: AddContactResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a new address based on the request.
     *
     * @generated from rpc profile.v1.ProfileService.AddAddress
     */
    addAddress: {
      name: "AddAddress",
      I: AddAddressRequest,
      O: AddAddressResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a new relationship between different proiles.
     *
     * @generated from rpc profile.v1.ProfileService.AddRelationship
     */
    addRelationship: {
      name: "AddRelationship",
      I: AddRelationshipRequest,
      O: AddRelationshipResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Remove an existing relationship between profiles.
     *
     * @generated from rpc profile.v1.ProfileService.DeleteRelationship
     */
    deleteRelationship: {
      name: "DeleteRelationship",
      I: DeleteRelationshipRequest,
      O: DeleteRelationshipResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lists relationships a profile has.
     *
     * @generated from rpc profile.v1.ProfileService.ListRelationship
     */
    listRelationship: {
      name: "ListRelationship",
      I: ListRelationshipRequest,
      O: ListRelationshipResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

