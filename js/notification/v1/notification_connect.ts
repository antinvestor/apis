// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file notification/v1/notification.proto (package notification.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ReceiveRequest, ReceiveResponse, ReleaseRequest, ReleaseResponse, SearchResponse, SendRequest, SendResponse, TemplateSaveRequest, TemplateSaveResponse, TemplateSearchRequest, TemplateSearchResponse } from "./notification_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { SearchRequest, StatusRequest, StatusResponse, StatusUpdateRequest, StatusUpdateResponse } from "../../common/v1/common_pb.js";

/**
 * @generated from service notification.v1.NotificationService
 */
export const NotificationService = {
  typeName: "notification.v1.NotificationService",
  methods: {
    /**
     * Send method for queueing massages as requested
     *
     * @generated from rpc notification.v1.NotificationService.Send
     */
    send: {
      name: "Send",
      I: SendRequest,
      O: SendResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Status request to determine if notification is prepared or released
     *
     * @generated from rpc notification.v1.NotificationService.Status
     */
    status: {
      name: "Status",
      I: StatusRequest,
      O: StatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Status update request to allow continuation of notification processing
     *
     * @generated from rpc notification.v1.NotificationService.StatusUpdate
     */
    statusUpdate: {
      name: "StatusUpdate",
      I: StatusUpdateRequest,
      O: StatusUpdateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Release method for releasing queued massages and returns if notification status if released
     *
     * @generated from rpc notification.v1.NotificationService.Release
     */
    release: {
      name: "Release",
      I: ReleaseRequest,
      O: ReleaseResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Receive method is for client request for particular notification responses from system
     *
     * @generated from rpc notification.v1.NotificationService.Receive
     */
    receive: {
      name: "Receive",
      I: ReceiveRequest,
      O: ReceiveResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search method is for client request for particular notification details from system
     *
     * @generated from rpc notification.v1.NotificationService.Search
     */
    search: {
      name: "Search",
      I: SearchRequest,
      O: SearchResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Utility to allow system obtain templates within the system
     *
     * @generated from rpc notification.v1.NotificationService.TemplateSearch
     */
    templateSearch: {
      name: "TemplateSearch",
      I: TemplateSearchRequest,
      O: TemplateSearchResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc notification.v1.NotificationService.TemplateSave
     */
    templateSave: {
      name: "TemplateSave",
      I: TemplateSaveRequest,
      O: TemplateSaveResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

