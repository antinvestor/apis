// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file ocr/v1/ocr.proto (package ocr.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import type { STATUS } from "../../common/v1/common_pb";
import { file_common_v1_common } from "../../common/v1/common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ocr/v1/ocr.proto.
 */
export const file_ocr_v1_ocr: GenFile = /*@__PURE__*/
  fileDesc("ChBvY3IvdjEvb2NyLnByb3RvEgZvY3IudjEixQEKB09DUkZpbGUSDwoHZmlsZV9pZBgBIAEoCRIQCghsYW5ndWFnZRgCIAEoCRIhCgZzdGF0dXMYAyABKA4yES5jb21tb24udjEuU1RBVFVTEgwKBHRleHQYBCABKAkSMwoKcHJvcGVydGllcxgFIAMoCzIfLm9jci52MS5PQ1JGaWxlLlByb3BlcnRpZXNFbnRyeRoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKoAgoQUmVjb2duaXplUmVxdWVzdBIxCgxyZWZlcmVuY2VfaWQYASABKAlCG7pIGHIWEAMYKDIQWzAtOWEtel8tXXszLDIwfRIqCgtsYW5ndWFnZV9pZBgCIAEoCUIVukgSchAQAhgDMgpbYS16XXsyLDN9EjwKCnByb3BlcnRpZXMYAyADKAsyKC5vY3IudjEuUmVjb2duaXplUmVxdWVzdC5Qcm9wZXJ0aWVzRW50cnkSDQoFYXN5bmMYBCABKAgSNQoHZmlsZV9pZBgFIAMoCUIkukghkgEeCAEQBSIYchYQAxgoMhBbMC05YS16Xy1dezMsMjB9GjEKD1Byb3BlcnRpZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIkoKEVJlY29nbml6ZVJlc3BvbnNlEhQKDHJlZmVyZW5jZV9pZBgBIAEoCRIfCgZyZXN1bHQYAiADKAsyDy5vY3IudjEuT0NSRmlsZSKaAQoNU3RhdHVzUmVxdWVzdBInCgJpZBgBIAEoCUIbukgYchYQAxgoMhBbMC05YS16Xy1dezMsMjB9EjEKBmV4dHJhcxgCIAMoCzIhLm9jci52MS5TdGF0dXNSZXF1ZXN0LkV4dHJhc0VudHJ5Gi0KC0V4dHJhc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiOQoOU3RhdHVzUmVzcG9uc2USJwoEZGF0YRgBIAEoCzIZLm9jci52MS5SZWNvZ25pemVSZXNwb25zZTKHAQoKT0NSU2VydmljZRJACglSZWNvZ25pemUSGC5vY3IudjEuUmVjb2duaXplUmVxdWVzdBoZLm9jci52MS5SZWNvZ25pemVSZXNwb25zZRI3CgZTdGF0dXMSFS5vY3IudjEuU3RhdHVzUmVxdWVzdBoWLm9jci52MS5TdGF0dXNSZXNwb25zZUKRAQobY29tLmFudGludmVzdG9yLmFwaXMub2NyLnYxQghPY3JQcm90b1ABWi9naXRodWIuY29tL2FudGludmVzdG9yL2FwaXMvZ28vb2NyL29jci92MTtvY3J2MaICA09YWKoCBk9jci5WMcoCBk9jclxWMeICEk9jclxWMVxHUEJNZXRhZGF0YeoCB09jcjo6VjFiBnByb3RvMw", [file_buf_validate_validate, file_common_v1_common]);

/**
 * @generated from message ocr.v1.OCRFile
 */
export type OCRFile = Message<"ocr.v1.OCRFile"> & {
  /**
   * @generated from field: string file_id = 1;
   */
  fileId: string;

  /**
   * @generated from field: string language = 2;
   */
  language: string;

  /**
   * @generated from field: common.v1.STATUS status = 3;
   */
  status: STATUS;

  /**
   * @generated from field: string text = 4;
   */
  text: string;

  /**
   * @generated from field: map<string, string> properties = 5;
   */
  properties: { [key: string]: string };
};

/**
 * Describes the message ocr.v1.OCRFile.
 * Use `create(OCRFileSchema)` to create a new message.
 */
export const OCRFileSchema: GenMessage<OCRFile> = /*@__PURE__*/
  messageDesc(file_ocr_v1_ocr, 0);

/**
 * Request to determine text found in a file
 *
 * @generated from message ocr.v1.RecognizeRequest
 */
export type RecognizeRequest = Message<"ocr.v1.RecognizeRequest"> & {
  /**
   * @generated from field: string reference_id = 1;
   */
  referenceId: string;

  /**
   * @generated from field: string language_id = 2;
   */
  languageId: string;

  /**
   * @generated from field: map<string, string> properties = 3;
   */
  properties: { [key: string]: string };

  /**
   * @generated from field: bool async = 4;
   */
  async: boolean;

  /**
   * @generated from field: repeated string file_id = 5;
   */
  fileId: string[];
};

/**
 * Describes the message ocr.v1.RecognizeRequest.
 * Use `create(RecognizeRequestSchema)` to create a new message.
 */
export const RecognizeRequestSchema: GenMessage<RecognizeRequest> = /*@__PURE__*/
  messageDesc(file_ocr_v1_ocr, 1);

/**
 * @generated from message ocr.v1.RecognizeResponse
 */
export type RecognizeResponse = Message<"ocr.v1.RecognizeResponse"> & {
  /**
   * @generated from field: string reference_id = 1;
   */
  referenceId: string;

  /**
   * @generated from field: repeated ocr.v1.OCRFile result = 2;
   */
  result: OCRFile[];
};

/**
 * Describes the message ocr.v1.RecognizeResponse.
 * Use `create(RecognizeResponseSchema)` to create a new message.
 */
export const RecognizeResponseSchema: GenMessage<RecognizeResponse> = /*@__PURE__*/
  messageDesc(file_ocr_v1_ocr, 2);

/**
 * @generated from message ocr.v1.StatusRequest
 */
export type StatusRequest = Message<"ocr.v1.StatusRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: map<string, string> extras = 2;
   */
  extras: { [key: string]: string };
};

/**
 * Describes the message ocr.v1.StatusRequest.
 * Use `create(StatusRequestSchema)` to create a new message.
 */
export const StatusRequestSchema: GenMessage<StatusRequest> = /*@__PURE__*/
  messageDesc(file_ocr_v1_ocr, 3);

/**
 * @generated from message ocr.v1.StatusResponse
 */
export type StatusResponse = Message<"ocr.v1.StatusResponse"> & {
  /**
   * @generated from field: ocr.v1.RecognizeResponse data = 1;
   */
  data?: RecognizeResponse;
};

/**
 * Describes the message ocr.v1.StatusResponse.
 * Use `create(StatusResponseSchema)` to create a new message.
 */
export const StatusResponseSchema: GenMessage<StatusResponse> = /*@__PURE__*/
  messageDesc(file_ocr_v1_ocr, 4);

/**
 * @generated from service ocr.v1.OCRService
 */
export const OCRService: GenService<{
  /**
   * Perform a new ocr process request
   *
   * @generated from rpc ocr.v1.OCRService.Recognize
   */
  recognize: {
    methodKind: "unary";
    input: typeof RecognizeRequestSchema;
    output: typeof RecognizeResponseSchema;
  },
  /**
   * Check the status of request if queued
   *
   * @generated from rpc ocr.v1.OCRService.Status
   */
  status: {
    methodKind: "unary";
    input: typeof StatusRequestSchema;
    output: typeof StatusResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_ocr_v1_ocr, 0);

