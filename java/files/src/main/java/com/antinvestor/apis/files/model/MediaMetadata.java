/*
 * Ant Investor Files
 * An openAPI 3.0 specification that defines how files are stored and accessed on ant investor products
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@antinvestor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.antinvestor.apis.files.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.antinvestor.apis.files.invoker.ApiClient;
/**
 * MediaMetadata
 */
@JsonPropertyOrder({
  MediaMetadata.JSON_PROPERTY_MEDIA_ID,
  MediaMetadata.JSON_PROPERTY_CONTENT_TYPE,
  MediaMetadata.JSON_PROPERTY_FILE_SIZE_BYTES,
  MediaMetadata.JSON_PROPERTY_CREATION_TIMESTAMP,
  MediaMetadata.JSON_PROPERTY_UPLOAD_NAME,
  MediaMetadata.JSON_PROPERTY_BASE64_HASH,
  MediaMetadata.JSON_PROPERTY_OWNER_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class MediaMetadata {
  public static final String JSON_PROPERTY_MEDIA_ID = "media_id";
  @javax.annotation.Nullable
  private String mediaId;

  public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
  @javax.annotation.Nullable
  private String contentType;

  public static final String JSON_PROPERTY_FILE_SIZE_BYTES = "file_size_bytes";
  @javax.annotation.Nullable
  private Integer fileSizeBytes;

  public static final String JSON_PROPERTY_CREATION_TIMESTAMP = "creation_timestamp";
  @javax.annotation.Nullable
  private Integer creationTimestamp;

  public static final String JSON_PROPERTY_UPLOAD_NAME = "upload_name";
  @javax.annotation.Nullable
  private String uploadName;

  public static final String JSON_PROPERTY_BASE64_HASH = "base64_hash";
  @javax.annotation.Nullable
  private String base64Hash;

  public static final String JSON_PROPERTY_OWNER_ID = "owner_id";
  @javax.annotation.Nullable
  private String ownerId;

  public MediaMetadata() { 
  }

  public MediaMetadata mediaId(@javax.annotation.Nullable String mediaId) {
    this.mediaId = mediaId;
    return this;
  }

  /**
   * The media ID of the file
   * @return mediaId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEDIA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMediaId() {
    return mediaId;
  }


  @JsonProperty(JSON_PROPERTY_MEDIA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMediaId(@javax.annotation.Nullable String mediaId) {
    this.mediaId = mediaId;
  }


  public MediaMetadata contentType(@javax.annotation.Nullable String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The content type of the file
   * @return contentType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentType(@javax.annotation.Nullable String contentType) {
    this.contentType = contentType;
  }


  public MediaMetadata fileSizeBytes(@javax.annotation.Nullable Integer fileSizeBytes) {
    this.fileSizeBytes = fileSizeBytes;
    return this;
  }

  /**
   * The size of the file in bytes
   * @return fileSizeBytes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_SIZE_BYTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getFileSizeBytes() {
    return fileSizeBytes;
  }


  @JsonProperty(JSON_PROPERTY_FILE_SIZE_BYTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileSizeBytes(@javax.annotation.Nullable Integer fileSizeBytes) {
    this.fileSizeBytes = fileSizeBytes;
  }


  public MediaMetadata creationTimestamp(@javax.annotation.Nullable Integer creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
    return this;
  }

  /**
   * The timestamp when the file was uploaded
   * @return creationTimestamp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATION_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCreationTimestamp() {
    return creationTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationTimestamp(@javax.annotation.Nullable Integer creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
  }


  public MediaMetadata uploadName(@javax.annotation.Nullable String uploadName) {
    this.uploadName = uploadName;
    return this;
  }

  /**
   * The name of the file when it was uploaded
   * @return uploadName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUploadName() {
    return uploadName;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadName(@javax.annotation.Nullable String uploadName) {
    this.uploadName = uploadName;
  }


  public MediaMetadata base64Hash(@javax.annotation.Nullable String base64Hash) {
    this.base64Hash = base64Hash;
    return this;
  }

  /**
   * The base64 encoded hash of the file
   * @return base64Hash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASE64_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getBase64Hash() {
    return base64Hash;
  }


  @JsonProperty(JSON_PROPERTY_BASE64_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBase64Hash(@javax.annotation.Nullable String base64Hash) {
    this.base64Hash = base64Hash;
  }


  public MediaMetadata ownerId(@javax.annotation.Nullable String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * The ID of the user who uploaded the file
   * @return ownerId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOwnerId() {
    return ownerId;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnerId(@javax.annotation.Nullable String ownerId) {
    this.ownerId = ownerId;
  }


  /**
   * Return true if this MediaMetadata object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaMetadata mediaMetadata = (MediaMetadata) o;
    return Objects.equals(this.mediaId, mediaMetadata.mediaId) &&
        Objects.equals(this.contentType, mediaMetadata.contentType) &&
        Objects.equals(this.fileSizeBytes, mediaMetadata.fileSizeBytes) &&
        Objects.equals(this.creationTimestamp, mediaMetadata.creationTimestamp) &&
        Objects.equals(this.uploadName, mediaMetadata.uploadName) &&
        Objects.equals(this.base64Hash, mediaMetadata.base64Hash) &&
        Objects.equals(this.ownerId, mediaMetadata.ownerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaId, contentType, fileSizeBytes, creationTimestamp, uploadName, base64Hash, ownerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaMetadata {\n");
    sb.append("    mediaId: ").append(toIndentedString(mediaId)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    fileSizeBytes: ").append(toIndentedString(fileSizeBytes)).append("\n");
    sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
    sb.append("    uploadName: ").append(toIndentedString(uploadName)).append("\n");
    sb.append("    base64Hash: ").append(toIndentedString(base64Hash)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `media_id` to the URL query string
    if (getMediaId() != null) {
      joiner.add(String.format("%smedia_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMediaId()))));
    }

    // add `content_type` to the URL query string
    if (getContentType() != null) {
      joiner.add(String.format("%scontent_type%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContentType()))));
    }

    // add `file_size_bytes` to the URL query string
    if (getFileSizeBytes() != null) {
      joiner.add(String.format("%sfile_size_bytes%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFileSizeBytes()))));
    }

    // add `creation_timestamp` to the URL query string
    if (getCreationTimestamp() != null) {
      joiner.add(String.format("%screation_timestamp%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCreationTimestamp()))));
    }

    // add `upload_name` to the URL query string
    if (getUploadName() != null) {
      joiner.add(String.format("%supload_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUploadName()))));
    }

    // add `base64_hash` to the URL query string
    if (getBase64Hash() != null) {
      joiner.add(String.format("%sbase64_hash%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBase64Hash()))));
    }

    // add `owner_id` to the URL query string
    if (getOwnerId() != null) {
      joiner.add(String.format("%sowner_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOwnerId()))));
    }

    return joiner.toString();
  }
}

