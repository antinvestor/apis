// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Ant Investor Files
 * An openAPI 3.0 specification that defines how files are stored and accessed on ant investor products
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@antinvestor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.antinvestor.apis.files.api;

import com.antinvestor.apis.files.invoker.ApiException;
import com.antinvestor.apis.files.model.Error;
import java.io.File;
import com.antinvestor.apis.files.model.ModelFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Stores a new file. Duplicates are going to be ignored if the hash of the file and meta data both match an existing file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFileTest() throws ApiException {
        String groupId = null;
        String subGroupId = null;
        String ownerId = null;
        Boolean _public = null;
        String description = null;
        String name = null;
        File fileObject = null;
        ModelFile response = 
        api.addFile(groupId, subGroupId, ownerId, _public, description, name, fileObject);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * deletes a single file based on the ID supplied
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException {
        String id = null;
        
        api.deleteFile(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a file based on supplied ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findFileByIdTest() throws ApiException {
        String id = null;
        File response = 
        api.findFileById(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all files from the system that the user has access to 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findFilesTest() throws ApiException {
        String ownerId = null;
        String groupId = null;
        String subGroupId = null;
        Integer limit = null;
        Integer page = null;
        List<ModelFile> response = 
        api.findFiles(ownerId, groupId, subGroupId, limit, page);
        
        // TODO: test validations
    }
    
}
