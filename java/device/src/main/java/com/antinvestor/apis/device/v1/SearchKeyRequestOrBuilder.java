// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: device/v1/device.proto
// Protobuf Java Version: 4.33.0

package com.antinvestor.apis.device.v1;

@com.google.protobuf.Generated
public interface SearchKeyRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:device.v1.SearchKeyRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Search query (key ID pattern, etc.)
   * </pre>
   *
   * <code>string query = 1 [json_name = "query"];</code>
   * @return The query.
   */
  java.lang.String getQuery();
  /**
   * <pre>
   * Search query (key ID pattern, etc.)
   * </pre>
   *
   * <code>string query = 1 [json_name = "query"];</code>
   * @return The bytes for query.
   */
  com.google.protobuf.ByteString
      getQueryBytes();

  /**
   * <pre>
   * Device ID to search keys for
   * </pre>
   *
   * <code>string device_id = 2 [json_name = "deviceId", (.buf.validate.field) = { ... }</code>
   * @return The deviceId.
   */
  java.lang.String getDeviceId();
  /**
   * <pre>
   * Device ID to search keys for
   * </pre>
   *
   * <code>string device_id = 2 [json_name = "deviceId", (.buf.validate.field) = { ... }</code>
   * @return The bytes for deviceId.
   */
  com.google.protobuf.ByteString
      getDeviceIdBytes();

  /**
   * <pre>
   * Filter by key types (if empty, returns all)
   * </pre>
   *
   * <code>repeated .device.v1.KeyType key_types = 3 [json_name = "keyTypes"];</code>
   * @return A list containing the keyTypes.
   */
  java.util.List<com.antinvestor.apis.device.v1.KeyType> getKeyTypesList();
  /**
   * <pre>
   * Filter by key types (if empty, returns all)
   * </pre>
   *
   * <code>repeated .device.v1.KeyType key_types = 3 [json_name = "keyTypes"];</code>
   * @return The count of keyTypes.
   */
  int getKeyTypesCount();
  /**
   * <pre>
   * Filter by key types (if empty, returns all)
   * </pre>
   *
   * <code>repeated .device.v1.KeyType key_types = 3 [json_name = "keyTypes"];</code>
   * @param index The index of the element to return.
   * @return The keyTypes at the given index.
   */
  com.antinvestor.apis.device.v1.KeyType getKeyTypes(int index);
  /**
   * <pre>
   * Filter by key types (if empty, returns all)
   * </pre>
   *
   * <code>repeated .device.v1.KeyType key_types = 3 [json_name = "keyTypes"];</code>
   * @return A list containing the enum numeric values on the wire for keyTypes.
   */
  java.util.List<java.lang.Integer>
  getKeyTypesValueList();
  /**
   * <pre>
   * Filter by key types (if empty, returns all)
   * </pre>
   *
   * <code>repeated .device.v1.KeyType key_types = 3 [json_name = "keyTypes"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of keyTypes at the given index.
   */
  int getKeyTypesValue(int index);

  /**
   * <pre>
   * If true, includes expired keys
   * </pre>
   *
   * <code>bool include_expired = 4 [json_name = "includeExpired"];</code>
   * @return The includeExpired.
   */
  boolean getIncludeExpired();

  /**
   * <pre>
   * Page number for pagination
   * </pre>
   *
   * <code>int32 page = 5 [json_name = "page"];</code>
   * @return The page.
   */
  int getPage();

  /**
   * <pre>
   * Number of results per page
   * </pre>
   *
   * <code>int32 count = 6 [json_name = "count"];</code>
   * @return The count.
   */
  int getCount();
}
