// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chat/v1/chat.proto
// Protobuf Java Version: 4.33.0

package com.antinvestor.apis.chat.v1;

@com.google.protobuf.Generated
public interface ConnectRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chat.v1.ConnectRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Servers should validate auth token before accepting further payload.
   * </pre>
   *
   * <code>string session_id = 2 [json_name = "sessionId"];</code>
   * @return The sessionId.
   */
  java.lang.String getSessionId();
  /**
   * <pre>
   * Servers should validate auth token before accepting further payload.
   * </pre>
   *
   * <code>string session_id = 2 [json_name = "sessionId"];</code>
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString
      getSessionIdBytes();

  /**
   * <code>string device_id = 3 [json_name = "deviceId"];</code>
   * @return The deviceId.
   */
  java.lang.String getDeviceId();
  /**
   * <code>string device_id = 3 [json_name = "deviceId"];</code>
   * @return The bytes for deviceId.
   */
  com.google.protobuf.ByteString
      getDeviceIdBytes();

  /**
   * <pre>
   * JWT or short-lived token; also accepted via metadata at the transport layer
   * </pre>
   *
   * <code>string auth_token = 4 [json_name = "authToken"];</code>
   * @return The authToken.
   */
  java.lang.String getAuthToken();
  /**
   * <pre>
   * JWT or short-lived token; also accepted via metadata at the transport layer
   * </pre>
   *
   * <code>string auth_token = 4 [json_name = "authToken"];</code>
   * @return The bytes for authToken.
   */
  com.google.protobuf.ByteString
      getAuthTokenBytes();

  /**
   * <pre>
   * Optional resume token: server-supplied resume_token from previous session.
   * Server will validate and accept resume only if resume window allows it.
   * </pre>
   *
   * <code>string resume_token = 5 [json_name = "resumeToken"];</code>
   * @return The resumeToken.
   */
  java.lang.String getResumeToken();
  /**
   * <pre>
   * Optional resume token: server-supplied resume_token from previous session.
   * Server will validate and accept resume only if resume window allows it.
   * </pre>
   *
   * <code>string resume_token = 5 [json_name = "resumeToken"];</code>
   * @return The bytes for resumeToken.
   */
  com.google.protobuf.ByteString
      getResumeTokenBytes();

  /**
   * <code>.chat.v1.StreamAck ack = 10 [json_name = "ack"];</code>
   * @return Whether the ack field is set.
   */
  boolean hasAck();
  /**
   * <code>.chat.v1.StreamAck ack = 10 [json_name = "ack"];</code>
   * @return The ack.
   */
  com.antinvestor.apis.chat.v1.StreamAck getAck();
  /**
   * <code>.chat.v1.StreamAck ack = 10 [json_name = "ack"];</code>
   */
  com.antinvestor.apis.chat.v1.StreamAckOrBuilder getAckOrBuilder();

  /**
   * <code>.chat.v1.ClientCommand command = 12 [json_name = "command"];</code>
   * @return Whether the command field is set.
   */
  boolean hasCommand();
  /**
   * <code>.chat.v1.ClientCommand command = 12 [json_name = "command"];</code>
   * @return The command.
   */
  com.antinvestor.apis.chat.v1.ClientCommand getCommand();
  /**
   * <code>.chat.v1.ClientCommand command = 12 [json_name = "command"];</code>
   */
  com.antinvestor.apis.chat.v1.ClientCommandOrBuilder getCommandOrBuilder();

  com.antinvestor.apis.chat.v1.ConnectRequest.PayloadCase getPayloadCase();
}
