// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chat/v1/chat.proto
// Protobuf Java Version: 4.33.0

package com.antinvestor.apis.chat.v1;

@com.google.protobuf.Generated
public interface ClientCommandOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chat.v1.ClientCommand)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.chat.v1.TypingUpdate typing = 1 [json_name = "typing"];</code>
   * @return Whether the typing field is set.
   */
  boolean hasTyping();
  /**
   * <code>.chat.v1.TypingUpdate typing = 1 [json_name = "typing"];</code>
   * @return The typing.
   */
  com.antinvestor.apis.chat.v1.TypingUpdate getTyping();
  /**
   * <code>.chat.v1.TypingUpdate typing = 1 [json_name = "typing"];</code>
   */
  com.antinvestor.apis.chat.v1.TypingUpdateOrBuilder getTypingOrBuilder();

  /**
   * <pre>
   * marker for "read up to X"
   * </pre>
   *
   * <code>.chat.v1.ReadMarker read_marker = 2 [json_name = "readMarker"];</code>
   * @return Whether the readMarker field is set.
   */
  boolean hasReadMarker();
  /**
   * <pre>
   * marker for "read up to X"
   * </pre>
   *
   * <code>.chat.v1.ReadMarker read_marker = 2 [json_name = "readMarker"];</code>
   * @return The readMarker.
   */
  com.antinvestor.apis.chat.v1.ReadMarker getReadMarker();
  /**
   * <pre>
   * marker for "read up to X"
   * </pre>
   *
   * <code>.chat.v1.ReadMarker read_marker = 2 [json_name = "readMarker"];</code>
   */
  com.antinvestor.apis.chat.v1.ReadMarkerOrBuilder getReadMarkerOrBuilder();

  /**
   * <pre>
   * send a room event (message) via the stream
   * </pre>
   *
   * <code>.chat.v1.RoomEvent room_event = 3 [json_name = "roomEvent"];</code>
   * @return Whether the roomEvent field is set.
   */
  boolean hasRoomEvent();
  /**
   * <pre>
   * send a room event (message) via the stream
   * </pre>
   *
   * <code>.chat.v1.RoomEvent room_event = 3 [json_name = "roomEvent"];</code>
   * @return The roomEvent.
   */
  com.antinvestor.apis.chat.v1.RoomEvent getRoomEvent();
  /**
   * <pre>
   * send a room event (message) via the stream
   * </pre>
   *
   * <code>.chat.v1.RoomEvent room_event = 3 [json_name = "roomEvent"];</code>
   */
  com.antinvestor.apis.chat.v1.RoomEventOrBuilder getRoomEventOrBuilder();

  com.antinvestor.apis.chat.v1.ClientCommand.CmdCase getCmdCase();
}
