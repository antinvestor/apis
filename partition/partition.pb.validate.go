// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: partition.proto

package partitionv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/antinvestor/apis/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.STATE(0)
)

// Validate checks the field values on RemoveResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoveResponseMultiError,
// or nil if none found.
func (m *RemoveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Succeeded

	if len(errors) > 0 {
		return RemoveResponseMultiError(errors)
	}

	return nil
}

// RemoveResponseMultiError is an error wrapping multiple validation errors
// returned by RemoveResponse.ValidateAll() if the designated constraints
// aren't met.
type RemoveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveResponseMultiError) AllErrors() []error { return m }

// RemoveResponseValidationError is the validation error returned by
// RemoveResponse.Validate if the designated constraints aren't met.
type RemoveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveResponseValidationError) ErrorName() string { return "RemoveResponseValidationError" }

// Error satisfies the builtin error interface
func (e RemoveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveResponseValidationError{}

// Validate checks the field values on TenantRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantRequestMultiError, or
// nil if none found.
func (m *TenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := TenantRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 10 || l > 500 {
		err := TenantRequestValidationError{
			field:  "Description",
			reason: "value length must be between 10 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Properties

	if len(errors) > 0 {
		return TenantRequestMultiError(errors)
	}

	return nil
}

// TenantRequestMultiError is an error wrapping multiple validation errors
// returned by TenantRequest.ValidateAll() if the designated constraints
// aren't met.
type TenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantRequestMultiError) AllErrors() []error { return m }

// TenantRequestValidationError is the validation error returned by
// TenantRequest.Validate if the designated constraints aren't met.
type TenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantRequestValidationError) ErrorName() string { return "TenantRequestValidationError" }

// Error satisfies the builtin error interface
func (e TenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantRequestValidationError{}

// Validate checks the field values on TenantObject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantObjectMultiError, or
// nil if none found.
func (m *TenantObject) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTenantId()); l < 3 || l > 40 {
		err := TenantObjectValidationError{
			field:  "TenantId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_TenantObject_TenantId_Pattern.MatchString(m.GetTenantId()) {
		err := TenantObjectValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 10 || l > 500 {
		err := TenantObjectValidationError{
			field:  "Description",
			reason: "value length must be between 10 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Properties

	if len(errors) > 0 {
		return TenantObjectMultiError(errors)
	}

	return nil
}

// TenantObjectMultiError is an error wrapping multiple validation errors
// returned by TenantObject.ValidateAll() if the designated constraints aren't met.
type TenantObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantObjectMultiError) AllErrors() []error { return m }

// TenantObjectValidationError is the validation error returned by
// TenantObject.Validate if the designated constraints aren't met.
type TenantObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantObjectValidationError) ErrorName() string { return "TenantObjectValidationError" }

// Error satisfies the builtin error interface
func (e TenantObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantObjectValidationError{}

var _TenantObject_TenantId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PartitionCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartitionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionCreateRequestMultiError, or nil if none found.
func (m *PartitionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := PartitionCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTenantId()); l < 3 || l > 40 {
		err := PartitionCreateRequestValidationError{
			field:  "TenantId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionCreateRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		err := PartitionCreateRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetParentId()); l < 3 || l > 40 {
		err := PartitionCreateRequestValidationError{
			field:  "ParentId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionCreateRequest_ParentId_Pattern.MatchString(m.GetParentId()) {
		err := PartitionCreateRequestValidationError{
			field:  "ParentId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 10 || l > 250 {
		err := PartitionCreateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 10 and 250 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Properties

	if len(errors) > 0 {
		return PartitionCreateRequestMultiError(errors)
	}

	return nil
}

// PartitionCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PartitionCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type PartitionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionCreateRequestMultiError) AllErrors() []error { return m }

// PartitionCreateRequestValidationError is the validation error returned by
// PartitionCreateRequest.Validate if the designated constraints aren't met.
type PartitionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionCreateRequestValidationError) ErrorName() string {
	return "PartitionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PartitionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionCreateRequestValidationError{}

var _PartitionCreateRequest_TenantId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _PartitionCreateRequest_ParentId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 3 || l > 40 {
		err := GetRequestValidationError{
			field:  "Id",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetRequest_Id_Pattern.MatchString(m.GetId()) {
		err := GetRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

var _GetRequest_Id_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PartitionUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartitionUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionUpdateRequestMultiError, or nil if none found.
func (m *PartitionUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
		err := PartitionUpdateRequestValidationError{
			field:  "PartitionId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionUpdateRequest_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
		err := PartitionUpdateRequestValidationError{
			field:  "PartitionId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := PartitionUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 10 || l > 500 {
		err := PartitionUpdateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 10 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for Properties

	if len(errors) > 0 {
		return PartitionUpdateRequestMultiError(errors)
	}

	return nil
}

// PartitionUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by PartitionUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type PartitionUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionUpdateRequestMultiError) AllErrors() []error { return m }

// PartitionUpdateRequestValidationError is the validation error returned by
// PartitionUpdateRequest.Validate if the designated constraints aren't met.
type PartitionUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionUpdateRequestValidationError) ErrorName() string {
	return "PartitionUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PartitionUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionUpdateRequestValidationError{}

var _PartitionUpdateRequest_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PartitionObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PartitionObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionObjectMultiError, or nil if none found.
func (m *PartitionObject) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
		err := PartitionObjectValidationError{
			field:  "PartitionId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionObject_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
		err := PartitionObjectValidationError{
			field:  "PartitionId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := PartitionObjectValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTenantId()); l < 3 || l > 40 {
		err := PartitionObjectValidationError{
			field:  "TenantId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionObject_TenantId_Pattern.MatchString(m.GetTenantId()) {
		err := PartitionObjectValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetParentId()); l < 3 || l > 40 {
		err := PartitionObjectValidationError{
			field:  "ParentId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionObject_ParentId_Pattern.MatchString(m.GetParentId()) {
		err := PartitionObjectValidationError{
			field:  "ParentId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 10 || l > 500 {
		err := PartitionObjectValidationError{
			field:  "Description",
			reason: "value length must be between 10 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for Properties

	if len(errors) > 0 {
		return PartitionObjectMultiError(errors)
	}

	return nil
}

// PartitionObjectMultiError is an error wrapping multiple validation errors
// returned by PartitionObject.ValidateAll() if the designated constraints
// aren't met.
type PartitionObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionObjectMultiError) AllErrors() []error { return m }

// PartitionObjectValidationError is the validation error returned by
// PartitionObject.Validate if the designated constraints aren't met.
type PartitionObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionObjectValidationError) ErrorName() string { return "PartitionObjectValidationError" }

// Error satisfies the builtin error interface
func (e PartitionObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionObjectValidationError{}

var _PartitionObject_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _PartitionObject_TenantId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _PartitionObject_ParentId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PartitionRoleCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartitionRoleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionRoleCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionRoleCreateRequestMultiError, or nil if none found.
func (m *PartitionRoleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionRoleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
		err := PartitionRoleCreateRequestValidationError{
			field:  "PartitionId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionRoleCreateRequest_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
		err := PartitionRoleCreateRequestValidationError{
			field:  "PartitionId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := PartitionRoleCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Properties

	if len(errors) > 0 {
		return PartitionRoleCreateRequestMultiError(errors)
	}

	return nil
}

// PartitionRoleCreateRequestMultiError is an error wrapping multiple
// validation errors returned by PartitionRoleCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type PartitionRoleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionRoleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionRoleCreateRequestMultiError) AllErrors() []error { return m }

// PartitionRoleCreateRequestValidationError is the validation error returned
// by PartitionRoleCreateRequest.Validate if the designated constraints aren't met.
type PartitionRoleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionRoleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionRoleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionRoleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionRoleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionRoleCreateRequestValidationError) ErrorName() string {
	return "PartitionRoleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PartitionRoleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionRoleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionRoleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionRoleCreateRequestValidationError{}

var _PartitionRoleCreateRequest_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PartitionRoleObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartitionRoleObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionRoleObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionRoleObjectMultiError, or nil if none found.
func (m *PartitionRoleObject) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionRoleObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartitionRoleId()); l < 3 || l > 40 {
		err := PartitionRoleObjectValidationError{
			field:  "PartitionRoleId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionRoleObject_PartitionRoleId_Pattern.MatchString(m.GetPartitionRoleId()) {
		err := PartitionRoleObjectValidationError{
			field:  "PartitionRoleId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
		err := PartitionRoleObjectValidationError{
			field:  "PartitionId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionRoleObject_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
		err := PartitionRoleObjectValidationError{
			field:  "PartitionId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := PartitionRoleObjectValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Properties

	if len(errors) > 0 {
		return PartitionRoleObjectMultiError(errors)
	}

	return nil
}

// PartitionRoleObjectMultiError is an error wrapping multiple validation
// errors returned by PartitionRoleObject.ValidateAll() if the designated
// constraints aren't met.
type PartitionRoleObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionRoleObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionRoleObjectMultiError) AllErrors() []error { return m }

// PartitionRoleObjectValidationError is the validation error returned by
// PartitionRoleObject.Validate if the designated constraints aren't met.
type PartitionRoleObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionRoleObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionRoleObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionRoleObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionRoleObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionRoleObjectValidationError) ErrorName() string {
	return "PartitionRoleObjectValidationError"
}

// Error satisfies the builtin error interface
func (e PartitionRoleObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionRoleObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionRoleObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionRoleObjectValidationError{}

var _PartitionRoleObject_PartitionRoleId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _PartitionRoleObject_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PartitionRoleRemoveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartitionRoleRemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionRoleRemoveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionRoleRemoveRequestMultiError, or nil if none found.
func (m *PartitionRoleRemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionRoleRemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartitionRoleId()); l < 3 || l > 40 {
		err := PartitionRoleRemoveRequestValidationError{
			field:  "PartitionRoleId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionRoleRemoveRequest_PartitionRoleId_Pattern.MatchString(m.GetPartitionRoleId()) {
		err := PartitionRoleRemoveRequestValidationError{
			field:  "PartitionRoleId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PartitionRoleRemoveRequestMultiError(errors)
	}

	return nil
}

// PartitionRoleRemoveRequestMultiError is an error wrapping multiple
// validation errors returned by PartitionRoleRemoveRequest.ValidateAll() if
// the designated constraints aren't met.
type PartitionRoleRemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionRoleRemoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionRoleRemoveRequestMultiError) AllErrors() []error { return m }

// PartitionRoleRemoveRequestValidationError is the validation error returned
// by PartitionRoleRemoveRequest.Validate if the designated constraints aren't met.
type PartitionRoleRemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionRoleRemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionRoleRemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionRoleRemoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionRoleRemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionRoleRemoveRequestValidationError) ErrorName() string {
	return "PartitionRoleRemoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PartitionRoleRemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionRoleRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionRoleRemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionRoleRemoveRequestValidationError{}

var _PartitionRoleRemoveRequest_PartitionRoleId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PartitionRoleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartitionRoleListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionRoleListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionRoleListRequestMultiError, or nil if none found.
func (m *PartitionRoleListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionRoleListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
		err := PartitionRoleListRequestValidationError{
			field:  "PartitionId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PartitionRoleListRequest_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
		err := PartitionRoleListRequestValidationError{
			field:  "PartitionId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PartitionRoleListRequestMultiError(errors)
	}

	return nil
}

// PartitionRoleListRequestMultiError is an error wrapping multiple validation
// errors returned by PartitionRoleListRequest.ValidateAll() if the designated
// constraints aren't met.
type PartitionRoleListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionRoleListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionRoleListRequestMultiError) AllErrors() []error { return m }

// PartitionRoleListRequestValidationError is the validation error returned by
// PartitionRoleListRequest.Validate if the designated constraints aren't met.
type PartitionRoleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionRoleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionRoleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionRoleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionRoleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionRoleListRequestValidationError) ErrorName() string {
	return "PartitionRoleListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PartitionRoleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionRoleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionRoleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionRoleListRequestValidationError{}

var _PartitionRoleListRequest_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PartitionRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartitionRoleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionRoleListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionRoleListResponseMultiError, or nil if none found.
func (m *PartitionRoleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionRoleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRole() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PartitionRoleListResponseValidationError{
						field:  fmt.Sprintf("Role[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PartitionRoleListResponseValidationError{
						field:  fmt.Sprintf("Role[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PartitionRoleListResponseValidationError{
					field:  fmt.Sprintf("Role[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PartitionRoleListResponseMultiError(errors)
	}

	return nil
}

// PartitionRoleListResponseMultiError is an error wrapping multiple validation
// errors returned by PartitionRoleListResponse.ValidateAll() if the
// designated constraints aren't met.
type PartitionRoleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionRoleListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionRoleListResponseMultiError) AllErrors() []error { return m }

// PartitionRoleListResponseValidationError is the validation error returned by
// PartitionRoleListResponse.Validate if the designated constraints aren't met.
type PartitionRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionRoleListResponseValidationError) ErrorName() string {
	return "PartitionRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PartitionRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionRoleListResponseValidationError{}

// Validate checks the field values on PageObject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageObject with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageObjectMultiError, or
// nil if none found.
func (m *PageObject) ValidateAll() error {
	return m.validate(true)
}

func (m *PageObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPageId()); l < 3 || l > 40 {
		err := PageObjectValidationError{
			field:  "PageId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PageObject_PageId_Pattern.MatchString(m.GetPageId()) {
		err := PageObjectValidationError{
			field:  "PageId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := PageObjectValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetHtml()); l < 4 || l > 5000 {
		err := PageObjectValidationError{
			field:  "Html",
			reason: "value length must be between 4 and 5000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return PageObjectMultiError(errors)
	}

	return nil
}

// PageObjectMultiError is an error wrapping multiple validation errors
// returned by PageObject.ValidateAll() if the designated constraints aren't met.
type PageObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageObjectMultiError) AllErrors() []error { return m }

// PageObjectValidationError is the validation error returned by
// PageObject.Validate if the designated constraints aren't met.
type PageObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageObjectValidationError) ErrorName() string { return "PageObjectValidationError" }

// Error satisfies the builtin error interface
func (e PageObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageObjectValidationError{}

var _PageObject_PageId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PageCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageCreateRequestMultiError, or nil if none found.
func (m *PageCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
		err := PageCreateRequestValidationError{
			field:  "PartitionId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PageCreateRequest_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
		err := PageCreateRequestValidationError{
			field:  "PartitionId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := PageCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetHtml()); l < 4 || l > 5000 {
		err := PageCreateRequestValidationError{
			field:  "Html",
			reason: "value length must be between 4 and 5000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PageCreateRequestMultiError(errors)
	}

	return nil
}

// PageCreateRequestMultiError is an error wrapping multiple validation errors
// returned by PageCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type PageCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageCreateRequestMultiError) AllErrors() []error { return m }

// PageCreateRequestValidationError is the validation error returned by
// PageCreateRequest.Validate if the designated constraints aren't met.
type PageCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageCreateRequestValidationError) ErrorName() string {
	return "PageCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageCreateRequestValidationError{}

var _PageCreateRequest_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PageGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageGetRequestMultiError,
// or nil if none found.
func (m *PageGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageId() != "" {

		if l := utf8.RuneCountInString(m.GetPageId()); l < 3 || l > 40 {
			err := PageGetRequestValidationError{
				field:  "PageId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_PageGetRequest_PageId_Pattern.MatchString(m.GetPageId()) {
			err := PageGetRequestValidationError{
				field:  "PageId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPartitionId() != "" {

		if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
			err := PageGetRequestValidationError{
				field:  "PartitionId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_PageGetRequest_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
			err := PageGetRequestValidationError{
				field:  "PartitionId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetName() != "" {

		if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
			err := PageGetRequestValidationError{
				field:  "Name",
				reason: "value length must be between 3 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PageGetRequestMultiError(errors)
	}

	return nil
}

// PageGetRequestMultiError is an error wrapping multiple validation errors
// returned by PageGetRequest.ValidateAll() if the designated constraints
// aren't met.
type PageGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageGetRequestMultiError) AllErrors() []error { return m }

// PageGetRequestValidationError is the validation error returned by
// PageGetRequest.Validate if the designated constraints aren't met.
type PageGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageGetRequestValidationError) ErrorName() string { return "PageGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageGetRequestValidationError{}

var _PageGetRequest_PageId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _PageGetRequest_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PageRemoveRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageRemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageRemoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageRemoveRequestMultiError, or nil if none found.
func (m *PageRemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageRemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPageId()); l < 3 || l > 40 {
		err := PageRemoveRequestValidationError{
			field:  "PageId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PageRemoveRequest_PageId_Pattern.MatchString(m.GetPageId()) {
		err := PageRemoveRequestValidationError{
			field:  "PageId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PageRemoveRequestMultiError(errors)
	}

	return nil
}

// PageRemoveRequestMultiError is an error wrapping multiple validation errors
// returned by PageRemoveRequest.ValidateAll() if the designated constraints
// aren't met.
type PageRemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageRemoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageRemoveRequestMultiError) AllErrors() []error { return m }

// PageRemoveRequestValidationError is the validation error returned by
// PageRemoveRequest.Validate if the designated constraints aren't met.
type PageRemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageRemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageRemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageRemoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageRemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageRemoveRequestValidationError) ErrorName() string {
	return "PageRemoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageRemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageRemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageRemoveRequestValidationError{}

var _PageRemoveRequest_PageId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessObject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccessObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccessObjectMultiError, or
// nil if none found.
func (m *AccessObject) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := AccessObjectValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessObject_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := AccessObjectValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProfileId()); l < 3 || l > 40 {
		err := AccessObjectValidationError{
			field:  "ProfileId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessObject_ProfileId_Pattern.MatchString(m.GetProfileId()) {
		err := AccessObjectValidationError{
			field:  "ProfileId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPartition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessObjectValidationError{
					field:  "Partition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessObjectValidationError{
					field:  "Partition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessObjectValidationError{
				field:  "Partition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	if len(errors) > 0 {
		return AccessObjectMultiError(errors)
	}

	return nil
}

// AccessObjectMultiError is an error wrapping multiple validation errors
// returned by AccessObject.ValidateAll() if the designated constraints aren't met.
type AccessObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessObjectMultiError) AllErrors() []error { return m }

// AccessObjectValidationError is the validation error returned by
// AccessObject.Validate if the designated constraints aren't met.
type AccessObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessObjectValidationError) ErrorName() string { return "AccessObjectValidationError" }

// Error satisfies the builtin error interface
func (e AccessObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessObjectValidationError{}

var _AccessObject_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _AccessObject_ProfileId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessCreateRequestMultiError, or nil if none found.
func (m *AccessCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
		err := AccessCreateRequestValidationError{
			field:  "PartitionId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessCreateRequest_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
		err := AccessCreateRequestValidationError{
			field:  "PartitionId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProfileId()); l < 3 || l > 40 {
		err := AccessCreateRequestValidationError{
			field:  "ProfileId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessCreateRequest_ProfileId_Pattern.MatchString(m.GetProfileId()) {
		err := AccessCreateRequestValidationError{
			field:  "ProfileId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccessCreateRequestMultiError(errors)
	}

	return nil
}

// AccessCreateRequestMultiError is an error wrapping multiple validation
// errors returned by AccessCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type AccessCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessCreateRequestMultiError) AllErrors() []error { return m }

// AccessCreateRequestValidationError is the validation error returned by
// AccessCreateRequest.Validate if the designated constraints aren't met.
type AccessCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessCreateRequestValidationError) ErrorName() string {
	return "AccessCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccessCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessCreateRequestValidationError{}

var _AccessCreateRequest_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _AccessCreateRequest_ProfileId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccessGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessGetRequestMultiError, or nil if none found.
func (m *AccessGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccessId() != "" {

		if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
			err := AccessGetRequestValidationError{
				field:  "AccessId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_AccessGetRequest_AccessId_Pattern.MatchString(m.GetAccessId()) {
			err := AccessGetRequestValidationError{
				field:  "AccessId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPartitionId() != "" {

		if l := utf8.RuneCountInString(m.GetPartitionId()); l < 3 || l > 40 {
			err := AccessGetRequestValidationError{
				field:  "PartitionId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_AccessGetRequest_PartitionId_Pattern.MatchString(m.GetPartitionId()) {
			err := AccessGetRequestValidationError{
				field:  "PartitionId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetProfileId() != "" {

		if l := utf8.RuneCountInString(m.GetProfileId()); l < 3 || l > 40 {
			err := AccessGetRequestValidationError{
				field:  "ProfileId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_AccessGetRequest_ProfileId_Pattern.MatchString(m.GetProfileId()) {
			err := AccessGetRequestValidationError{
				field:  "ProfileId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AccessGetRequestMultiError(errors)
	}

	return nil
}

// AccessGetRequestMultiError is an error wrapping multiple validation errors
// returned by AccessGetRequest.ValidateAll() if the designated constraints
// aren't met.
type AccessGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessGetRequestMultiError) AllErrors() []error { return m }

// AccessGetRequestValidationError is the validation error returned by
// AccessGetRequest.Validate if the designated constraints aren't met.
type AccessGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessGetRequestValidationError) ErrorName() string { return "AccessGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e AccessGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessGetRequestValidationError{}

var _AccessGetRequest_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _AccessGetRequest_PartitionId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _AccessGetRequest_ProfileId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessRemoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessRemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRemoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRemoveRequestMultiError, or nil if none found.
func (m *AccessRemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := AccessRemoveRequestValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessRemoveRequest_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := AccessRemoveRequestValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccessRemoveRequestMultiError(errors)
	}

	return nil
}

// AccessRemoveRequestMultiError is an error wrapping multiple validation
// errors returned by AccessRemoveRequest.ValidateAll() if the designated
// constraints aren't met.
type AccessRemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRemoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRemoveRequestMultiError) AllErrors() []error { return m }

// AccessRemoveRequestValidationError is the validation error returned by
// AccessRemoveRequest.Validate if the designated constraints aren't met.
type AccessRemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRemoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRemoveRequestValidationError) ErrorName() string {
	return "AccessRemoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRemoveRequestValidationError{}

var _AccessRemoveRequest_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessRoleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessRoleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRoleCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRoleCreateRequestMultiError, or nil if none found.
func (m *AccessRoleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRoleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := AccessRoleCreateRequestValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessRoleCreateRequest_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := AccessRoleCreateRequestValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPartitionRoleId()); l < 3 || l > 40 {
		err := AccessRoleCreateRequestValidationError{
			field:  "PartitionRoleId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessRoleCreateRequest_PartitionRoleId_Pattern.MatchString(m.GetPartitionRoleId()) {
		err := AccessRoleCreateRequestValidationError{
			field:  "PartitionRoleId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccessRoleCreateRequestMultiError(errors)
	}

	return nil
}

// AccessRoleCreateRequestMultiError is an error wrapping multiple validation
// errors returned by AccessRoleCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type AccessRoleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRoleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRoleCreateRequestMultiError) AllErrors() []error { return m }

// AccessRoleCreateRequestValidationError is the validation error returned by
// AccessRoleCreateRequest.Validate if the designated constraints aren't met.
type AccessRoleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRoleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRoleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRoleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRoleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRoleCreateRequestValidationError) ErrorName() string {
	return "AccessRoleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRoleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRoleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRoleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRoleCreateRequestValidationError{}

var _AccessRoleCreateRequest_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _AccessRoleCreateRequest_PartitionRoleId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessRoleObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccessRoleObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRoleObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRoleObjectMultiError, or nil if none found.
func (m *AccessRoleObject) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRoleObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessRoleId()); l < 3 || l > 40 {
		err := AccessRoleObjectValidationError{
			field:  "AccessRoleId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessRoleObject_AccessRoleId_Pattern.MatchString(m.GetAccessRoleId()) {
		err := AccessRoleObjectValidationError{
			field:  "AccessRoleId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := AccessRoleObjectValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessRoleObject_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := AccessRoleObjectValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessRoleObjectValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessRoleObjectValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessRoleObjectValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AccessRoleObjectMultiError(errors)
	}

	return nil
}

// AccessRoleObjectMultiError is an error wrapping multiple validation errors
// returned by AccessRoleObject.ValidateAll() if the designated constraints
// aren't met.
type AccessRoleObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRoleObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRoleObjectMultiError) AllErrors() []error { return m }

// AccessRoleObjectValidationError is the validation error returned by
// AccessRoleObject.Validate if the designated constraints aren't met.
type AccessRoleObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRoleObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRoleObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRoleObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRoleObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRoleObjectValidationError) ErrorName() string { return "AccessRoleObjectValidationError" }

// Error satisfies the builtin error interface
func (e AccessRoleObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRoleObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRoleObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRoleObjectValidationError{}

var _AccessRoleObject_AccessRoleId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _AccessRoleObject_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessRoleRemoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessRoleRemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRoleRemoveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRoleRemoveRequestMultiError, or nil if none found.
func (m *AccessRoleRemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRoleRemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessRoleId()); l < 3 || l > 40 {
		err := AccessRoleRemoveRequestValidationError{
			field:  "AccessRoleId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessRoleRemoveRequest_AccessRoleId_Pattern.MatchString(m.GetAccessRoleId()) {
		err := AccessRoleRemoveRequestValidationError{
			field:  "AccessRoleId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccessRoleRemoveRequestMultiError(errors)
	}

	return nil
}

// AccessRoleRemoveRequestMultiError is an error wrapping multiple validation
// errors returned by AccessRoleRemoveRequest.ValidateAll() if the designated
// constraints aren't met.
type AccessRoleRemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRoleRemoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRoleRemoveRequestMultiError) AllErrors() []error { return m }

// AccessRoleRemoveRequestValidationError is the validation error returned by
// AccessRoleRemoveRequest.Validate if the designated constraints aren't met.
type AccessRoleRemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRoleRemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRoleRemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRoleRemoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRoleRemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRoleRemoveRequestValidationError) ErrorName() string {
	return "AccessRoleRemoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRoleRemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRoleRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRoleRemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRoleRemoveRequestValidationError{}

var _AccessRoleRemoveRequest_AccessRoleId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessRoleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessRoleListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRoleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRoleListRequestMultiError, or nil if none found.
func (m *AccessRoleListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRoleListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessId()); l < 3 || l > 40 {
		err := AccessRoleListRequestValidationError{
			field:  "AccessId",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccessRoleListRequest_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := AccessRoleListRequestValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccessRoleListRequestMultiError(errors)
	}

	return nil
}

// AccessRoleListRequestMultiError is an error wrapping multiple validation
// errors returned by AccessRoleListRequest.ValidateAll() if the designated
// constraints aren't met.
type AccessRoleListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRoleListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRoleListRequestMultiError) AllErrors() []error { return m }

// AccessRoleListRequestValidationError is the validation error returned by
// AccessRoleListRequest.Validate if the designated constraints aren't met.
type AccessRoleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRoleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRoleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRoleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRoleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRoleListRequestValidationError) ErrorName() string {
	return "AccessRoleListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRoleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRoleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRoleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRoleListRequestValidationError{}

var _AccessRoleListRequest_AccessId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AccessRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessRoleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRoleListResponseMultiError, or nil if none found.
func (m *AccessRoleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRoleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRole() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccessRoleListResponseValidationError{
						field:  fmt.Sprintf("Role[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccessRoleListResponseValidationError{
						field:  fmt.Sprintf("Role[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccessRoleListResponseValidationError{
					field:  fmt.Sprintf("Role[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccessRoleListResponseMultiError(errors)
	}

	return nil
}

// AccessRoleListResponseMultiError is an error wrapping multiple validation
// errors returned by AccessRoleListResponse.ValidateAll() if the designated
// constraints aren't met.
type AccessRoleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRoleListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRoleListResponseMultiError) AllErrors() []error { return m }

// AccessRoleListResponseValidationError is the validation error returned by
// AccessRoleListResponse.Validate if the designated constraints aren't met.
type AccessRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRoleListResponseValidationError) ErrorName() string {
	return "AccessRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRoleListResponseValidationError{}

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRequestMultiError, or
// nil if none found.
func (m *SearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQuery() != "" {

		if utf8.RuneCountInString(m.GetQuery()) > 100 {
			err := SearchRequestValidationError{
				field:  "Query",
				reason: "value length must be at most 100 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCount() != 0 {

		if val := m.GetCount(); val < 5 || val >= 500 {
			err := SearchRequestValidationError{
				field:  "Count",
				reason: "value must be inside range [5, 500)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPage() != 0 {

		if m.GetPage() < 1 {
			err := SearchRequestValidationError{
				field:  "Page",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SearchRequestMultiError(errors)
	}

	return nil
}

// SearchRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRequestMultiError) AllErrors() []error { return m }

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}
