// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings.proto

package settingsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Setting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SettingMultiError, or nil if none found.
func (m *Setting) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := SettingValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetObject() != "" {

		if utf8.RuneCountInString(m.GetObject()) < 2 {
			err := SettingValidationError{
				field:  "Object",
				reason: "value length must be at least 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetObjectId() != "" {

		if l := utf8.RuneCountInString(m.GetObjectId()); l < 3 || l > 40 {
			err := SettingValidationError{
				field:  "ObjectId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Setting_ObjectId_Pattern.MatchString(m.GetObjectId()) {
			err := SettingValidationError{
				field:  "ObjectId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetLang() != "" {

		if utf8.RuneCountInString(m.GetLang()) < 2 {
			err := SettingValidationError{
				field:  "Lang",
				reason: "value length must be at least 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetModule() != "" {

		if utf8.RuneCountInString(m.GetModule()) < 3 {
			err := SettingValidationError{
				field:  "Module",
				reason: "value length must be at least 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SettingMultiError(errors)
	}

	return nil
}

// SettingMultiError is an error wrapping multiple validation errors returned
// by Setting.ValidateAll() if the designated constraints aren't met.
type SettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingMultiError) AllErrors() []error { return m }

// SettingValidationError is the validation error returned by Setting.Validate
// if the designated constraints aren't met.
type SettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingValidationError) ErrorName() string { return "SettingValidationError" }

// Error satisfies the builtin error interface
func (e SettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingValidationError{}

var _Setting_ObjectId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on SettingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SettingRequestMultiError,
// or nil if none found.
func (m *SettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SettingRequestMultiError(errors)
	}

	return nil
}

// SettingRequestMultiError is an error wrapping multiple validation errors
// returned by SettingRequest.ValidateAll() if the designated constraints
// aren't met.
type SettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingRequestMultiError) AllErrors() []error { return m }

// SettingRequestValidationError is the validation error returned by
// SettingRequest.Validate if the designated constraints aren't met.
type SettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingRequestValidationError) ErrorName() string { return "SettingRequestValidationError" }

// Error satisfies the builtin error interface
func (e SettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingRequestValidationError{}

// Validate checks the field values on SettingUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SettingUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SettingUpdateRequestMultiError, or nil if none found.
func (m *SettingUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingUpdateRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingUpdateRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingUpdateRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return SettingUpdateRequestMultiError(errors)
	}

	return nil
}

// SettingUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by SettingUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type SettingUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingUpdateRequestMultiError) AllErrors() []error { return m }

// SettingUpdateRequestValidationError is the validation error returned by
// SettingUpdateRequest.Validate if the designated constraints aren't met.
type SettingUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingUpdateRequestValidationError) ErrorName() string {
	return "SettingUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SettingUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingUpdateRequestValidationError{}

// Validate checks the field values on SettingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SettingResponseMultiError, or nil if none found.
func (m *SettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := SettingResponseValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SettingResponse_ID_Pattern.MatchString(m.GetID()) {
		err := SettingResponseValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	// no validation rules for Updated

	if len(errors) > 0 {
		return SettingResponseMultiError(errors)
	}

	return nil
}

// SettingResponseMultiError is an error wrapping multiple validation errors
// returned by SettingResponse.ValidateAll() if the designated constraints
// aren't met.
type SettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingResponseMultiError) AllErrors() []error { return m }

// SettingResponseValidationError is the validation error returned by
// SettingResponse.Validate if the designated constraints aren't met.
type SettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingResponseValidationError) ErrorName() string { return "SettingResponseValidationError" }

// Error satisfies the builtin error interface
func (e SettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingResponseValidationError{}

var _SettingResponse_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")
