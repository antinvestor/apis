// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: property.proto

package propertyv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Locality with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Locality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Locality with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocalityMultiError, or nil
// if none found.
func (m *Locality) ValidateAll() error {
	return m.validate(true)
}

func (m *Locality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetID() != "" {

		if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
			err := LocalityValidationError{
				field:  "ID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Locality_ID_Pattern.MatchString(m.GetID()) {
			err := LocalityValidationError{
				field:  "ID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetParentID() != "" {

		if l := utf8.RuneCountInString(m.GetParentID()); l < 3 || l > 40 {
			err := LocalityValidationError{
				field:  "ParentID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Locality_ParentID_Pattern.MatchString(m.GetParentID()) {
			err := LocalityValidationError{
				field:  "ParentID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 60 {
		err := LocalityValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 60 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDescription() != "" {

		if utf8.RuneCountInString(m.GetDescription()) < 50 {
			err := LocalityValidationError{
				field:  "Description",
				reason: "value length must be at least 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Extras

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocalityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocalityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocalityValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	oneofFeaturePresent := false
	switch v := m.Feature.(type) {
	case *Locality_Point:
		if v == nil {
			err := LocalityValidationError{
				field:  "Feature",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofFeaturePresent = true

		if m.GetPoint() != "" {

			if l := utf8.RuneCountInString(m.GetPoint()); l < 10 || l > 100 {
				err := LocalityValidationError{
					field:  "Point",
					reason: "value length must be between 10 and 100 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	case *Locality_Boundary:
		if v == nil {
			err := LocalityValidationError{
				field:  "Feature",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofFeaturePresent = true

		if m.GetBoundary() != "" {

			if l := utf8.RuneCountInString(m.GetBoundary()); l < 10 || l > 2048 {
				err := LocalityValidationError{
					field:  "Boundary",
					reason: "value length must be between 10 and 2048 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	default:
		_ = v // ensures v is used
	}
	if !oneofFeaturePresent {
		err := LocalityValidationError{
			field:  "Feature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LocalityMultiError(errors)
	}

	return nil
}

// LocalityMultiError is an error wrapping multiple validation errors returned
// by Locality.ValidateAll() if the designated constraints aren't met.
type LocalityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocalityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocalityMultiError) AllErrors() []error { return m }

// LocalityValidationError is the validation error returned by
// Locality.Validate if the designated constraints aren't met.
type LocalityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalityValidationError) ErrorName() string { return "LocalityValidationError" }

// Error satisfies the builtin error interface
func (e LocalityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalityValidationError{}

var _Locality_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _Locality_ParentID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PropertyState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PropertyState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyStateMultiError, or
// nil if none found.
func (m *PropertyState) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := PropertyStateValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PropertyState_ID_Pattern.MatchString(m.GetID()) {
		err := PropertyStateValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPropertyID()); l < 3 || l > 40 {
		err := PropertyStateValidationError{
			field:  "PropertyID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PropertyState_PropertyID_Pattern.MatchString(m.GetPropertyID()) {
		err := PropertyStateValidationError{
			field:  "PropertyID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for Status

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 60 {
		err := PropertyStateValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 60 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDescription() != "" {

		if utf8.RuneCountInString(m.GetDescription()) < 50 {
			err := PropertyStateValidationError{
				field:  "Description",
				reason: "value length must be at least 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Extras

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyStateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyStateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyStateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PropertyStateMultiError(errors)
	}

	return nil
}

// PropertyStateMultiError is an error wrapping multiple validation errors
// returned by PropertyState.ValidateAll() if the designated constraints
// aren't met.
type PropertyStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyStateMultiError) AllErrors() []error { return m }

// PropertyStateValidationError is the validation error returned by
// PropertyState.Validate if the designated constraints aren't met.
type PropertyStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyStateValidationError) ErrorName() string { return "PropertyStateValidationError" }

// Error satisfies the builtin error interface
func (e PropertyStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyStateValidationError{}

var _PropertyState_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _PropertyState_PropertyID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on PropertyType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PropertyType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyTypeMultiError, or
// nil if none found.
func (m *PropertyType) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetID() != "" {

		if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
			err := PropertyTypeValidationError{
				field:  "ID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_PropertyType_ID_Pattern.MatchString(m.GetID()) {
			err := PropertyTypeValidationError{
				field:  "ID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 60 {
		err := PropertyTypeValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 60 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDescription() != "" {

		if utf8.RuneCountInString(m.GetDescription()) < 50 {
			err := PropertyTypeValidationError{
				field:  "Description",
				reason: "value length must be at least 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Extra

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyTypeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyTypeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyTypeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PropertyTypeMultiError(errors)
	}

	return nil
}

// PropertyTypeMultiError is an error wrapping multiple validation errors
// returned by PropertyType.ValidateAll() if the designated constraints aren't met.
type PropertyTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyTypeMultiError) AllErrors() []error { return m }

// PropertyTypeValidationError is the validation error returned by
// PropertyType.Validate if the designated constraints aren't met.
type PropertyTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyTypeValidationError) ErrorName() string { return "PropertyTypeValidationError" }

// Error satisfies the builtin error interface
func (e PropertyTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyTypeValidationError{}

var _PropertyType_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on Subscription with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subscription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscriptionMultiError, or
// nil if none found.
func (m *Subscription) ValidateAll() error {
	return m.validate(true)
}

func (m *Subscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetID() != "" {

		if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
			err := SubscriptionValidationError{
				field:  "ID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Subscription_ID_Pattern.MatchString(m.GetID()) {
			err := SubscriptionValidationError{
				field:  "ID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetPropertyID()); l < 3 || l > 40 {
		err := SubscriptionValidationError{
			field:  "PropertyID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileID() != "" {

		if l := utf8.RuneCountInString(m.GetProfileID()); l < 3 || l > 50 {
			err := SubscriptionValidationError{
				field:  "ProfileID",
				reason: "value length must be between 3 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetRole() != "" {

		if l := utf8.RuneCountInString(m.GetRole()); l < 3 || l > 50 {
			err := SubscriptionValidationError{
				field:  "Role",
				reason: "value length must be between 3 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Extra

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscriptionMultiError(errors)
	}

	return nil
}

// SubscriptionMultiError is an error wrapping multiple validation errors
// returned by Subscription.ValidateAll() if the designated constraints aren't met.
type SubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionMultiError) AllErrors() []error { return m }

// SubscriptionValidationError is the validation error returned by
// Subscription.Validate if the designated constraints aren't met.
type SubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionValidationError) ErrorName() string { return "SubscriptionValidationError" }

// Error satisfies the builtin error interface
func (e SubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionValidationError{}

var _Subscription_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on Property with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Property) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Property with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyMultiError, or nil
// if none found.
func (m *Property) ValidateAll() error {
	return m.validate(true)
}

func (m *Property) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetID() != "" {

		if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
			err := PropertyValidationError{
				field:  "ID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Property_ID_Pattern.MatchString(m.GetID()) {
			err := PropertyValidationError{
				field:  "ID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetParentID() != "" {

		if l := utf8.RuneCountInString(m.GetParentID()); l < 3 || l > 40 {
			err := PropertyValidationError{
				field:  "ParentID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Property_ParentID_Pattern.MatchString(m.GetParentID()) {
			err := PropertyValidationError{
				field:  "ParentID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 60 {
		err := PropertyValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 60 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDescription() != "" {

		if utf8.RuneCountInString(m.GetDescription()) < 50 {
			err := PropertyValidationError{
				field:  "Description",
				reason: "value length must be at least 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPropertyType() == nil {
		err := PropertyValidationError{
			field:  "PropertyType",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPropertyType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "PropertyType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "PropertyType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPropertyType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyValidationError{
				field:  "PropertyType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocality()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Locality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Locality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyValidationError{
				field:  "Locality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if t := m.GetStartedAt(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = PropertyValidationError{
				field:  "StartedAt",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) >= 0 {
				err := PropertyValidationError{
					field:  "StartedAt",
					reason: "value must be less than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetExtra()) > 0 {

		{
			sorted_keys := make([]string, len(m.GetExtra()))
			i := 0
			for key := range m.GetExtra() {
				sorted_keys[i] = key
				i++
			}
			sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
			for _, key := range sorted_keys {
				val := m.GetExtra()[key]
				_ = val

				// no validation rules for Extra[key]

				if utf8.RuneCountInString(val) < 3 {
					err := PropertyValidationError{
						field:  fmt.Sprintf("Extra[%v]", key),
						reason: "value length must be at least 3 runes",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

			}
		}

	}

	if len(errors) > 0 {
		return PropertyMultiError(errors)
	}

	return nil
}

// PropertyMultiError is an error wrapping multiple validation errors returned
// by Property.ValidateAll() if the designated constraints aren't met.
type PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMultiError) AllErrors() []error { return m }

// PropertyValidationError is the validation error returned by
// Property.Validate if the designated constraints aren't met.
type PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyValidationError) ErrorName() string { return "PropertyValidationError" }

// Error satisfies the builtin error interface
func (e PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyValidationError{}

var _Property_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _Property_ParentID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on RequestID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RequestID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RequestIDMultiError, or nil
// if none found.
func (m *RequestID) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := RequestIDValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RequestID_ID_Pattern.MatchString(m.GetID()) {
		err := RequestIDValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RequestIDMultiError(errors)
	}

	return nil
}

// RequestIDMultiError is an error wrapping multiple validation errors returned
// by RequestID.ValidateAll() if the designated constraints aren't met.
type RequestIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestIDMultiError) AllErrors() []error { return m }

// RequestIDValidationError is the validation error returned by
// RequestID.Validate if the designated constraints aren't met.
type RequestIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestIDValidationError) ErrorName() string { return "RequestIDValidationError" }

// Error satisfies the builtin error interface
func (e RequestIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestIDValidationError{}

var _RequestID_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		err := UpdateRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateRequest_ID_Pattern.MatchString(m.GetID()) {
		err := UpdateRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for Status

	if m.GetName() != "" {

		if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 60 {
			err := UpdateRequestValidationError{
				field:  "Name",
				reason: "value length must be between 3 and 60 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetDescription() != "" {

		if utf8.RuneCountInString(m.GetDescription()) < 60 {
			err := UpdateRequestValidationError{
				field:  "Description",
				reason: "value length must be at least 60 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetGuardianID() != "" {

		if l := utf8.RuneCountInString(m.GetGuardianID()); l < 3 || l > 40 {
			err := UpdateRequestValidationError{
				field:  "GuardianID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_UpdateRequest_GuardianID_Pattern.MatchString(m.GetGuardianID()) {
			err := UpdateRequestValidationError{
				field:  "GuardianID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetLocalityID() != "" {

		if l := utf8.RuneCountInString(m.GetLocalityID()); l < 3 || l > 40 {
			err := UpdateRequestValidationError{
				field:  "LocalityID",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_UpdateRequest_LocalityID_Pattern.MatchString(m.GetLocalityID()) {
			err := UpdateRequestValidationError{
				field:  "LocalityID",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetExtras()) > 0 {

		{
			sorted_keys := make([]string, len(m.GetExtras()))
			i := 0
			for key := range m.GetExtras() {
				sorted_keys[i] = key
				i++
			}
			sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
			for _, key := range sorted_keys {
				val := m.GetExtras()[key]
				_ = val

				// no validation rules for Extras[key]

				if utf8.RuneCountInString(val) < 3 {
					err := UpdateRequestValidationError{
						field:  fmt.Sprintf("Extras[%v]", key),
						reason: "value length must be at least 3 runes",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

			}
		}

	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

var _UpdateRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _UpdateRequest_GuardianID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _UpdateRequest_LocalityID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRequestMultiError, or
// nil if none found.
func (m *SearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	if len(errors) > 0 {
		return SearchRequestMultiError(errors)
	}

	return nil
}

// SearchRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRequestMultiError) AllErrors() []error { return m }

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

// Validate checks the field values on SubscriptionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscriptionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriptionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriptionListRequestMultiError, or nil if none found.
func (m *SubscriptionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriptionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PropertyID

	// no validation rules for Query

	if len(errors) > 0 {
		return SubscriptionListRequestMultiError(errors)
	}

	return nil
}

// SubscriptionListRequestMultiError is an error wrapping multiple validation
// errors returned by SubscriptionListRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscriptionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionListRequestMultiError) AllErrors() []error { return m }

// SubscriptionListRequestValidationError is the validation error returned by
// SubscriptionListRequest.Validate if the designated constraints aren't met.
type SubscriptionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionListRequestValidationError) ErrorName() string {
	return "SubscriptionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscriptionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriptionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionListRequestValidationError{}
