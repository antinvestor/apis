// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis//property/v1/property_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis//property/v1/property_grpc.pb.go -self_package=github.com/antinvestor/apis/property/v1 -package=propertyv1 -destination=/home/j/code/antinvestor/apis//property/v1/property_grpc_mock.go
//
// Package propertyv1 is a generated GoMock package.
package propertyv1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPropertyServiceClient is a mock of PropertyServiceClient interface.
type MockPropertyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyServiceClientMockRecorder
}

// MockPropertyServiceClientMockRecorder is the mock recorder for MockPropertyServiceClient.
type MockPropertyServiceClientMockRecorder struct {
	mock *MockPropertyServiceClient
}

// NewMockPropertyServiceClient creates a new mock instance.
func NewMockPropertyServiceClient(ctrl *gomock.Controller) *MockPropertyServiceClient {
	mock := &MockPropertyServiceClient{ctrl: ctrl}
	mock.recorder = &MockPropertyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyServiceClient) EXPECT() *MockPropertyServiceClientMockRecorder {
	return m.recorder
}

// AddLocality mocks base method.
func (m *MockPropertyServiceClient) AddLocality(ctx context.Context, in *AddLocalityRequest, opts ...grpc.CallOption) (*AddLocalityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLocality", varargs...)
	ret0, _ := ret[0].(*AddLocalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocality indicates an expected call of AddLocality.
func (mr *MockPropertyServiceClientMockRecorder) AddLocality(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocality", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddLocality), varargs...)
}

// AddPropertyType mocks base method.
func (m *MockPropertyServiceClient) AddPropertyType(ctx context.Context, in *AddPropertyTypeRequest, opts ...grpc.CallOption) (*AddPropertyTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPropertyType", varargs...)
	ret0, _ := ret[0].(*AddPropertyTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPropertyType indicates an expected call of AddPropertyType.
func (mr *MockPropertyServiceClientMockRecorder) AddPropertyType(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPropertyType", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddPropertyType), varargs...)
}

// AddSubscription mocks base method.
func (m *MockPropertyServiceClient) AddSubscription(ctx context.Context, in *AddSubscriptionRequest, opts ...grpc.CallOption) (*AddSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSubscription", varargs...)
	ret0, _ := ret[0].(*AddSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockPropertyServiceClientMockRecorder) AddSubscription(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddSubscription), varargs...)
}

// CreateProperty mocks base method.
func (m *MockPropertyServiceClient) CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProperty", varargs...)
	ret0, _ := ret[0].(*CreatePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProperty indicates an expected call of CreateProperty.
func (mr *MockPropertyServiceClientMockRecorder) CreateProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).CreateProperty), varargs...)
}

// DeleteLocality mocks base method.
func (m *MockPropertyServiceClient) DeleteLocality(ctx context.Context, in *DeleteLocalityRequest, opts ...grpc.CallOption) (*DeleteLocalityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLocality", varargs...)
	ret0, _ := ret[0].(*DeleteLocalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocality indicates an expected call of DeleteLocality.
func (mr *MockPropertyServiceClientMockRecorder) DeleteLocality(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocality", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteLocality), varargs...)
}

// DeleteProperty mocks base method.
func (m *MockPropertyServiceClient) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProperty", varargs...)
	ret0, _ := ret[0].(*DeletePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockPropertyServiceClientMockRecorder) DeleteProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteProperty), varargs...)
}

// DeleteSubscription mocks base method.
func (m *MockPropertyServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscription", varargs...)
	ret0, _ := ret[0].(*DeleteSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockPropertyServiceClientMockRecorder) DeleteSubscription(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteSubscription), varargs...)
}

// HistoryOfProperty mocks base method.
func (m *MockPropertyServiceClient) HistoryOfProperty(ctx context.Context, in *HistoryOfPropertyRequest, opts ...grpc.CallOption) (PropertyService_HistoryOfPropertyClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HistoryOfProperty", varargs...)
	ret0, _ := ret[0].(PropertyService_HistoryOfPropertyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryOfProperty indicates an expected call of HistoryOfProperty.
func (mr *MockPropertyServiceClientMockRecorder) HistoryOfProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOfProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).HistoryOfProperty), varargs...)
}

// ListPropertyType mocks base method.
func (m *MockPropertyServiceClient) ListPropertyType(ctx context.Context, in *ListPropertyTypeRequest, opts ...grpc.CallOption) (PropertyService_ListPropertyTypeClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPropertyType", varargs...)
	ret0, _ := ret[0].(PropertyService_ListPropertyTypeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPropertyType indicates an expected call of ListPropertyType.
func (mr *MockPropertyServiceClientMockRecorder) ListPropertyType(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPropertyType", reflect.TypeOf((*MockPropertyServiceClient)(nil).ListPropertyType), varargs...)
}

// ListSubscription mocks base method.
func (m *MockPropertyServiceClient) ListSubscription(ctx context.Context, in *ListSubscriptionRequest, opts ...grpc.CallOption) (PropertyService_ListSubscriptionClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscription", varargs...)
	ret0, _ := ret[0].(PropertyService_ListSubscriptionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscription indicates an expected call of ListSubscription.
func (mr *MockPropertyServiceClientMockRecorder) ListSubscription(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscription", reflect.TypeOf((*MockPropertyServiceClient)(nil).ListSubscription), varargs...)
}

// SearchProperty mocks base method.
func (m *MockPropertyServiceClient) SearchProperty(ctx context.Context, in *SearchPropertyRequest, opts ...grpc.CallOption) (PropertyService_SearchPropertyClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProperty", varargs...)
	ret0, _ := ret[0].(PropertyService_SearchPropertyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProperty indicates an expected call of SearchProperty.
func (mr *MockPropertyServiceClientMockRecorder) SearchProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).SearchProperty), varargs...)
}

// StateOfProperty mocks base method.
func (m *MockPropertyServiceClient) StateOfProperty(ctx context.Context, in *StateOfPropertyRequest, opts ...grpc.CallOption) (*StateOfPropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StateOfProperty", varargs...)
	ret0, _ := ret[0].(*StateOfPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateOfProperty indicates an expected call of StateOfProperty.
func (mr *MockPropertyServiceClientMockRecorder) StateOfProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateOfProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).StateOfProperty), varargs...)
}

// UpdateProperty mocks base method.
func (m *MockPropertyServiceClient) UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProperty", varargs...)
	ret0, _ := ret[0].(*UpdatePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockPropertyServiceClientMockRecorder) UpdateProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).UpdateProperty), varargs...)
}

// MockPropertyService_ListPropertyTypeClient is a mock of PropertyService_ListPropertyTypeClient interface.
type MockPropertyService_ListPropertyTypeClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_ListPropertyTypeClientMockRecorder
}

// MockPropertyService_ListPropertyTypeClientMockRecorder is the mock recorder for MockPropertyService_ListPropertyTypeClient.
type MockPropertyService_ListPropertyTypeClientMockRecorder struct {
	mock *MockPropertyService_ListPropertyTypeClient
}

// NewMockPropertyService_ListPropertyTypeClient creates a new mock instance.
func NewMockPropertyService_ListPropertyTypeClient(ctrl *gomock.Controller) *MockPropertyService_ListPropertyTypeClient {
	mock := &MockPropertyService_ListPropertyTypeClient{ctrl: ctrl}
	mock.recorder = &MockPropertyService_ListPropertyTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_ListPropertyTypeClient) EXPECT() *MockPropertyService_ListPropertyTypeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPropertyService_ListPropertyTypeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPropertyService_ListPropertyTypeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPropertyService_ListPropertyTypeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPropertyService_ListPropertyTypeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_ListPropertyTypeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_ListPropertyTypeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPropertyService_ListPropertyTypeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPropertyService_ListPropertyTypeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPropertyService_ListPropertyTypeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPropertyService_ListPropertyTypeClient) Recv() (*ListPropertyTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListPropertyTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPropertyService_ListPropertyTypeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPropertyService_ListPropertyTypeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_ListPropertyTypeClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_ListPropertyTypeClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_ListPropertyTypeClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_ListPropertyTypeClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_ListPropertyTypeClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_ListPropertyTypeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPropertyService_ListPropertyTypeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPropertyService_ListPropertyTypeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPropertyService_ListPropertyTypeClient)(nil).Trailer))
}

// MockPropertyService_HistoryOfPropertyClient is a mock of PropertyService_HistoryOfPropertyClient interface.
type MockPropertyService_HistoryOfPropertyClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_HistoryOfPropertyClientMockRecorder
}

// MockPropertyService_HistoryOfPropertyClientMockRecorder is the mock recorder for MockPropertyService_HistoryOfPropertyClient.
type MockPropertyService_HistoryOfPropertyClientMockRecorder struct {
	mock *MockPropertyService_HistoryOfPropertyClient
}

// NewMockPropertyService_HistoryOfPropertyClient creates a new mock instance.
func NewMockPropertyService_HistoryOfPropertyClient(ctrl *gomock.Controller) *MockPropertyService_HistoryOfPropertyClient {
	mock := &MockPropertyService_HistoryOfPropertyClient{ctrl: ctrl}
	mock.recorder = &MockPropertyService_HistoryOfPropertyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_HistoryOfPropertyClient) EXPECT() *MockPropertyService_HistoryOfPropertyClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) Recv() (*HistoryOfPropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*HistoryOfPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_HistoryOfPropertyClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_HistoryOfPropertyClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).Trailer))
}

// MockPropertyService_SearchPropertyClient is a mock of PropertyService_SearchPropertyClient interface.
type MockPropertyService_SearchPropertyClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_SearchPropertyClientMockRecorder
}

// MockPropertyService_SearchPropertyClientMockRecorder is the mock recorder for MockPropertyService_SearchPropertyClient.
type MockPropertyService_SearchPropertyClientMockRecorder struct {
	mock *MockPropertyService_SearchPropertyClient
}

// NewMockPropertyService_SearchPropertyClient creates a new mock instance.
func NewMockPropertyService_SearchPropertyClient(ctrl *gomock.Controller) *MockPropertyService_SearchPropertyClient {
	mock := &MockPropertyService_SearchPropertyClient{ctrl: ctrl}
	mock.recorder = &MockPropertyService_SearchPropertyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_SearchPropertyClient) EXPECT() *MockPropertyService_SearchPropertyClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPropertyService_SearchPropertyClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPropertyService_SearchPropertyClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPropertyService_SearchPropertyClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPropertyService_SearchPropertyClient) Recv() (*SearchPropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*SearchPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_SearchPropertyClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_SearchPropertyClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPropertyService_SearchPropertyClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).Trailer))
}

// MockPropertyService_ListSubscriptionClient is a mock of PropertyService_ListSubscriptionClient interface.
type MockPropertyService_ListSubscriptionClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_ListSubscriptionClientMockRecorder
}

// MockPropertyService_ListSubscriptionClientMockRecorder is the mock recorder for MockPropertyService_ListSubscriptionClient.
type MockPropertyService_ListSubscriptionClientMockRecorder struct {
	mock *MockPropertyService_ListSubscriptionClient
}

// NewMockPropertyService_ListSubscriptionClient creates a new mock instance.
func NewMockPropertyService_ListSubscriptionClient(ctrl *gomock.Controller) *MockPropertyService_ListSubscriptionClient {
	mock := &MockPropertyService_ListSubscriptionClient{ctrl: ctrl}
	mock.recorder = &MockPropertyService_ListSubscriptionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_ListSubscriptionClient) EXPECT() *MockPropertyService_ListSubscriptionClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPropertyService_ListSubscriptionClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPropertyService_ListSubscriptionClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPropertyService_ListSubscriptionClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPropertyService_ListSubscriptionClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_ListSubscriptionClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_ListSubscriptionClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPropertyService_ListSubscriptionClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPropertyService_ListSubscriptionClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPropertyService_ListSubscriptionClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPropertyService_ListSubscriptionClient) Recv() (*ListSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPropertyService_ListSubscriptionClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPropertyService_ListSubscriptionClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_ListSubscriptionClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_ListSubscriptionClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_ListSubscriptionClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_ListSubscriptionClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_ListSubscriptionClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_ListSubscriptionClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPropertyService_ListSubscriptionClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPropertyService_ListSubscriptionClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPropertyService_ListSubscriptionClient)(nil).Trailer))
}

// MockPropertyServiceServer is a mock of PropertyServiceServer interface.
type MockPropertyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyServiceServerMockRecorder
}

// MockPropertyServiceServerMockRecorder is the mock recorder for MockPropertyServiceServer.
type MockPropertyServiceServerMockRecorder struct {
	mock *MockPropertyServiceServer
}

// NewMockPropertyServiceServer creates a new mock instance.
func NewMockPropertyServiceServer(ctrl *gomock.Controller) *MockPropertyServiceServer {
	mock := &MockPropertyServiceServer{ctrl: ctrl}
	mock.recorder = &MockPropertyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyServiceServer) EXPECT() *MockPropertyServiceServerMockRecorder {
	return m.recorder
}

// AddLocality mocks base method.
func (m *MockPropertyServiceServer) AddLocality(arg0 context.Context, arg1 *AddLocalityRequest) (*AddLocalityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocality", arg0, arg1)
	ret0, _ := ret[0].(*AddLocalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocality indicates an expected call of AddLocality.
func (mr *MockPropertyServiceServerMockRecorder) AddLocality(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocality", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddLocality), arg0, arg1)
}

// AddPropertyType mocks base method.
func (m *MockPropertyServiceServer) AddPropertyType(arg0 context.Context, arg1 *AddPropertyTypeRequest) (*AddPropertyTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPropertyType", arg0, arg1)
	ret0, _ := ret[0].(*AddPropertyTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPropertyType indicates an expected call of AddPropertyType.
func (mr *MockPropertyServiceServerMockRecorder) AddPropertyType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPropertyType", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddPropertyType), arg0, arg1)
}

// AddSubscription mocks base method.
func (m *MockPropertyServiceServer) AddSubscription(arg0 context.Context, arg1 *AddSubscriptionRequest) (*AddSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", arg0, arg1)
	ret0, _ := ret[0].(*AddSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockPropertyServiceServerMockRecorder) AddSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddSubscription), arg0, arg1)
}

// CreateProperty mocks base method.
func (m *MockPropertyServiceServer) CreateProperty(arg0 context.Context, arg1 *CreatePropertyRequest) (*CreatePropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProperty", arg0, arg1)
	ret0, _ := ret[0].(*CreatePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProperty indicates an expected call of CreateProperty.
func (mr *MockPropertyServiceServerMockRecorder) CreateProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).CreateProperty), arg0, arg1)
}

// DeleteLocality mocks base method.
func (m *MockPropertyServiceServer) DeleteLocality(arg0 context.Context, arg1 *DeleteLocalityRequest) (*DeleteLocalityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocality", arg0, arg1)
	ret0, _ := ret[0].(*DeleteLocalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocality indicates an expected call of DeleteLocality.
func (mr *MockPropertyServiceServerMockRecorder) DeleteLocality(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocality", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteLocality), arg0, arg1)
}

// DeleteProperty mocks base method.
func (m *MockPropertyServiceServer) DeleteProperty(arg0 context.Context, arg1 *DeletePropertyRequest) (*DeletePropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProperty", arg0, arg1)
	ret0, _ := ret[0].(*DeletePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockPropertyServiceServerMockRecorder) DeleteProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteProperty), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockPropertyServiceServer) DeleteSubscription(arg0 context.Context, arg1 *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(*DeleteSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockPropertyServiceServerMockRecorder) DeleteSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteSubscription), arg0, arg1)
}

// HistoryOfProperty mocks base method.
func (m *MockPropertyServiceServer) HistoryOfProperty(arg0 *HistoryOfPropertyRequest, arg1 PropertyService_HistoryOfPropertyServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryOfProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HistoryOfProperty indicates an expected call of HistoryOfProperty.
func (mr *MockPropertyServiceServerMockRecorder) HistoryOfProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOfProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).HistoryOfProperty), arg0, arg1)
}

// ListPropertyType mocks base method.
func (m *MockPropertyServiceServer) ListPropertyType(arg0 *ListPropertyTypeRequest, arg1 PropertyService_ListPropertyTypeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPropertyType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPropertyType indicates an expected call of ListPropertyType.
func (mr *MockPropertyServiceServerMockRecorder) ListPropertyType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPropertyType", reflect.TypeOf((*MockPropertyServiceServer)(nil).ListPropertyType), arg0, arg1)
}

// ListSubscription mocks base method.
func (m *MockPropertyServiceServer) ListSubscription(arg0 *ListSubscriptionRequest, arg1 PropertyService_ListSubscriptionServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscription indicates an expected call of ListSubscription.
func (mr *MockPropertyServiceServerMockRecorder) ListSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscription", reflect.TypeOf((*MockPropertyServiceServer)(nil).ListSubscription), arg0, arg1)
}

// SearchProperty mocks base method.
func (m *MockPropertyServiceServer) SearchProperty(arg0 *SearchPropertyRequest, arg1 PropertyService_SearchPropertyServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProperty indicates an expected call of SearchProperty.
func (mr *MockPropertyServiceServerMockRecorder) SearchProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).SearchProperty), arg0, arg1)
}

// StateOfProperty mocks base method.
func (m *MockPropertyServiceServer) StateOfProperty(arg0 context.Context, arg1 *StateOfPropertyRequest) (*StateOfPropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateOfProperty", arg0, arg1)
	ret0, _ := ret[0].(*StateOfPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateOfProperty indicates an expected call of StateOfProperty.
func (mr *MockPropertyServiceServerMockRecorder) StateOfProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateOfProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).StateOfProperty), arg0, arg1)
}

// UpdateProperty mocks base method.
func (m *MockPropertyServiceServer) UpdateProperty(arg0 context.Context, arg1 *UpdatePropertyRequest) (*UpdatePropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperty", arg0, arg1)
	ret0, _ := ret[0].(*UpdatePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockPropertyServiceServerMockRecorder) UpdateProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).UpdateProperty), arg0, arg1)
}

// mustEmbedUnimplementedPropertyServiceServer mocks base method.
func (m *MockPropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPropertyServiceServer")
}

// mustEmbedUnimplementedPropertyServiceServer indicates an expected call of mustEmbedUnimplementedPropertyServiceServer.
func (mr *MockPropertyServiceServerMockRecorder) mustEmbedUnimplementedPropertyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPropertyServiceServer", reflect.TypeOf((*MockPropertyServiceServer)(nil).mustEmbedUnimplementedPropertyServiceServer))
}

// MockUnsafePropertyServiceServer is a mock of UnsafePropertyServiceServer interface.
type MockUnsafePropertyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePropertyServiceServerMockRecorder
}

// MockUnsafePropertyServiceServerMockRecorder is the mock recorder for MockUnsafePropertyServiceServer.
type MockUnsafePropertyServiceServerMockRecorder struct {
	mock *MockUnsafePropertyServiceServer
}

// NewMockUnsafePropertyServiceServer creates a new mock instance.
func NewMockUnsafePropertyServiceServer(ctrl *gomock.Controller) *MockUnsafePropertyServiceServer {
	mock := &MockUnsafePropertyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePropertyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePropertyServiceServer) EXPECT() *MockUnsafePropertyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPropertyServiceServer mocks base method.
func (m *MockUnsafePropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPropertyServiceServer")
}

// mustEmbedUnimplementedPropertyServiceServer indicates an expected call of mustEmbedUnimplementedPropertyServiceServer.
func (mr *MockUnsafePropertyServiceServerMockRecorder) mustEmbedUnimplementedPropertyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPropertyServiceServer", reflect.TypeOf((*MockUnsafePropertyServiceServer)(nil).mustEmbedUnimplementedPropertyServiceServer))
}

// MockPropertyService_ListPropertyTypeServer is a mock of PropertyService_ListPropertyTypeServer interface.
type MockPropertyService_ListPropertyTypeServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_ListPropertyTypeServerMockRecorder
}

// MockPropertyService_ListPropertyTypeServerMockRecorder is the mock recorder for MockPropertyService_ListPropertyTypeServer.
type MockPropertyService_ListPropertyTypeServerMockRecorder struct {
	mock *MockPropertyService_ListPropertyTypeServer
}

// NewMockPropertyService_ListPropertyTypeServer creates a new mock instance.
func NewMockPropertyService_ListPropertyTypeServer(ctrl *gomock.Controller) *MockPropertyService_ListPropertyTypeServer {
	mock := &MockPropertyService_ListPropertyTypeServer{ctrl: ctrl}
	mock.recorder = &MockPropertyService_ListPropertyTypeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_ListPropertyTypeServer) EXPECT() *MockPropertyService_ListPropertyTypeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPropertyService_ListPropertyTypeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_ListPropertyTypeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_ListPropertyTypeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_ListPropertyTypeServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_ListPropertyTypeServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_ListPropertyTypeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPropertyService_ListPropertyTypeServer) Send(arg0 *ListPropertyTypeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPropertyService_ListPropertyTypeServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPropertyService_ListPropertyTypeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPropertyService_ListPropertyTypeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPropertyService_ListPropertyTypeServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPropertyService_ListPropertyTypeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_ListPropertyTypeServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_ListPropertyTypeServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_ListPropertyTypeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPropertyService_ListPropertyTypeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPropertyService_ListPropertyTypeServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPropertyService_ListPropertyTypeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPropertyService_ListPropertyTypeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPropertyService_ListPropertyTypeServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPropertyService_ListPropertyTypeServer)(nil).SetTrailer), arg0)
}

// MockPropertyService_HistoryOfPropertyServer is a mock of PropertyService_HistoryOfPropertyServer interface.
type MockPropertyService_HistoryOfPropertyServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_HistoryOfPropertyServerMockRecorder
}

// MockPropertyService_HistoryOfPropertyServerMockRecorder is the mock recorder for MockPropertyService_HistoryOfPropertyServer.
type MockPropertyService_HistoryOfPropertyServerMockRecorder struct {
	mock *MockPropertyService_HistoryOfPropertyServer
}

// NewMockPropertyService_HistoryOfPropertyServer creates a new mock instance.
func NewMockPropertyService_HistoryOfPropertyServer(ctrl *gomock.Controller) *MockPropertyService_HistoryOfPropertyServer {
	mock := &MockPropertyService_HistoryOfPropertyServer{ctrl: ctrl}
	mock.recorder = &MockPropertyService_HistoryOfPropertyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_HistoryOfPropertyServer) EXPECT() *MockPropertyService_HistoryOfPropertyServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_HistoryOfPropertyServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) Send(arg0 *HistoryOfPropertyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_HistoryOfPropertyServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).SetTrailer), arg0)
}

// MockPropertyService_SearchPropertyServer is a mock of PropertyService_SearchPropertyServer interface.
type MockPropertyService_SearchPropertyServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_SearchPropertyServerMockRecorder
}

// MockPropertyService_SearchPropertyServerMockRecorder is the mock recorder for MockPropertyService_SearchPropertyServer.
type MockPropertyService_SearchPropertyServerMockRecorder struct {
	mock *MockPropertyService_SearchPropertyServer
}

// NewMockPropertyService_SearchPropertyServer creates a new mock instance.
func NewMockPropertyService_SearchPropertyServer(ctrl *gomock.Controller) *MockPropertyService_SearchPropertyServer {
	mock := &MockPropertyService_SearchPropertyServer{ctrl: ctrl}
	mock.recorder = &MockPropertyService_SearchPropertyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_SearchPropertyServer) EXPECT() *MockPropertyService_SearchPropertyServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPropertyService_SearchPropertyServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_SearchPropertyServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPropertyService_SearchPropertyServer) Send(arg0 *SearchPropertyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPropertyService_SearchPropertyServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_SearchPropertyServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPropertyService_SearchPropertyServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPropertyService_SearchPropertyServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).SetTrailer), arg0)
}

// MockPropertyService_ListSubscriptionServer is a mock of PropertyService_ListSubscriptionServer interface.
type MockPropertyService_ListSubscriptionServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_ListSubscriptionServerMockRecorder
}

// MockPropertyService_ListSubscriptionServerMockRecorder is the mock recorder for MockPropertyService_ListSubscriptionServer.
type MockPropertyService_ListSubscriptionServerMockRecorder struct {
	mock *MockPropertyService_ListSubscriptionServer
}

// NewMockPropertyService_ListSubscriptionServer creates a new mock instance.
func NewMockPropertyService_ListSubscriptionServer(ctrl *gomock.Controller) *MockPropertyService_ListSubscriptionServer {
	mock := &MockPropertyService_ListSubscriptionServer{ctrl: ctrl}
	mock.recorder = &MockPropertyService_ListSubscriptionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_ListSubscriptionServer) EXPECT() *MockPropertyService_ListSubscriptionServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPropertyService_ListSubscriptionServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_ListSubscriptionServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_ListSubscriptionServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_ListSubscriptionServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_ListSubscriptionServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_ListSubscriptionServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPropertyService_ListSubscriptionServer) Send(arg0 *ListSubscriptionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPropertyService_ListSubscriptionServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPropertyService_ListSubscriptionServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPropertyService_ListSubscriptionServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPropertyService_ListSubscriptionServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPropertyService_ListSubscriptionServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_ListSubscriptionServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_ListSubscriptionServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_ListSubscriptionServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPropertyService_ListSubscriptionServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPropertyService_ListSubscriptionServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPropertyService_ListSubscriptionServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPropertyService_ListSubscriptionServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPropertyService_ListSubscriptionServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPropertyService_ListSubscriptionServer)(nil).SetTrailer), arg0)
}
