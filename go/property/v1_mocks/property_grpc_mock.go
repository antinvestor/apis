// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/property/v1/property_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/property/v1/property_grpc.pb.go -package=propertyv1_mocks -destination=/home/j/code/antinvestor/apis/go/property/v1_mocks/property_grpc_mock.go
//

// Package propertyv1_mocks is a generated GoMock package.
package propertyv1_mocks

import (
	context "context"
	reflect "reflect"

	propertyv1 "github.com/antinvestor/apis/go/property/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPropertyServiceClient is a mock of PropertyServiceClient interface.
type MockPropertyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyServiceClientMockRecorder
	isgomock struct{}
}

// MockPropertyServiceClientMockRecorder is the mock recorder for MockPropertyServiceClient.
type MockPropertyServiceClientMockRecorder struct {
	mock *MockPropertyServiceClient
}

// NewMockPropertyServiceClient creates a new mock instance.
func NewMockPropertyServiceClient(ctrl *gomock.Controller) *MockPropertyServiceClient {
	mock := &MockPropertyServiceClient{ctrl: ctrl}
	mock.recorder = &MockPropertyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyServiceClient) EXPECT() *MockPropertyServiceClientMockRecorder {
	return m.recorder
}

// AddLocality mocks base method.
func (m *MockPropertyServiceClient) AddLocality(ctx context.Context, in *propertyv1.AddLocalityRequest, opts ...grpc.CallOption) (*propertyv1.AddLocalityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLocality", varargs...)
	ret0, _ := ret[0].(*propertyv1.AddLocalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocality indicates an expected call of AddLocality.
func (mr *MockPropertyServiceClientMockRecorder) AddLocality(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocality", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddLocality), varargs...)
}

// AddPropertyType mocks base method.
func (m *MockPropertyServiceClient) AddPropertyType(ctx context.Context, in *propertyv1.AddPropertyTypeRequest, opts ...grpc.CallOption) (*propertyv1.AddPropertyTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPropertyType", varargs...)
	ret0, _ := ret[0].(*propertyv1.AddPropertyTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPropertyType indicates an expected call of AddPropertyType.
func (mr *MockPropertyServiceClientMockRecorder) AddPropertyType(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPropertyType", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddPropertyType), varargs...)
}

// AddSubscription mocks base method.
func (m *MockPropertyServiceClient) AddSubscription(ctx context.Context, in *propertyv1.AddSubscriptionRequest, opts ...grpc.CallOption) (*propertyv1.AddSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSubscription", varargs...)
	ret0, _ := ret[0].(*propertyv1.AddSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockPropertyServiceClientMockRecorder) AddSubscription(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddSubscription), varargs...)
}

// CreateProperty mocks base method.
func (m *MockPropertyServiceClient) CreateProperty(ctx context.Context, in *propertyv1.CreatePropertyRequest, opts ...grpc.CallOption) (*propertyv1.CreatePropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProperty", varargs...)
	ret0, _ := ret[0].(*propertyv1.CreatePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProperty indicates an expected call of CreateProperty.
func (mr *MockPropertyServiceClientMockRecorder) CreateProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).CreateProperty), varargs...)
}

// DeleteLocality mocks base method.
func (m *MockPropertyServiceClient) DeleteLocality(ctx context.Context, in *propertyv1.DeleteLocalityRequest, opts ...grpc.CallOption) (*propertyv1.DeleteLocalityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLocality", varargs...)
	ret0, _ := ret[0].(*propertyv1.DeleteLocalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocality indicates an expected call of DeleteLocality.
func (mr *MockPropertyServiceClientMockRecorder) DeleteLocality(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocality", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteLocality), varargs...)
}

// DeleteProperty mocks base method.
func (m *MockPropertyServiceClient) DeleteProperty(ctx context.Context, in *propertyv1.DeletePropertyRequest, opts ...grpc.CallOption) (*propertyv1.DeletePropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProperty", varargs...)
	ret0, _ := ret[0].(*propertyv1.DeletePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockPropertyServiceClientMockRecorder) DeleteProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteProperty), varargs...)
}

// DeleteSubscription mocks base method.
func (m *MockPropertyServiceClient) DeleteSubscription(ctx context.Context, in *propertyv1.DeleteSubscriptionRequest, opts ...grpc.CallOption) (*propertyv1.DeleteSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscription", varargs...)
	ret0, _ := ret[0].(*propertyv1.DeleteSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockPropertyServiceClientMockRecorder) DeleteSubscription(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteSubscription), varargs...)
}

// HistoryOfProperty mocks base method.
func (m *MockPropertyServiceClient) HistoryOfProperty(ctx context.Context, in *propertyv1.HistoryOfPropertyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[propertyv1.HistoryOfPropertyResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HistoryOfProperty", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[propertyv1.HistoryOfPropertyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryOfProperty indicates an expected call of HistoryOfProperty.
func (mr *MockPropertyServiceClientMockRecorder) HistoryOfProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOfProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).HistoryOfProperty), varargs...)
}

// ListPropertyType mocks base method.
func (m *MockPropertyServiceClient) ListPropertyType(ctx context.Context, in *propertyv1.ListPropertyTypeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[propertyv1.ListPropertyTypeResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPropertyType", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[propertyv1.ListPropertyTypeResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPropertyType indicates an expected call of ListPropertyType.
func (mr *MockPropertyServiceClientMockRecorder) ListPropertyType(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPropertyType", reflect.TypeOf((*MockPropertyServiceClient)(nil).ListPropertyType), varargs...)
}

// ListSubscription mocks base method.
func (m *MockPropertyServiceClient) ListSubscription(ctx context.Context, in *propertyv1.ListSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[propertyv1.ListSubscriptionResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscription", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[propertyv1.ListSubscriptionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscription indicates an expected call of ListSubscription.
func (mr *MockPropertyServiceClientMockRecorder) ListSubscription(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscription", reflect.TypeOf((*MockPropertyServiceClient)(nil).ListSubscription), varargs...)
}

// SearchProperty mocks base method.
func (m *MockPropertyServiceClient) SearchProperty(ctx context.Context, in *propertyv1.SearchPropertyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[propertyv1.SearchPropertyResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProperty", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[propertyv1.SearchPropertyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProperty indicates an expected call of SearchProperty.
func (mr *MockPropertyServiceClientMockRecorder) SearchProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).SearchProperty), varargs...)
}

// StateOfProperty mocks base method.
func (m *MockPropertyServiceClient) StateOfProperty(ctx context.Context, in *propertyv1.StateOfPropertyRequest, opts ...grpc.CallOption) (*propertyv1.StateOfPropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StateOfProperty", varargs...)
	ret0, _ := ret[0].(*propertyv1.StateOfPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateOfProperty indicates an expected call of StateOfProperty.
func (mr *MockPropertyServiceClientMockRecorder) StateOfProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateOfProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).StateOfProperty), varargs...)
}

// UpdateProperty mocks base method.
func (m *MockPropertyServiceClient) UpdateProperty(ctx context.Context, in *propertyv1.UpdatePropertyRequest, opts ...grpc.CallOption) (*propertyv1.UpdatePropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProperty", varargs...)
	ret0, _ := ret[0].(*propertyv1.UpdatePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockPropertyServiceClientMockRecorder) UpdateProperty(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).UpdateProperty), varargs...)
}

// MockPropertyServiceServer is a mock of PropertyServiceServer interface.
type MockPropertyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyServiceServerMockRecorder
	isgomock struct{}
}

// MockPropertyServiceServerMockRecorder is the mock recorder for MockPropertyServiceServer.
type MockPropertyServiceServerMockRecorder struct {
	mock *MockPropertyServiceServer
}

// NewMockPropertyServiceServer creates a new mock instance.
func NewMockPropertyServiceServer(ctrl *gomock.Controller) *MockPropertyServiceServer {
	mock := &MockPropertyServiceServer{ctrl: ctrl}
	mock.recorder = &MockPropertyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyServiceServer) EXPECT() *MockPropertyServiceServerMockRecorder {
	return m.recorder
}

// AddLocality mocks base method.
func (m *MockPropertyServiceServer) AddLocality(arg0 context.Context, arg1 *propertyv1.AddLocalityRequest) (*propertyv1.AddLocalityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocality", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.AddLocalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocality indicates an expected call of AddLocality.
func (mr *MockPropertyServiceServerMockRecorder) AddLocality(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocality", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddLocality), arg0, arg1)
}

// AddPropertyType mocks base method.
func (m *MockPropertyServiceServer) AddPropertyType(arg0 context.Context, arg1 *propertyv1.AddPropertyTypeRequest) (*propertyv1.AddPropertyTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPropertyType", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.AddPropertyTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPropertyType indicates an expected call of AddPropertyType.
func (mr *MockPropertyServiceServerMockRecorder) AddPropertyType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPropertyType", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddPropertyType), arg0, arg1)
}

// AddSubscription mocks base method.
func (m *MockPropertyServiceServer) AddSubscription(arg0 context.Context, arg1 *propertyv1.AddSubscriptionRequest) (*propertyv1.AddSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.AddSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockPropertyServiceServerMockRecorder) AddSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddSubscription), arg0, arg1)
}

// CreateProperty mocks base method.
func (m *MockPropertyServiceServer) CreateProperty(arg0 context.Context, arg1 *propertyv1.CreatePropertyRequest) (*propertyv1.CreatePropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProperty", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.CreatePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProperty indicates an expected call of CreateProperty.
func (mr *MockPropertyServiceServerMockRecorder) CreateProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).CreateProperty), arg0, arg1)
}

// DeleteLocality mocks base method.
func (m *MockPropertyServiceServer) DeleteLocality(arg0 context.Context, arg1 *propertyv1.DeleteLocalityRequest) (*propertyv1.DeleteLocalityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocality", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.DeleteLocalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocality indicates an expected call of DeleteLocality.
func (mr *MockPropertyServiceServerMockRecorder) DeleteLocality(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocality", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteLocality), arg0, arg1)
}

// DeleteProperty mocks base method.
func (m *MockPropertyServiceServer) DeleteProperty(arg0 context.Context, arg1 *propertyv1.DeletePropertyRequest) (*propertyv1.DeletePropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProperty", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.DeletePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockPropertyServiceServerMockRecorder) DeleteProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteProperty), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockPropertyServiceServer) DeleteSubscription(arg0 context.Context, arg1 *propertyv1.DeleteSubscriptionRequest) (*propertyv1.DeleteSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.DeleteSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockPropertyServiceServerMockRecorder) DeleteSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteSubscription), arg0, arg1)
}

// HistoryOfProperty mocks base method.
func (m *MockPropertyServiceServer) HistoryOfProperty(arg0 *propertyv1.HistoryOfPropertyRequest, arg1 grpc.ServerStreamingServer[propertyv1.HistoryOfPropertyResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryOfProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HistoryOfProperty indicates an expected call of HistoryOfProperty.
func (mr *MockPropertyServiceServerMockRecorder) HistoryOfProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOfProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).HistoryOfProperty), arg0, arg1)
}

// ListPropertyType mocks base method.
func (m *MockPropertyServiceServer) ListPropertyType(arg0 *propertyv1.ListPropertyTypeRequest, arg1 grpc.ServerStreamingServer[propertyv1.ListPropertyTypeResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPropertyType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPropertyType indicates an expected call of ListPropertyType.
func (mr *MockPropertyServiceServerMockRecorder) ListPropertyType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPropertyType", reflect.TypeOf((*MockPropertyServiceServer)(nil).ListPropertyType), arg0, arg1)
}

// ListSubscription mocks base method.
func (m *MockPropertyServiceServer) ListSubscription(arg0 *propertyv1.ListSubscriptionRequest, arg1 grpc.ServerStreamingServer[propertyv1.ListSubscriptionResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscription indicates an expected call of ListSubscription.
func (mr *MockPropertyServiceServerMockRecorder) ListSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscription", reflect.TypeOf((*MockPropertyServiceServer)(nil).ListSubscription), arg0, arg1)
}

// SearchProperty mocks base method.
func (m *MockPropertyServiceServer) SearchProperty(arg0 *propertyv1.SearchPropertyRequest, arg1 grpc.ServerStreamingServer[propertyv1.SearchPropertyResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProperty indicates an expected call of SearchProperty.
func (mr *MockPropertyServiceServerMockRecorder) SearchProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).SearchProperty), arg0, arg1)
}

// StateOfProperty mocks base method.
func (m *MockPropertyServiceServer) StateOfProperty(arg0 context.Context, arg1 *propertyv1.StateOfPropertyRequest) (*propertyv1.StateOfPropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateOfProperty", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.StateOfPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateOfProperty indicates an expected call of StateOfProperty.
func (mr *MockPropertyServiceServerMockRecorder) StateOfProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateOfProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).StateOfProperty), arg0, arg1)
}

// UpdateProperty mocks base method.
func (m *MockPropertyServiceServer) UpdateProperty(arg0 context.Context, arg1 *propertyv1.UpdatePropertyRequest) (*propertyv1.UpdatePropertyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperty", arg0, arg1)
	ret0, _ := ret[0].(*propertyv1.UpdatePropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockPropertyServiceServerMockRecorder) UpdateProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).UpdateProperty), arg0, arg1)
}

// mustEmbedUnimplementedPropertyServiceServer mocks base method.
func (m *MockPropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPropertyServiceServer")
}

// mustEmbedUnimplementedPropertyServiceServer indicates an expected call of mustEmbedUnimplementedPropertyServiceServer.
func (mr *MockPropertyServiceServerMockRecorder) mustEmbedUnimplementedPropertyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPropertyServiceServer", reflect.TypeOf((*MockPropertyServiceServer)(nil).mustEmbedUnimplementedPropertyServiceServer))
}

// MockUnsafePropertyServiceServer is a mock of UnsafePropertyServiceServer interface.
type MockUnsafePropertyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePropertyServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafePropertyServiceServerMockRecorder is the mock recorder for MockUnsafePropertyServiceServer.
type MockUnsafePropertyServiceServerMockRecorder struct {
	mock *MockUnsafePropertyServiceServer
}

// NewMockUnsafePropertyServiceServer creates a new mock instance.
func NewMockUnsafePropertyServiceServer(ctrl *gomock.Controller) *MockUnsafePropertyServiceServer {
	mock := &MockUnsafePropertyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePropertyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePropertyServiceServer) EXPECT() *MockUnsafePropertyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPropertyServiceServer mocks base method.
func (m *MockUnsafePropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPropertyServiceServer")
}

// mustEmbedUnimplementedPropertyServiceServer indicates an expected call of mustEmbedUnimplementedPropertyServiceServer.
func (mr *MockUnsafePropertyServiceServerMockRecorder) mustEmbedUnimplementedPropertyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPropertyServiceServer", reflect.TypeOf((*MockUnsafePropertyServiceServer)(nil).mustEmbedUnimplementedPropertyServiceServer))
}
