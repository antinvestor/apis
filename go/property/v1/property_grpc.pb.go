// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: property/v1/property.proto

package propertyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PropertyService_AddPropertyType_FullMethodName    = "/property.v1.PropertyService/AddPropertyType"
	PropertyService_ListPropertyType_FullMethodName   = "/property.v1.PropertyService/ListPropertyType"
	PropertyService_AddLocality_FullMethodName        = "/property.v1.PropertyService/AddLocality"
	PropertyService_DeleteLocality_FullMethodName     = "/property.v1.PropertyService/DeleteLocality"
	PropertyService_CreateProperty_FullMethodName     = "/property.v1.PropertyService/CreateProperty"
	PropertyService_UpdateProperty_FullMethodName     = "/property.v1.PropertyService/UpdateProperty"
	PropertyService_DeleteProperty_FullMethodName     = "/property.v1.PropertyService/DeleteProperty"
	PropertyService_StateOfProperty_FullMethodName    = "/property.v1.PropertyService/StateOfProperty"
	PropertyService_HistoryOfProperty_FullMethodName  = "/property.v1.PropertyService/HistoryOfProperty"
	PropertyService_SearchProperty_FullMethodName     = "/property.v1.PropertyService/SearchProperty"
	PropertyService_ListSubscription_FullMethodName   = "/property.v1.PropertyService/ListSubscription"
	PropertyService_AddSubscription_FullMethodName    = "/property.v1.PropertyService/AddSubscription"
	PropertyService_DeleteSubscription_FullMethodName = "/property.v1.PropertyService/DeleteSubscription"
)

// PropertyServiceClient is the Client API for PropertyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyServiceClient interface {
	// Create method for adding a new property type into the system
	AddPropertyType(ctx context.Context, in *AddPropertyTypeRequest, opts ...grpc.CallOption) (*AddPropertyTypeResponse, error)
	// List method for showing all property types in the system
	ListPropertyType(ctx context.Context, in *ListPropertyTypeRequest, opts ...grpc.CallOption) (PropertyService_ListPropertyTypeClient, error)
	// Create method for adding a new locality into the system
	AddLocality(ctx context.Context, in *AddLocalityRequest, opts ...grpc.CallOption) (*AddLocalityResponse, error)
	// Delete method for removing an existing locality from the system
	DeleteLocality(ctx context.Context, in *DeleteLocalityRequest, opts ...grpc.CallOption) (*DeleteLocalityResponse, error)
	// Create method for adding a new property into the system
	CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error)
	// Update property request to modify its current form to another
	UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error)
	// Delete property request to modify its current form to another
	DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error)
	// State request to determine active state and status of a property
	StateOfProperty(ctx context.Context, in *StateOfPropertyRequest, opts ...grpc.CallOption) (*StateOfPropertyResponse, error)
	// History request returns all the state transitions a property has had over its lifetime in the system
	HistoryOfProperty(ctx context.Context, in *HistoryOfPropertyRequest, opts ...grpc.CallOption) (PropertyService_HistoryOfPropertyClient, error)
	// Search method is for Client request to query for properties that match query
	SearchProperty(ctx context.Context, in *SearchPropertyRequest, opts ...grpc.CallOption) (PropertyService_SearchPropertyClient, error)
	// ListSubscriptions for a particular property
	ListSubscription(ctx context.Context, in *ListSubscriptionRequest, opts ...grpc.CallOption) (PropertyService_ListSubscriptionClient, error)
	// AddSubscription for a profile to a property
	AddSubscription(ctx context.Context, in *AddSubscriptionRequest, opts ...grpc.CallOption) (*AddSubscriptionResponse, error)
	// Delete subscription of profile to a property
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
}

type propertyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyServiceClient(cc grpc.ClientConnInterface) PropertyServiceClient {
	return &propertyServiceClient{cc}
}

func (c *propertyServiceClient) AddPropertyType(ctx context.Context, in *AddPropertyTypeRequest, opts ...grpc.CallOption) (*AddPropertyTypeResponse, error) {
	out := new(AddPropertyTypeResponse)
	err := c.cc.Invoke(ctx, PropertyService_AddPropertyType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) ListPropertyType(ctx context.Context, in *ListPropertyTypeRequest, opts ...grpc.CallOption) (PropertyService_ListPropertyTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PropertyService_ServiceDesc.Streams[0], PropertyService_ListPropertyType_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &propertyServiceListPropertyTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PropertyService_ListPropertyTypeClient interface {
	Recv() (*ListPropertyTypeResponse, error)
	grpc.ClientStream
}

type propertyServiceListPropertyTypeClient struct {
	grpc.ClientStream
}

func (x *propertyServiceListPropertyTypeClient) Recv() (*ListPropertyTypeResponse, error) {
	m := new(ListPropertyTypeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *propertyServiceClient) AddLocality(ctx context.Context, in *AddLocalityRequest, opts ...grpc.CallOption) (*AddLocalityResponse, error) {
	out := new(AddLocalityResponse)
	err := c.cc.Invoke(ctx, PropertyService_AddLocality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) DeleteLocality(ctx context.Context, in *DeleteLocalityRequest, opts ...grpc.CallOption) (*DeleteLocalityResponse, error) {
	out := new(DeleteLocalityResponse)
	err := c.cc.Invoke(ctx, PropertyService_DeleteLocality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error) {
	out := new(CreatePropertyResponse)
	err := c.cc.Invoke(ctx, PropertyService_CreateProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error) {
	out := new(UpdatePropertyResponse)
	err := c.cc.Invoke(ctx, PropertyService_UpdateProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error) {
	out := new(DeletePropertyResponse)
	err := c.cc.Invoke(ctx, PropertyService_DeleteProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) StateOfProperty(ctx context.Context, in *StateOfPropertyRequest, opts ...grpc.CallOption) (*StateOfPropertyResponse, error) {
	out := new(StateOfPropertyResponse)
	err := c.cc.Invoke(ctx, PropertyService_StateOfProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) HistoryOfProperty(ctx context.Context, in *HistoryOfPropertyRequest, opts ...grpc.CallOption) (PropertyService_HistoryOfPropertyClient, error) {
	stream, err := c.cc.NewStream(ctx, &PropertyService_ServiceDesc.Streams[1], PropertyService_HistoryOfProperty_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &propertyServiceHistoryOfPropertyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PropertyService_HistoryOfPropertyClient interface {
	Recv() (*HistoryOfPropertyResponse, error)
	grpc.ClientStream
}

type propertyServiceHistoryOfPropertyClient struct {
	grpc.ClientStream
}

func (x *propertyServiceHistoryOfPropertyClient) Recv() (*HistoryOfPropertyResponse, error) {
	m := new(HistoryOfPropertyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *propertyServiceClient) SearchProperty(ctx context.Context, in *SearchPropertyRequest, opts ...grpc.CallOption) (PropertyService_SearchPropertyClient, error) {
	stream, err := c.cc.NewStream(ctx, &PropertyService_ServiceDesc.Streams[2], PropertyService_SearchProperty_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &propertyServiceSearchPropertyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PropertyService_SearchPropertyClient interface {
	Recv() (*SearchPropertyResponse, error)
	grpc.ClientStream
}

type propertyServiceSearchPropertyClient struct {
	grpc.ClientStream
}

func (x *propertyServiceSearchPropertyClient) Recv() (*SearchPropertyResponse, error) {
	m := new(SearchPropertyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *propertyServiceClient) ListSubscription(ctx context.Context, in *ListSubscriptionRequest, opts ...grpc.CallOption) (PropertyService_ListSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &PropertyService_ServiceDesc.Streams[3], PropertyService_ListSubscription_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &propertyServiceListSubscriptionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PropertyService_ListSubscriptionClient interface {
	Recv() (*ListSubscriptionResponse, error)
	grpc.ClientStream
}

type propertyServiceListSubscriptionClient struct {
	grpc.ClientStream
}

func (x *propertyServiceListSubscriptionClient) Recv() (*ListSubscriptionResponse, error) {
	m := new(ListSubscriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *propertyServiceClient) AddSubscription(ctx context.Context, in *AddSubscriptionRequest, opts ...grpc.CallOption) (*AddSubscriptionResponse, error) {
	out := new(AddSubscriptionResponse)
	err := c.cc.Invoke(ctx, PropertyService_AddSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, PropertyService_DeleteSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyServiceServer is the server API for PropertyService service.
// All implementations must embed UnimplementedPropertyServiceServer
// for forward compatibility
type PropertyServiceServer interface {
	// Create method for adding a new property type into the system
	AddPropertyType(context.Context, *AddPropertyTypeRequest) (*AddPropertyTypeResponse, error)
	// List method for showing all property types in the system
	ListPropertyType(*ListPropertyTypeRequest, PropertyService_ListPropertyTypeServer) error
	// Create method for adding a new locality into the system
	AddLocality(context.Context, *AddLocalityRequest) (*AddLocalityResponse, error)
	// Delete method for removing an existing locality from the system
	DeleteLocality(context.Context, *DeleteLocalityRequest) (*DeleteLocalityResponse, error)
	// Create method for adding a new property into the system
	CreateProperty(context.Context, *CreatePropertyRequest) (*CreatePropertyResponse, error)
	// Update property request to modify its current form to another
	UpdateProperty(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error)
	// Delete property request to modify its current form to another
	DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error)
	// State request to determine active state and status of a property
	StateOfProperty(context.Context, *StateOfPropertyRequest) (*StateOfPropertyResponse, error)
	// History request returns all the state transitions a property has had over its lifetime in the system
	HistoryOfProperty(*HistoryOfPropertyRequest, PropertyService_HistoryOfPropertyServer) error
	// Search method is for Client request to query for properties that match query
	SearchProperty(*SearchPropertyRequest, PropertyService_SearchPropertyServer) error
	// ListSubscriptions for a particular property
	ListSubscription(*ListSubscriptionRequest, PropertyService_ListSubscriptionServer) error
	// AddSubscription for a profile to a property
	AddSubscription(context.Context, *AddSubscriptionRequest) (*AddSubscriptionResponse, error)
	// Delete subscription of profile to a property
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	mustEmbedUnimplementedPropertyServiceServer()
}

// UnimplementedPropertyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyServiceServer struct {
}

func (UnimplementedPropertyServiceServer) AddPropertyType(context.Context, *AddPropertyTypeRequest) (*AddPropertyTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPropertyType not implemented")
}
func (UnimplementedPropertyServiceServer) ListPropertyType(*ListPropertyTypeRequest, PropertyService_ListPropertyTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPropertyType not implemented")
}
func (UnimplementedPropertyServiceServer) AddLocality(context.Context, *AddLocalityRequest) (*AddLocalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLocality not implemented")
}
func (UnimplementedPropertyServiceServer) DeleteLocality(context.Context, *DeleteLocalityRequest) (*DeleteLocalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocality not implemented")
}
func (UnimplementedPropertyServiceServer) CreateProperty(context.Context, *CreatePropertyRequest) (*CreatePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProperty not implemented")
}
func (UnimplementedPropertyServiceServer) UpdateProperty(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProperty not implemented")
}
func (UnimplementedPropertyServiceServer) DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
}
func (UnimplementedPropertyServiceServer) StateOfProperty(context.Context, *StateOfPropertyRequest) (*StateOfPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateOfProperty not implemented")
}
func (UnimplementedPropertyServiceServer) HistoryOfProperty(*HistoryOfPropertyRequest, PropertyService_HistoryOfPropertyServer) error {
	return status.Errorf(codes.Unimplemented, "method HistoryOfProperty not implemented")
}
func (UnimplementedPropertyServiceServer) SearchProperty(*SearchPropertyRequest, PropertyService_SearchPropertyServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchProperty not implemented")
}
func (UnimplementedPropertyServiceServer) ListSubscription(*ListSubscriptionRequest, PropertyService_ListSubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSubscription not implemented")
}
func (UnimplementedPropertyServiceServer) AddSubscription(context.Context, *AddSubscriptionRequest) (*AddSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscription not implemented")
}
func (UnimplementedPropertyServiceServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedPropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {}

// UnsafePropertyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyServiceServer will
// result in compilation errors.
type UnsafePropertyServiceServer interface {
	mustEmbedUnimplementedPropertyServiceServer()
}

func RegisterPropertyServiceServer(s grpc.ServiceRegistrar, srv PropertyServiceServer) {
	s.RegisterService(&PropertyService_ServiceDesc, srv)
}

func _PropertyService_AddPropertyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPropertyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).AddPropertyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_AddPropertyType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).AddPropertyType(ctx, req.(*AddPropertyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_ListPropertyType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPropertyTypeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PropertyServiceServer).ListPropertyType(m, &propertyServiceListPropertyTypeServer{stream})
}

type PropertyService_ListPropertyTypeServer interface {
	Send(*ListPropertyTypeResponse) error
	grpc.ServerStream
}

type propertyServiceListPropertyTypeServer struct {
	grpc.ServerStream
}

func (x *propertyServiceListPropertyTypeServer) Send(m *ListPropertyTypeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PropertyService_AddLocality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLocalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).AddLocality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_AddLocality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).AddLocality(ctx, req.(*AddLocalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_DeleteLocality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).DeleteLocality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_DeleteLocality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).DeleteLocality(ctx, req.(*DeleteLocalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_CreateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).CreateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_CreateProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).CreateProperty(ctx, req.(*CreatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_UpdateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).UpdateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_UpdateProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).UpdateProperty(ctx, req.(*UpdatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_DeleteProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_DeleteProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).DeleteProperty(ctx, req.(*DeletePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_StateOfProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateOfPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).StateOfProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_StateOfProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).StateOfProperty(ctx, req.(*StateOfPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_HistoryOfProperty_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoryOfPropertyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PropertyServiceServer).HistoryOfProperty(m, &propertyServiceHistoryOfPropertyServer{stream})
}

type PropertyService_HistoryOfPropertyServer interface {
	Send(*HistoryOfPropertyResponse) error
	grpc.ServerStream
}

type propertyServiceHistoryOfPropertyServer struct {
	grpc.ServerStream
}

func (x *propertyServiceHistoryOfPropertyServer) Send(m *HistoryOfPropertyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PropertyService_SearchProperty_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchPropertyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PropertyServiceServer).SearchProperty(m, &propertyServiceSearchPropertyServer{stream})
}

type PropertyService_SearchPropertyServer interface {
	Send(*SearchPropertyResponse) error
	grpc.ServerStream
}

type propertyServiceSearchPropertyServer struct {
	grpc.ServerStream
}

func (x *propertyServiceSearchPropertyServer) Send(m *SearchPropertyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PropertyService_ListSubscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PropertyServiceServer).ListSubscription(m, &propertyServiceListSubscriptionServer{stream})
}

type PropertyService_ListSubscriptionServer interface {
	Send(*ListSubscriptionResponse) error
	grpc.ServerStream
}

type propertyServiceListSubscriptionServer struct {
	grpc.ServerStream
}

func (x *propertyServiceListSubscriptionServer) Send(m *ListSubscriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PropertyService_AddSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).AddSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_AddSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).AddSubscription(ctx, req.(*AddSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_DeleteSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyService_ServiceDesc is the grpc.ServiceDesc for PropertyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "property.v1.PropertyService",
	HandlerType: (*PropertyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPropertyType",
			Handler:    _PropertyService_AddPropertyType_Handler,
		},
		{
			MethodName: "AddLocality",
			Handler:    _PropertyService_AddLocality_Handler,
		},
		{
			MethodName: "DeleteLocality",
			Handler:    _PropertyService_DeleteLocality_Handler,
		},
		{
			MethodName: "CreateProperty",
			Handler:    _PropertyService_CreateProperty_Handler,
		},
		{
			MethodName: "UpdateProperty",
			Handler:    _PropertyService_UpdateProperty_Handler,
		},
		{
			MethodName: "DeleteProperty",
			Handler:    _PropertyService_DeleteProperty_Handler,
		},
		{
			MethodName: "StateOfProperty",
			Handler:    _PropertyService_StateOfProperty_Handler,
		},
		{
			MethodName: "AddSubscription",
			Handler:    _PropertyService_AddSubscription_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _PropertyService_DeleteSubscription_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPropertyType",
			Handler:       _PropertyService_ListPropertyType_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HistoryOfProperty",
			Handler:       _PropertyService_HistoryOfProperty_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchProperty",
			Handler:       _PropertyService_SearchProperty_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSubscription",
			Handler:       _PropertyService_ListSubscription_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "property/v1/property.proto",
}
