// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: property/v1/property.proto

package propertyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/antinvestor/apis/go/property/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PropertyServiceName is the fully-qualified name of the PropertyService service.
	PropertyServiceName = "property.v1.PropertyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PropertyServiceAddPropertyTypeProcedure is the fully-qualified name of the PropertyService's
	// AddPropertyType RPC.
	PropertyServiceAddPropertyTypeProcedure = "/property.v1.PropertyService/AddPropertyType"
	// PropertyServiceListPropertyTypeProcedure is the fully-qualified name of the PropertyService's
	// ListPropertyType RPC.
	PropertyServiceListPropertyTypeProcedure = "/property.v1.PropertyService/ListPropertyType"
	// PropertyServiceAddLocalityProcedure is the fully-qualified name of the PropertyService's
	// AddLocality RPC.
	PropertyServiceAddLocalityProcedure = "/property.v1.PropertyService/AddLocality"
	// PropertyServiceDeleteLocalityProcedure is the fully-qualified name of the PropertyService's
	// DeleteLocality RPC.
	PropertyServiceDeleteLocalityProcedure = "/property.v1.PropertyService/DeleteLocality"
	// PropertyServiceCreatePropertyProcedure is the fully-qualified name of the PropertyService's
	// CreateProperty RPC.
	PropertyServiceCreatePropertyProcedure = "/property.v1.PropertyService/CreateProperty"
	// PropertyServiceUpdatePropertyProcedure is the fully-qualified name of the PropertyService's
	// UpdateProperty RPC.
	PropertyServiceUpdatePropertyProcedure = "/property.v1.PropertyService/UpdateProperty"
	// PropertyServiceDeletePropertyProcedure is the fully-qualified name of the PropertyService's
	// DeleteProperty RPC.
	PropertyServiceDeletePropertyProcedure = "/property.v1.PropertyService/DeleteProperty"
	// PropertyServiceStateOfPropertyProcedure is the fully-qualified name of the PropertyService's
	// StateOfProperty RPC.
	PropertyServiceStateOfPropertyProcedure = "/property.v1.PropertyService/StateOfProperty"
	// PropertyServiceHistoryOfPropertyProcedure is the fully-qualified name of the PropertyService's
	// HistoryOfProperty RPC.
	PropertyServiceHistoryOfPropertyProcedure = "/property.v1.PropertyService/HistoryOfProperty"
	// PropertyServiceSearchPropertyProcedure is the fully-qualified name of the PropertyService's
	// SearchProperty RPC.
	PropertyServiceSearchPropertyProcedure = "/property.v1.PropertyService/SearchProperty"
	// PropertyServiceListSubscriptionProcedure is the fully-qualified name of the PropertyService's
	// ListSubscription RPC.
	PropertyServiceListSubscriptionProcedure = "/property.v1.PropertyService/ListSubscription"
	// PropertyServiceAddSubscriptionProcedure is the fully-qualified name of the PropertyService's
	// AddSubscription RPC.
	PropertyServiceAddSubscriptionProcedure = "/property.v1.PropertyService/AddSubscription"
	// PropertyServiceDeleteSubscriptionProcedure is the fully-qualified name of the PropertyService's
	// DeleteSubscription RPC.
	PropertyServiceDeleteSubscriptionProcedure = "/property.v1.PropertyService/DeleteSubscription"
)

// PropertyServiceClient is a client for the property.v1.PropertyService service.
type PropertyServiceClient interface {
	// AddPropertyType creates a new property type classification.
	AddPropertyType(context.Context, *connect.Request[v1.AddPropertyTypeRequest]) (*connect.Response[v1.AddPropertyTypeResponse], error)
	// ListPropertyType retrieves all property types.
	ListPropertyType(context.Context, *connect.Request[v1.ListPropertyTypeRequest]) (*connect.ServerStreamForClient[v1.ListPropertyTypeResponse], error)
	// AddLocality creates a new geographic locality.
	AddLocality(context.Context, *connect.Request[v1.AddLocalityRequest]) (*connect.Response[v1.AddLocalityResponse], error)
	// DeleteLocality removes a locality from the system.
	DeleteLocality(context.Context, *connect.Request[v1.DeleteLocalityRequest]) (*connect.Response[v1.DeleteLocalityResponse], error)
	// CreateProperty creates a new property.
	CreateProperty(context.Context, *connect.Request[v1.CreatePropertyRequest]) (*connect.Response[v1.CreatePropertyResponse], error)
	// UpdateProperty updates an existing property.
	UpdateProperty(context.Context, *connect.Request[v1.UpdatePropertyRequest]) (*connect.Response[v1.UpdatePropertyResponse], error)
	// DeleteProperty removes a property from the system.
	DeleteProperty(context.Context, *connect.Request[v1.DeletePropertyRequest]) (*connect.Response[v1.DeletePropertyResponse], error)
	// StateOfProperty retrieves the current state of a property.
	StateOfProperty(context.Context, *connect.Request[v1.StateOfPropertyRequest]) (*connect.Response[v1.StateOfPropertyResponse], error)
	// HistoryOfProperty retrieves the complete state history.
	HistoryOfProperty(context.Context, *connect.Request[v1.HistoryOfPropertyRequest]) (*connect.ServerStreamForClient[v1.HistoryOfPropertyResponse], error)
	// SearchProperty finds properties matching criteria.
	SearchProperty(context.Context, *connect.Request[v1.SearchPropertyRequest]) (*connect.ServerStreamForClient[v1.SearchPropertyResponse], error)
	// ListSubscription retrieves subscriptions for a property.
	ListSubscription(context.Context, *connect.Request[v1.ListSubscriptionRequest]) (*connect.ServerStreamForClient[v1.ListSubscriptionResponse], error)
	// AddSubscription grants a profile access to a property.
	AddSubscription(context.Context, *connect.Request[v1.AddSubscriptionRequest]) (*connect.Response[v1.AddSubscriptionResponse], error)
	// DeleteSubscription revokes a profile's access to a property.
	DeleteSubscription(context.Context, *connect.Request[v1.DeleteSubscriptionRequest]) (*connect.Response[v1.DeleteSubscriptionResponse], error)
}

// NewPropertyServiceClient constructs a client for the property.v1.PropertyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPropertyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PropertyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	propertyServiceMethods := v1.File_property_v1_property_proto.Services().ByName("PropertyService").Methods()
	return &propertyServiceClient{
		addPropertyType: connect.NewClient[v1.AddPropertyTypeRequest, v1.AddPropertyTypeResponse](
			httpClient,
			baseURL+PropertyServiceAddPropertyTypeProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("AddPropertyType")),
			connect.WithClientOptions(opts...),
		),
		listPropertyType: connect.NewClient[v1.ListPropertyTypeRequest, v1.ListPropertyTypeResponse](
			httpClient,
			baseURL+PropertyServiceListPropertyTypeProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("ListPropertyType")),
			connect.WithClientOptions(opts...),
		),
		addLocality: connect.NewClient[v1.AddLocalityRequest, v1.AddLocalityResponse](
			httpClient,
			baseURL+PropertyServiceAddLocalityProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("AddLocality")),
			connect.WithClientOptions(opts...),
		),
		deleteLocality: connect.NewClient[v1.DeleteLocalityRequest, v1.DeleteLocalityResponse](
			httpClient,
			baseURL+PropertyServiceDeleteLocalityProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("DeleteLocality")),
			connect.WithClientOptions(opts...),
		),
		createProperty: connect.NewClient[v1.CreatePropertyRequest, v1.CreatePropertyResponse](
			httpClient,
			baseURL+PropertyServiceCreatePropertyProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("CreateProperty")),
			connect.WithClientOptions(opts...),
		),
		updateProperty: connect.NewClient[v1.UpdatePropertyRequest, v1.UpdatePropertyResponse](
			httpClient,
			baseURL+PropertyServiceUpdatePropertyProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("UpdateProperty")),
			connect.WithClientOptions(opts...),
		),
		deleteProperty: connect.NewClient[v1.DeletePropertyRequest, v1.DeletePropertyResponse](
			httpClient,
			baseURL+PropertyServiceDeletePropertyProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("DeleteProperty")),
			connect.WithClientOptions(opts...),
		),
		stateOfProperty: connect.NewClient[v1.StateOfPropertyRequest, v1.StateOfPropertyResponse](
			httpClient,
			baseURL+PropertyServiceStateOfPropertyProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("StateOfProperty")),
			connect.WithClientOptions(opts...),
		),
		historyOfProperty: connect.NewClient[v1.HistoryOfPropertyRequest, v1.HistoryOfPropertyResponse](
			httpClient,
			baseURL+PropertyServiceHistoryOfPropertyProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("HistoryOfProperty")),
			connect.WithClientOptions(opts...),
		),
		searchProperty: connect.NewClient[v1.SearchPropertyRequest, v1.SearchPropertyResponse](
			httpClient,
			baseURL+PropertyServiceSearchPropertyProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("SearchProperty")),
			connect.WithClientOptions(opts...),
		),
		listSubscription: connect.NewClient[v1.ListSubscriptionRequest, v1.ListSubscriptionResponse](
			httpClient,
			baseURL+PropertyServiceListSubscriptionProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("ListSubscription")),
			connect.WithClientOptions(opts...),
		),
		addSubscription: connect.NewClient[v1.AddSubscriptionRequest, v1.AddSubscriptionResponse](
			httpClient,
			baseURL+PropertyServiceAddSubscriptionProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("AddSubscription")),
			connect.WithClientOptions(opts...),
		),
		deleteSubscription: connect.NewClient[v1.DeleteSubscriptionRequest, v1.DeleteSubscriptionResponse](
			httpClient,
			baseURL+PropertyServiceDeleteSubscriptionProcedure,
			connect.WithSchema(propertyServiceMethods.ByName("DeleteSubscription")),
			connect.WithClientOptions(opts...),
		),
	}
}

// propertyServiceClient implements PropertyServiceClient.
type propertyServiceClient struct {
	addPropertyType    *connect.Client[v1.AddPropertyTypeRequest, v1.AddPropertyTypeResponse]
	listPropertyType   *connect.Client[v1.ListPropertyTypeRequest, v1.ListPropertyTypeResponse]
	addLocality        *connect.Client[v1.AddLocalityRequest, v1.AddLocalityResponse]
	deleteLocality     *connect.Client[v1.DeleteLocalityRequest, v1.DeleteLocalityResponse]
	createProperty     *connect.Client[v1.CreatePropertyRequest, v1.CreatePropertyResponse]
	updateProperty     *connect.Client[v1.UpdatePropertyRequest, v1.UpdatePropertyResponse]
	deleteProperty     *connect.Client[v1.DeletePropertyRequest, v1.DeletePropertyResponse]
	stateOfProperty    *connect.Client[v1.StateOfPropertyRequest, v1.StateOfPropertyResponse]
	historyOfProperty  *connect.Client[v1.HistoryOfPropertyRequest, v1.HistoryOfPropertyResponse]
	searchProperty     *connect.Client[v1.SearchPropertyRequest, v1.SearchPropertyResponse]
	listSubscription   *connect.Client[v1.ListSubscriptionRequest, v1.ListSubscriptionResponse]
	addSubscription    *connect.Client[v1.AddSubscriptionRequest, v1.AddSubscriptionResponse]
	deleteSubscription *connect.Client[v1.DeleteSubscriptionRequest, v1.DeleteSubscriptionResponse]
}

// AddPropertyType calls property.v1.PropertyService.AddPropertyType.
func (c *propertyServiceClient) AddPropertyType(ctx context.Context, req *connect.Request[v1.AddPropertyTypeRequest]) (*connect.Response[v1.AddPropertyTypeResponse], error) {
	return c.addPropertyType.CallUnary(ctx, req)
}

// ListPropertyType calls property.v1.PropertyService.ListPropertyType.
func (c *propertyServiceClient) ListPropertyType(ctx context.Context, req *connect.Request[v1.ListPropertyTypeRequest]) (*connect.ServerStreamForClient[v1.ListPropertyTypeResponse], error) {
	return c.listPropertyType.CallServerStream(ctx, req)
}

// AddLocality calls property.v1.PropertyService.AddLocality.
func (c *propertyServiceClient) AddLocality(ctx context.Context, req *connect.Request[v1.AddLocalityRequest]) (*connect.Response[v1.AddLocalityResponse], error) {
	return c.addLocality.CallUnary(ctx, req)
}

// DeleteLocality calls property.v1.PropertyService.DeleteLocality.
func (c *propertyServiceClient) DeleteLocality(ctx context.Context, req *connect.Request[v1.DeleteLocalityRequest]) (*connect.Response[v1.DeleteLocalityResponse], error) {
	return c.deleteLocality.CallUnary(ctx, req)
}

// CreateProperty calls property.v1.PropertyService.CreateProperty.
func (c *propertyServiceClient) CreateProperty(ctx context.Context, req *connect.Request[v1.CreatePropertyRequest]) (*connect.Response[v1.CreatePropertyResponse], error) {
	return c.createProperty.CallUnary(ctx, req)
}

// UpdateProperty calls property.v1.PropertyService.UpdateProperty.
func (c *propertyServiceClient) UpdateProperty(ctx context.Context, req *connect.Request[v1.UpdatePropertyRequest]) (*connect.Response[v1.UpdatePropertyResponse], error) {
	return c.updateProperty.CallUnary(ctx, req)
}

// DeleteProperty calls property.v1.PropertyService.DeleteProperty.
func (c *propertyServiceClient) DeleteProperty(ctx context.Context, req *connect.Request[v1.DeletePropertyRequest]) (*connect.Response[v1.DeletePropertyResponse], error) {
	return c.deleteProperty.CallUnary(ctx, req)
}

// StateOfProperty calls property.v1.PropertyService.StateOfProperty.
func (c *propertyServiceClient) StateOfProperty(ctx context.Context, req *connect.Request[v1.StateOfPropertyRequest]) (*connect.Response[v1.StateOfPropertyResponse], error) {
	return c.stateOfProperty.CallUnary(ctx, req)
}

// HistoryOfProperty calls property.v1.PropertyService.HistoryOfProperty.
func (c *propertyServiceClient) HistoryOfProperty(ctx context.Context, req *connect.Request[v1.HistoryOfPropertyRequest]) (*connect.ServerStreamForClient[v1.HistoryOfPropertyResponse], error) {
	return c.historyOfProperty.CallServerStream(ctx, req)
}

// SearchProperty calls property.v1.PropertyService.SearchProperty.
func (c *propertyServiceClient) SearchProperty(ctx context.Context, req *connect.Request[v1.SearchPropertyRequest]) (*connect.ServerStreamForClient[v1.SearchPropertyResponse], error) {
	return c.searchProperty.CallServerStream(ctx, req)
}

// ListSubscription calls property.v1.PropertyService.ListSubscription.
func (c *propertyServiceClient) ListSubscription(ctx context.Context, req *connect.Request[v1.ListSubscriptionRequest]) (*connect.ServerStreamForClient[v1.ListSubscriptionResponse], error) {
	return c.listSubscription.CallServerStream(ctx, req)
}

// AddSubscription calls property.v1.PropertyService.AddSubscription.
func (c *propertyServiceClient) AddSubscription(ctx context.Context, req *connect.Request[v1.AddSubscriptionRequest]) (*connect.Response[v1.AddSubscriptionResponse], error) {
	return c.addSubscription.CallUnary(ctx, req)
}

// DeleteSubscription calls property.v1.PropertyService.DeleteSubscription.
func (c *propertyServiceClient) DeleteSubscription(ctx context.Context, req *connect.Request[v1.DeleteSubscriptionRequest]) (*connect.Response[v1.DeleteSubscriptionResponse], error) {
	return c.deleteSubscription.CallUnary(ctx, req)
}

// PropertyServiceHandler is an implementation of the property.v1.PropertyService service.
type PropertyServiceHandler interface {
	// AddPropertyType creates a new property type classification.
	AddPropertyType(context.Context, *connect.Request[v1.AddPropertyTypeRequest]) (*connect.Response[v1.AddPropertyTypeResponse], error)
	// ListPropertyType retrieves all property types.
	ListPropertyType(context.Context, *connect.Request[v1.ListPropertyTypeRequest], *connect.ServerStream[v1.ListPropertyTypeResponse]) error
	// AddLocality creates a new geographic locality.
	AddLocality(context.Context, *connect.Request[v1.AddLocalityRequest]) (*connect.Response[v1.AddLocalityResponse], error)
	// DeleteLocality removes a locality from the system.
	DeleteLocality(context.Context, *connect.Request[v1.DeleteLocalityRequest]) (*connect.Response[v1.DeleteLocalityResponse], error)
	// CreateProperty creates a new property.
	CreateProperty(context.Context, *connect.Request[v1.CreatePropertyRequest]) (*connect.Response[v1.CreatePropertyResponse], error)
	// UpdateProperty updates an existing property.
	UpdateProperty(context.Context, *connect.Request[v1.UpdatePropertyRequest]) (*connect.Response[v1.UpdatePropertyResponse], error)
	// DeleteProperty removes a property from the system.
	DeleteProperty(context.Context, *connect.Request[v1.DeletePropertyRequest]) (*connect.Response[v1.DeletePropertyResponse], error)
	// StateOfProperty retrieves the current state of a property.
	StateOfProperty(context.Context, *connect.Request[v1.StateOfPropertyRequest]) (*connect.Response[v1.StateOfPropertyResponse], error)
	// HistoryOfProperty retrieves the complete state history.
	HistoryOfProperty(context.Context, *connect.Request[v1.HistoryOfPropertyRequest], *connect.ServerStream[v1.HistoryOfPropertyResponse]) error
	// SearchProperty finds properties matching criteria.
	SearchProperty(context.Context, *connect.Request[v1.SearchPropertyRequest], *connect.ServerStream[v1.SearchPropertyResponse]) error
	// ListSubscription retrieves subscriptions for a property.
	ListSubscription(context.Context, *connect.Request[v1.ListSubscriptionRequest], *connect.ServerStream[v1.ListSubscriptionResponse]) error
	// AddSubscription grants a profile access to a property.
	AddSubscription(context.Context, *connect.Request[v1.AddSubscriptionRequest]) (*connect.Response[v1.AddSubscriptionResponse], error)
	// DeleteSubscription revokes a profile's access to a property.
	DeleteSubscription(context.Context, *connect.Request[v1.DeleteSubscriptionRequest]) (*connect.Response[v1.DeleteSubscriptionResponse], error)
}

// NewPropertyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPropertyServiceHandler(svc PropertyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	propertyServiceMethods := v1.File_property_v1_property_proto.Services().ByName("PropertyService").Methods()
	propertyServiceAddPropertyTypeHandler := connect.NewUnaryHandler(
		PropertyServiceAddPropertyTypeProcedure,
		svc.AddPropertyType,
		connect.WithSchema(propertyServiceMethods.ByName("AddPropertyType")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceListPropertyTypeHandler := connect.NewServerStreamHandler(
		PropertyServiceListPropertyTypeProcedure,
		svc.ListPropertyType,
		connect.WithSchema(propertyServiceMethods.ByName("ListPropertyType")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceAddLocalityHandler := connect.NewUnaryHandler(
		PropertyServiceAddLocalityProcedure,
		svc.AddLocality,
		connect.WithSchema(propertyServiceMethods.ByName("AddLocality")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceDeleteLocalityHandler := connect.NewUnaryHandler(
		PropertyServiceDeleteLocalityProcedure,
		svc.DeleteLocality,
		connect.WithSchema(propertyServiceMethods.ByName("DeleteLocality")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceCreatePropertyHandler := connect.NewUnaryHandler(
		PropertyServiceCreatePropertyProcedure,
		svc.CreateProperty,
		connect.WithSchema(propertyServiceMethods.ByName("CreateProperty")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceUpdatePropertyHandler := connect.NewUnaryHandler(
		PropertyServiceUpdatePropertyProcedure,
		svc.UpdateProperty,
		connect.WithSchema(propertyServiceMethods.ByName("UpdateProperty")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceDeletePropertyHandler := connect.NewUnaryHandler(
		PropertyServiceDeletePropertyProcedure,
		svc.DeleteProperty,
		connect.WithSchema(propertyServiceMethods.ByName("DeleteProperty")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceStateOfPropertyHandler := connect.NewUnaryHandler(
		PropertyServiceStateOfPropertyProcedure,
		svc.StateOfProperty,
		connect.WithSchema(propertyServiceMethods.ByName("StateOfProperty")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceHistoryOfPropertyHandler := connect.NewServerStreamHandler(
		PropertyServiceHistoryOfPropertyProcedure,
		svc.HistoryOfProperty,
		connect.WithSchema(propertyServiceMethods.ByName("HistoryOfProperty")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceSearchPropertyHandler := connect.NewServerStreamHandler(
		PropertyServiceSearchPropertyProcedure,
		svc.SearchProperty,
		connect.WithSchema(propertyServiceMethods.ByName("SearchProperty")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceListSubscriptionHandler := connect.NewServerStreamHandler(
		PropertyServiceListSubscriptionProcedure,
		svc.ListSubscription,
		connect.WithSchema(propertyServiceMethods.ByName("ListSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceAddSubscriptionHandler := connect.NewUnaryHandler(
		PropertyServiceAddSubscriptionProcedure,
		svc.AddSubscription,
		connect.WithSchema(propertyServiceMethods.ByName("AddSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	propertyServiceDeleteSubscriptionHandler := connect.NewUnaryHandler(
		PropertyServiceDeleteSubscriptionProcedure,
		svc.DeleteSubscription,
		connect.WithSchema(propertyServiceMethods.ByName("DeleteSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	return "/property.v1.PropertyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PropertyServiceAddPropertyTypeProcedure:
			propertyServiceAddPropertyTypeHandler.ServeHTTP(w, r)
		case PropertyServiceListPropertyTypeProcedure:
			propertyServiceListPropertyTypeHandler.ServeHTTP(w, r)
		case PropertyServiceAddLocalityProcedure:
			propertyServiceAddLocalityHandler.ServeHTTP(w, r)
		case PropertyServiceDeleteLocalityProcedure:
			propertyServiceDeleteLocalityHandler.ServeHTTP(w, r)
		case PropertyServiceCreatePropertyProcedure:
			propertyServiceCreatePropertyHandler.ServeHTTP(w, r)
		case PropertyServiceUpdatePropertyProcedure:
			propertyServiceUpdatePropertyHandler.ServeHTTP(w, r)
		case PropertyServiceDeletePropertyProcedure:
			propertyServiceDeletePropertyHandler.ServeHTTP(w, r)
		case PropertyServiceStateOfPropertyProcedure:
			propertyServiceStateOfPropertyHandler.ServeHTTP(w, r)
		case PropertyServiceHistoryOfPropertyProcedure:
			propertyServiceHistoryOfPropertyHandler.ServeHTTP(w, r)
		case PropertyServiceSearchPropertyProcedure:
			propertyServiceSearchPropertyHandler.ServeHTTP(w, r)
		case PropertyServiceListSubscriptionProcedure:
			propertyServiceListSubscriptionHandler.ServeHTTP(w, r)
		case PropertyServiceAddSubscriptionProcedure:
			propertyServiceAddSubscriptionHandler.ServeHTTP(w, r)
		case PropertyServiceDeleteSubscriptionProcedure:
			propertyServiceDeleteSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPropertyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPropertyServiceHandler struct{}

func (UnimplementedPropertyServiceHandler) AddPropertyType(context.Context, *connect.Request[v1.AddPropertyTypeRequest]) (*connect.Response[v1.AddPropertyTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.AddPropertyType is not implemented"))
}

func (UnimplementedPropertyServiceHandler) ListPropertyType(context.Context, *connect.Request[v1.ListPropertyTypeRequest], *connect.ServerStream[v1.ListPropertyTypeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.ListPropertyType is not implemented"))
}

func (UnimplementedPropertyServiceHandler) AddLocality(context.Context, *connect.Request[v1.AddLocalityRequest]) (*connect.Response[v1.AddLocalityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.AddLocality is not implemented"))
}

func (UnimplementedPropertyServiceHandler) DeleteLocality(context.Context, *connect.Request[v1.DeleteLocalityRequest]) (*connect.Response[v1.DeleteLocalityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.DeleteLocality is not implemented"))
}

func (UnimplementedPropertyServiceHandler) CreateProperty(context.Context, *connect.Request[v1.CreatePropertyRequest]) (*connect.Response[v1.CreatePropertyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.CreateProperty is not implemented"))
}

func (UnimplementedPropertyServiceHandler) UpdateProperty(context.Context, *connect.Request[v1.UpdatePropertyRequest]) (*connect.Response[v1.UpdatePropertyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.UpdateProperty is not implemented"))
}

func (UnimplementedPropertyServiceHandler) DeleteProperty(context.Context, *connect.Request[v1.DeletePropertyRequest]) (*connect.Response[v1.DeletePropertyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.DeleteProperty is not implemented"))
}

func (UnimplementedPropertyServiceHandler) StateOfProperty(context.Context, *connect.Request[v1.StateOfPropertyRequest]) (*connect.Response[v1.StateOfPropertyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.StateOfProperty is not implemented"))
}

func (UnimplementedPropertyServiceHandler) HistoryOfProperty(context.Context, *connect.Request[v1.HistoryOfPropertyRequest], *connect.ServerStream[v1.HistoryOfPropertyResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.HistoryOfProperty is not implemented"))
}

func (UnimplementedPropertyServiceHandler) SearchProperty(context.Context, *connect.Request[v1.SearchPropertyRequest], *connect.ServerStream[v1.SearchPropertyResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.SearchProperty is not implemented"))
}

func (UnimplementedPropertyServiceHandler) ListSubscription(context.Context, *connect.Request[v1.ListSubscriptionRequest], *connect.ServerStream[v1.ListSubscriptionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.ListSubscription is not implemented"))
}

func (UnimplementedPropertyServiceHandler) AddSubscription(context.Context, *connect.Request[v1.AddSubscriptionRequest]) (*connect.Response[v1.AddSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.AddSubscription is not implemented"))
}

func (UnimplementedPropertyServiceHandler) DeleteSubscription(context.Context, *connect.Request[v1.DeleteSubscriptionRequest]) (*connect.Response[v1.DeleteSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("property.v1.PropertyService.DeleteSubscription is not implemented"))
}
