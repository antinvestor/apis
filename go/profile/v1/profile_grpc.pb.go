// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: profile/v1/profile.proto

package profilev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProfileService_GetById_FullMethodName            = "/profile.v1.ProfileService/GetById"
	ProfileService_GetByContact_FullMethodName       = "/profile.v1.ProfileService/GetByContact"
	ProfileService_Search_FullMethodName             = "/profile.v1.ProfileService/Search"
	ProfileService_Merge_FullMethodName              = "/profile.v1.ProfileService/Merge"
	ProfileService_Create_FullMethodName             = "/profile.v1.ProfileService/Create"
	ProfileService_Update_FullMethodName             = "/profile.v1.ProfileService/Update"
	ProfileService_AddContact_FullMethodName         = "/profile.v1.ProfileService/AddContact"
	ProfileService_AddAddress_FullMethodName         = "/profile.v1.ProfileService/AddAddress"
	ProfileService_AddRelationship_FullMethodName    = "/profile.v1.ProfileService/AddRelationship"
	ProfileService_DeleteRelationship_FullMethodName = "/profile.v1.ProfileService/DeleteRelationship"
	ProfileService_ListRelationship_FullMethodName   = "/profile.v1.ProfileService/ListRelationship"
)

// ProfileServiceClient is the Client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	// Obtains a profile by its hash
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	// Obtains a profile by its hash
	GetByContact(ctx context.Context, in *GetByContactRequest, opts ...grpc.CallOption) (*GetByContactResponse, error)
	// Obtains a profile by its hash
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (ProfileService_SearchClient, error)
	// Uses data found in the profile from mergeHash to update the current profile.
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error)
	// Creates a new profile based on the request.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Creates a new profile based on the request.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Adds a new contact based on the request/this leads to automatic verification.
	AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error)
	// Adds a new address based on the request.
	AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
	// Adds a new relationship between different proiles.
	AddRelationship(ctx context.Context, in *AddRelationshipRequest, opts ...grpc.CallOption) (*AddRelationshipResponse, error)
	// Remove an existing relationship between profiles.
	DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error)
	// Lists relationships a profile has.
	ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (ProfileService_ListRelationshipClient, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetByContact(ctx context.Context, in *GetByContactRequest, opts ...grpc.CallOption) (*GetByContactResponse, error) {
	out := new(GetByContactResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetByContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (ProfileService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[0], ProfileService_Search_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type profileServiceSearchClient struct {
	grpc.ClientStream
}

func (x *profileServiceSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error) {
	out := new(MergeResponse)
	err := c.cc.Invoke(ctx, ProfileService_Merge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ProfileService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ProfileService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error) {
	out := new(AddContactResponse)
	err := c.cc.Invoke(ctx, ProfileService_AddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	out := new(AddAddressResponse)
	err := c.cc.Invoke(ctx, ProfileService_AddAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddRelationship(ctx context.Context, in *AddRelationshipRequest, opts ...grpc.CallOption) (*AddRelationshipResponse, error) {
	out := new(AddRelationshipResponse)
	err := c.cc.Invoke(ctx, ProfileService_AddRelationship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error) {
	out := new(DeleteRelationshipResponse)
	err := c.cc.Invoke(ctx, ProfileService_DeleteRelationship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (ProfileService_ListRelationshipClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[1], ProfileService_ListRelationship_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceListRelationshipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_ListRelationshipClient interface {
	Recv() (*ListRelationshipResponse, error)
	grpc.ClientStream
}

type profileServiceListRelationshipClient struct {
	grpc.ClientStream
}

func (x *profileServiceListRelationshipClient) Recv() (*ListRelationshipResponse, error) {
	m := new(ListRelationshipResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	// Obtains a profile by its hash
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// Obtains a profile by its hash
	GetByContact(context.Context, *GetByContactRequest) (*GetByContactResponse, error)
	// Obtains a profile by its hash
	Search(*SearchRequest, ProfileService_SearchServer) error
	// Uses data found in the profile from mergeHash to update the current profile.
	Merge(context.Context, *MergeRequest) (*MergeResponse, error)
	// Creates a new profile based on the request.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Creates a new profile based on the request.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Adds a new contact based on the request/this leads to automatic verification.
	AddContact(context.Context, *AddContactRequest) (*AddContactResponse, error)
	// Adds a new address based on the request.
	AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error)
	// Adds a new relationship between different proiles.
	AddRelationship(context.Context, *AddRelationshipRequest) (*AddRelationshipResponse, error)
	// Remove an existing relationship between profiles.
	DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error)
	// Lists relationships a profile has.
	ListRelationship(*ListRelationshipRequest, ProfileService_ListRelationshipServer) error
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (UnimplementedProfileServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedProfileServiceServer) GetByContact(context.Context, *GetByContactRequest) (*GetByContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByContact not implemented")
}
func (UnimplementedProfileServiceServer) Search(*SearchRequest, ProfileService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedProfileServiceServer) Merge(context.Context, *MergeRequest) (*MergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedProfileServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProfileServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProfileServiceServer) AddContact(context.Context, *AddContactRequest) (*AddContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (UnimplementedProfileServiceServer) AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedProfileServiceServer) AddRelationship(context.Context, *AddRelationshipRequest) (*AddRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRelationship not implemented")
}
func (UnimplementedProfileServiceServer) DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationship not implemented")
}
func (UnimplementedProfileServiceServer) ListRelationship(*ListRelationshipRequest, ProfileService_ListRelationshipServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRelationship not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetByContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetByContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetByContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetByContact(ctx, req.(*GetByContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).Search(m, &profileServiceSearchServer{stream})
}

type ProfileService_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type profileServiceSearchServer struct {
	grpc.ServerStream
}

func (x *profileServiceSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_Merge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddContact(ctx, req.(*AddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddRelationship(ctx, req.(*AddRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_DeleteRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteRelationship(ctx, req.(*DeleteRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListRelationship_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRelationshipRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).ListRelationship(m, &profileServiceListRelationshipServer{stream})
}

type ProfileService_ListRelationshipServer interface {
	Send(*ListRelationshipResponse) error
	grpc.ServerStream
}

type profileServiceListRelationshipServer struct {
	grpc.ServerStream
}

func (x *profileServiceListRelationshipServer) Send(m *ListRelationshipResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.v1.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _ProfileService_GetById_Handler,
		},
		{
			MethodName: "GetByContact",
			Handler:    _ProfileService_GetByContact_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _ProfileService_Merge_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProfileService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProfileService_Update_Handler,
		},
		{
			MethodName: "AddContact",
			Handler:    _ProfileService_AddContact_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _ProfileService_AddAddress_Handler,
		},
		{
			MethodName: "AddRelationship",
			Handler:    _ProfileService_AddRelationship_Handler,
		},
		{
			MethodName: "DeleteRelationship",
			Handler:    _ProfileService_DeleteRelationship_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _ProfileService_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRelationship",
			Handler:       _ProfileService_ListRelationship_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "profile/v1/profile.proto",
}
