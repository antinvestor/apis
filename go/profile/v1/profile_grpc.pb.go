// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: profile/v1/profile.proto

package profilev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileService_GetById_FullMethodName                   = "/profile.v1.ProfileService/GetById"
	ProfileService_GetByContact_FullMethodName              = "/profile.v1.ProfileService/GetByContact"
	ProfileService_Search_FullMethodName                    = "/profile.v1.ProfileService/Search"
	ProfileService_Merge_FullMethodName                     = "/profile.v1.ProfileService/Merge"
	ProfileService_Create_FullMethodName                    = "/profile.v1.ProfileService/Create"
	ProfileService_Update_FullMethodName                    = "/profile.v1.ProfileService/Update"
	ProfileService_AddContact_FullMethodName                = "/profile.v1.ProfileService/AddContact"
	ProfileService_CreateContact_FullMethodName             = "/profile.v1.ProfileService/CreateContact"
	ProfileService_CreateContactVerification_FullMethodName = "/profile.v1.ProfileService/CreateContactVerification"
	ProfileService_CheckVerification_FullMethodName         = "/profile.v1.ProfileService/CheckVerification"
	ProfileService_RemoveContact_FullMethodName             = "/profile.v1.ProfileService/RemoveContact"
	ProfileService_SearchRoster_FullMethodName              = "/profile.v1.ProfileService/SearchRoster"
	ProfileService_AddRoster_FullMethodName                 = "/profile.v1.ProfileService/AddRoster"
	ProfileService_RemoveRoster_FullMethodName              = "/profile.v1.ProfileService/RemoveRoster"
	ProfileService_AddAddress_FullMethodName                = "/profile.v1.ProfileService/AddAddress"
	ProfileService_AddRelationship_FullMethodName           = "/profile.v1.ProfileService/AddRelationship"
	ProfileService_DeleteRelationship_FullMethodName        = "/profile.v1.ProfileService/DeleteRelationship"
	ProfileService_ListRelationship_FullMethodName          = "/profile.v1.ProfileService/ListRelationship"
)

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProfileService manages user and entity profiles.
// All RPCs require authentication via Bearer token.
type ProfileServiceClient interface {
	// GetById retrieves a profile by its unique ID.
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	// GetByContact retrieves a profile by contact information.
	GetByContact(ctx context.Context, in *GetByContactRequest, opts ...grpc.CallOption) (*GetByContactResponse, error)
	// Search finds profiles matching specified criteria.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchResponse], error)
	// Merge combines two profiles into one.
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error)
	// Create creates a new profile.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Update updates an existing profile's properties.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// AddContact adds a new contact to a profile with automatic verification.
	AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error)
	// CreateContact creates a standalone contact not linked to a profile.
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	// CreateContactVerification initiates contact verification.
	CreateContactVerification(ctx context.Context, in *CreateContactVerificationRequest, opts ...grpc.CallOption) (*CreateContactVerificationResponse, error)
	// CheckVerification verifies a contact using the provided code.
	CheckVerification(ctx context.Context, in *CheckVerificationRequest, opts ...grpc.CallOption) (*CheckVerificationResponse, error)
	// RemoveContact removes a contact from a profile.
	RemoveContact(ctx context.Context, in *RemoveContactRequest, opts ...grpc.CallOption) (*RemoveContactResponse, error)
	// SearchRoster searches a user's contact roster.
	SearchRoster(ctx context.Context, in *SearchRosterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchRosterResponse], error)
	// AddRoster adds multiple contacts to a user's roster.
	AddRoster(ctx context.Context, in *AddRosterRequest, opts ...grpc.CallOption) (*AddRosterResponse, error)
	// RemoveRoster removes a contact from a user's roster.
	RemoveRoster(ctx context.Context, in *RemoveRosterRequest, opts ...grpc.CallOption) (*RemoveRosterResponse, error)
	// AddAddress adds a new address to a profile.
	AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
	// AddRelationship creates a relationship between profiles.
	AddRelationship(ctx context.Context, in *AddRelationshipRequest, opts ...grpc.CallOption) (*AddRelationshipResponse, error)
	// DeleteRelationship removes a relationship between profiles.
	DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error)
	// ListRelationship lists all relationships for a profile.
	ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListRelationshipResponse], error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetByContact(ctx context.Context, in *GetByContactRequest, opts ...grpc.CallOption) (*GetByContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByContactResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetByContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[0], ProfileService_Search_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchRequest, SearchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileService_SearchClient = grpc.ServerStreamingClient[SearchResponse]

func (c *profileServiceClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeResponse)
	err := c.cc.Invoke(ctx, ProfileService_Merge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ProfileService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ProfileService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddContactResponse)
	err := c.cc.Invoke(ctx, ProfileService_AddContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContactResponse)
	err := c.cc.Invoke(ctx, ProfileService_CreateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CreateContactVerification(ctx context.Context, in *CreateContactVerificationRequest, opts ...grpc.CallOption) (*CreateContactVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContactVerificationResponse)
	err := c.cc.Invoke(ctx, ProfileService_CreateContactVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CheckVerification(ctx context.Context, in *CheckVerificationRequest, opts ...grpc.CallOption) (*CheckVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckVerificationResponse)
	err := c.cc.Invoke(ctx, ProfileService_CheckVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) RemoveContact(ctx context.Context, in *RemoveContactRequest, opts ...grpc.CallOption) (*RemoveContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveContactResponse)
	err := c.cc.Invoke(ctx, ProfileService_RemoveContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SearchRoster(ctx context.Context, in *SearchRosterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchRosterResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[1], ProfileService_SearchRoster_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchRosterRequest, SearchRosterResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileService_SearchRosterClient = grpc.ServerStreamingClient[SearchRosterResponse]

func (c *profileServiceClient) AddRoster(ctx context.Context, in *AddRosterRequest, opts ...grpc.CallOption) (*AddRosterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRosterResponse)
	err := c.cc.Invoke(ctx, ProfileService_AddRoster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) RemoveRoster(ctx context.Context, in *RemoveRosterRequest, opts ...grpc.CallOption) (*RemoveRosterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRosterResponse)
	err := c.cc.Invoke(ctx, ProfileService_RemoveRoster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAddressResponse)
	err := c.cc.Invoke(ctx, ProfileService_AddAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddRelationship(ctx context.Context, in *AddRelationshipRequest, opts ...grpc.CallOption) (*AddRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRelationshipResponse)
	err := c.cc.Invoke(ctx, ProfileService_AddRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRelationshipResponse)
	err := c.cc.Invoke(ctx, ProfileService_DeleteRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListRelationshipResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[2], ProfileService_ListRelationship_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRelationshipRequest, ListRelationshipResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileService_ListRelationshipClient = grpc.ServerStreamingClient[ListRelationshipResponse]

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility.
//
// ProfileService manages user and entity profiles.
// All RPCs require authentication via Bearer token.
type ProfileServiceServer interface {
	// GetById retrieves a profile by its unique ID.
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// GetByContact retrieves a profile by contact information.
	GetByContact(context.Context, *GetByContactRequest) (*GetByContactResponse, error)
	// Search finds profiles matching specified criteria.
	Search(*SearchRequest, grpc.ServerStreamingServer[SearchResponse]) error
	// Merge combines two profiles into one.
	Merge(context.Context, *MergeRequest) (*MergeResponse, error)
	// Create creates a new profile.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Update updates an existing profile's properties.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// AddContact adds a new contact to a profile with automatic verification.
	AddContact(context.Context, *AddContactRequest) (*AddContactResponse, error)
	// CreateContact creates a standalone contact not linked to a profile.
	CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	// CreateContactVerification initiates contact verification.
	CreateContactVerification(context.Context, *CreateContactVerificationRequest) (*CreateContactVerificationResponse, error)
	// CheckVerification verifies a contact using the provided code.
	CheckVerification(context.Context, *CheckVerificationRequest) (*CheckVerificationResponse, error)
	// RemoveContact removes a contact from a profile.
	RemoveContact(context.Context, *RemoveContactRequest) (*RemoveContactResponse, error)
	// SearchRoster searches a user's contact roster.
	SearchRoster(*SearchRosterRequest, grpc.ServerStreamingServer[SearchRosterResponse]) error
	// AddRoster adds multiple contacts to a user's roster.
	AddRoster(context.Context, *AddRosterRequest) (*AddRosterResponse, error)
	// RemoveRoster removes a contact from a user's roster.
	RemoveRoster(context.Context, *RemoveRosterRequest) (*RemoveRosterResponse, error)
	// AddAddress adds a new address to a profile.
	AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error)
	// AddRelationship creates a relationship between profiles.
	AddRelationship(context.Context, *AddRelationshipRequest) (*AddRelationshipResponse, error)
	// DeleteRelationship removes a relationship between profiles.
	DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error)
	// ListRelationship lists all relationships for a profile.
	ListRelationship(*ListRelationshipRequest, grpc.ServerStreamingServer[ListRelationshipResponse]) error
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileServiceServer struct{}

func (UnimplementedProfileServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedProfileServiceServer) GetByContact(context.Context, *GetByContactRequest) (*GetByContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByContact not implemented")
}
func (UnimplementedProfileServiceServer) Search(*SearchRequest, grpc.ServerStreamingServer[SearchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedProfileServiceServer) Merge(context.Context, *MergeRequest) (*MergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedProfileServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProfileServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProfileServiceServer) AddContact(context.Context, *AddContactRequest) (*AddContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (UnimplementedProfileServiceServer) CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedProfileServiceServer) CreateContactVerification(context.Context, *CreateContactVerificationRequest) (*CreateContactVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContactVerification not implemented")
}
func (UnimplementedProfileServiceServer) CheckVerification(context.Context, *CheckVerificationRequest) (*CheckVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVerification not implemented")
}
func (UnimplementedProfileServiceServer) RemoveContact(context.Context, *RemoveContactRequest) (*RemoveContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContact not implemented")
}
func (UnimplementedProfileServiceServer) SearchRoster(*SearchRosterRequest, grpc.ServerStreamingServer[SearchRosterResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchRoster not implemented")
}
func (UnimplementedProfileServiceServer) AddRoster(context.Context, *AddRosterRequest) (*AddRosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoster not implemented")
}
func (UnimplementedProfileServiceServer) RemoveRoster(context.Context, *RemoveRosterRequest) (*RemoveRosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoster not implemented")
}
func (UnimplementedProfileServiceServer) AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedProfileServiceServer) AddRelationship(context.Context, *AddRelationshipRequest) (*AddRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRelationship not implemented")
}
func (UnimplementedProfileServiceServer) DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationship not implemented")
}
func (UnimplementedProfileServiceServer) ListRelationship(*ListRelationshipRequest, grpc.ServerStreamingServer[ListRelationshipResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListRelationship not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}
func (UnimplementedProfileServiceServer) testEmbeddedByValue()                        {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetByContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetByContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetByContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetByContact(ctx, req.(*GetByContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).Search(m, &grpc.GenericServerStream[SearchRequest, SearchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileService_SearchServer = grpc.ServerStreamingServer[SearchResponse]

func _ProfileService_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_Merge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddContact(ctx, req.(*AddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CreateContactVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateContactVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CreateContactVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateContactVerification(ctx, req.(*CreateContactVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CheckVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CheckVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CheckVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CheckVerification(ctx, req.(*CheckVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_RemoveContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).RemoveContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_RemoveContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).RemoveContact(ctx, req.(*RemoveContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SearchRoster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRosterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).SearchRoster(m, &grpc.GenericServerStream[SearchRosterRequest, SearchRosterResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileService_SearchRosterServer = grpc.ServerStreamingServer[SearchRosterResponse]

func _ProfileService_AddRoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddRoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddRoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddRoster(ctx, req.(*AddRosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_RemoveRoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).RemoveRoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_RemoveRoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).RemoveRoster(ctx, req.(*RemoveRosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddRelationship(ctx, req.(*AddRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_DeleteRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteRelationship(ctx, req.(*DeleteRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListRelationship_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRelationshipRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).ListRelationship(m, &grpc.GenericServerStream[ListRelationshipRequest, ListRelationshipResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileService_ListRelationshipServer = grpc.ServerStreamingServer[ListRelationshipResponse]

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.v1.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _ProfileService_GetById_Handler,
		},
		{
			MethodName: "GetByContact",
			Handler:    _ProfileService_GetByContact_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _ProfileService_Merge_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProfileService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProfileService_Update_Handler,
		},
		{
			MethodName: "AddContact",
			Handler:    _ProfileService_AddContact_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _ProfileService_CreateContact_Handler,
		},
		{
			MethodName: "CreateContactVerification",
			Handler:    _ProfileService_CreateContactVerification_Handler,
		},
		{
			MethodName: "CheckVerification",
			Handler:    _ProfileService_CheckVerification_Handler,
		},
		{
			MethodName: "RemoveContact",
			Handler:    _ProfileService_RemoveContact_Handler,
		},
		{
			MethodName: "AddRoster",
			Handler:    _ProfileService_AddRoster_Handler,
		},
		{
			MethodName: "RemoveRoster",
			Handler:    _ProfileService_RemoveRoster_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _ProfileService_AddAddress_Handler,
		},
		{
			MethodName: "AddRelationship",
			Handler:    _ProfileService_AddRelationship_Handler,
		},
		{
			MethodName: "DeleteRelationship",
			Handler:    _ProfileService_DeleteRelationship_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _ProfileService_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchRoster",
			Handler:       _ProfileService_SearchRoster_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRelationship",
			Handler:       _ProfileService_ListRelationship_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "profile/v1/profile.proto",
}
