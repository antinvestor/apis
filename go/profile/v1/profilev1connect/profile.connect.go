// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: profile/v1/profile.proto

package profilev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/antinvestor/apis/go/profile/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProfileServiceName is the fully-qualified name of the ProfileService service.
	ProfileServiceName = "profile.v1.ProfileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProfileServiceGetByIdProcedure is the fully-qualified name of the ProfileService's GetById RPC.
	ProfileServiceGetByIdProcedure = "/profile.v1.ProfileService/GetById"
	// ProfileServiceGetByContactProcedure is the fully-qualified name of the ProfileService's
	// GetByContact RPC.
	ProfileServiceGetByContactProcedure = "/profile.v1.ProfileService/GetByContact"
	// ProfileServiceSearchProcedure is the fully-qualified name of the ProfileService's Search RPC.
	ProfileServiceSearchProcedure = "/profile.v1.ProfileService/Search"
	// ProfileServiceMergeProcedure is the fully-qualified name of the ProfileService's Merge RPC.
	ProfileServiceMergeProcedure = "/profile.v1.ProfileService/Merge"
	// ProfileServiceCreateProcedure is the fully-qualified name of the ProfileService's Create RPC.
	ProfileServiceCreateProcedure = "/profile.v1.ProfileService/Create"
	// ProfileServiceUpdateProcedure is the fully-qualified name of the ProfileService's Update RPC.
	ProfileServiceUpdateProcedure = "/profile.v1.ProfileService/Update"
	// ProfileServiceAddContactProcedure is the fully-qualified name of the ProfileService's AddContact
	// RPC.
	ProfileServiceAddContactProcedure = "/profile.v1.ProfileService/AddContact"
	// ProfileServiceCreateContactProcedure is the fully-qualified name of the ProfileService's
	// CreateContact RPC.
	ProfileServiceCreateContactProcedure = "/profile.v1.ProfileService/CreateContact"
	// ProfileServiceCreateContactVerificationProcedure is the fully-qualified name of the
	// ProfileService's CreateContactVerification RPC.
	ProfileServiceCreateContactVerificationProcedure = "/profile.v1.ProfileService/CreateContactVerification"
	// ProfileServiceCheckVerificationProcedure is the fully-qualified name of the ProfileService's
	// CheckVerification RPC.
	ProfileServiceCheckVerificationProcedure = "/profile.v1.ProfileService/CheckVerification"
	// ProfileServiceRemoveContactProcedure is the fully-qualified name of the ProfileService's
	// RemoveContact RPC.
	ProfileServiceRemoveContactProcedure = "/profile.v1.ProfileService/RemoveContact"
	// ProfileServiceSearchRosterProcedure is the fully-qualified name of the ProfileService's
	// SearchRoster RPC.
	ProfileServiceSearchRosterProcedure = "/profile.v1.ProfileService/SearchRoster"
	// ProfileServiceAddRosterProcedure is the fully-qualified name of the ProfileService's AddRoster
	// RPC.
	ProfileServiceAddRosterProcedure = "/profile.v1.ProfileService/AddRoster"
	// ProfileServiceRemoveRosterProcedure is the fully-qualified name of the ProfileService's
	// RemoveRoster RPC.
	ProfileServiceRemoveRosterProcedure = "/profile.v1.ProfileService/RemoveRoster"
	// ProfileServiceAddAddressProcedure is the fully-qualified name of the ProfileService's AddAddress
	// RPC.
	ProfileServiceAddAddressProcedure = "/profile.v1.ProfileService/AddAddress"
	// ProfileServiceAddRelationshipProcedure is the fully-qualified name of the ProfileService's
	// AddRelationship RPC.
	ProfileServiceAddRelationshipProcedure = "/profile.v1.ProfileService/AddRelationship"
	// ProfileServiceDeleteRelationshipProcedure is the fully-qualified name of the ProfileService's
	// DeleteRelationship RPC.
	ProfileServiceDeleteRelationshipProcedure = "/profile.v1.ProfileService/DeleteRelationship"
	// ProfileServiceListRelationshipProcedure is the fully-qualified name of the ProfileService's
	// ListRelationship RPC.
	ProfileServiceListRelationshipProcedure = "/profile.v1.ProfileService/ListRelationship"
)

// ProfileServiceClient is a client for the profile.v1.ProfileService service.
type ProfileServiceClient interface {
	// GetById retrieves a profile by its unique ID.
	GetById(context.Context, *connect.Request[v1.GetByIdRequest]) (*connect.Response[v1.GetByIdResponse], error)
	// GetByContact retrieves a profile by contact information.
	GetByContact(context.Context, *connect.Request[v1.GetByContactRequest]) (*connect.Response[v1.GetByContactResponse], error)
	// Search finds profiles matching specified criteria.
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error)
	// Merge combines two profiles into one.
	Merge(context.Context, *connect.Request[v1.MergeRequest]) (*connect.Response[v1.MergeResponse], error)
	// Create creates a new profile.
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Update updates an existing profile's properties.
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	// AddContact adds a new contact to a profile with automatic verification.
	AddContact(context.Context, *connect.Request[v1.AddContactRequest]) (*connect.Response[v1.AddContactResponse], error)
	// CreateContact creates a standalone contact not linked to a profile.
	CreateContact(context.Context, *connect.Request[v1.CreateContactRequest]) (*connect.Response[v1.CreateContactResponse], error)
	// CreateContactVerification initiates contact verification.
	CreateContactVerification(context.Context, *connect.Request[v1.CreateContactVerificationRequest]) (*connect.Response[v1.CreateContactVerificationResponse], error)
	// CheckVerification verifies a contact using the provided code.
	CheckVerification(context.Context, *connect.Request[v1.CheckVerificationRequest]) (*connect.Response[v1.CheckVerificationResponse], error)
	// RemoveContact removes a contact from a profile.
	RemoveContact(context.Context, *connect.Request[v1.RemoveContactRequest]) (*connect.Response[v1.RemoveContactResponse], error)
	// SearchRoster searches a user's contact roster.
	SearchRoster(context.Context, *connect.Request[v1.SearchRosterRequest]) (*connect.ServerStreamForClient[v1.SearchRosterResponse], error)
	// AddRoster adds multiple contacts to a user's roster.
	AddRoster(context.Context, *connect.Request[v1.AddRosterRequest]) (*connect.Response[v1.AddRosterResponse], error)
	// RemoveRoster removes a contact from a user's roster.
	RemoveRoster(context.Context, *connect.Request[v1.RemoveRosterRequest]) (*connect.Response[v1.RemoveRosterResponse], error)
	// AddAddress adds a new address to a profile.
	AddAddress(context.Context, *connect.Request[v1.AddAddressRequest]) (*connect.Response[v1.AddAddressResponse], error)
	// AddRelationship creates a relationship between profiles.
	AddRelationship(context.Context, *connect.Request[v1.AddRelationshipRequest]) (*connect.Response[v1.AddRelationshipResponse], error)
	// DeleteRelationship removes a relationship between profiles.
	DeleteRelationship(context.Context, *connect.Request[v1.DeleteRelationshipRequest]) (*connect.Response[v1.DeleteRelationshipResponse], error)
	// ListRelationship lists all relationships for a profile.
	ListRelationship(context.Context, *connect.Request[v1.ListRelationshipRequest]) (*connect.ServerStreamForClient[v1.ListRelationshipResponse], error)
}

// NewProfileServiceClient constructs a client for the profile.v1.ProfileService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProfileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	profileServiceMethods := v1.File_profile_v1_profile_proto.Services().ByName("ProfileService").Methods()
	return &profileServiceClient{
		getById: connect.NewClient[v1.GetByIdRequest, v1.GetByIdResponse](
			httpClient,
			baseURL+ProfileServiceGetByIdProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetById")),
			connect.WithClientOptions(opts...),
		),
		getByContact: connect.NewClient[v1.GetByContactRequest, v1.GetByContactResponse](
			httpClient,
			baseURL+ProfileServiceGetByContactProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetByContact")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+ProfileServiceSearchProcedure,
			connect.WithSchema(profileServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		merge: connect.NewClient[v1.MergeRequest, v1.MergeResponse](
			httpClient,
			baseURL+ProfileServiceMergeProcedure,
			connect.WithSchema(profileServiceMethods.ByName("Merge")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+ProfileServiceCreateProcedure,
			connect.WithSchema(profileServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+ProfileServiceUpdateProcedure,
			connect.WithSchema(profileServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		addContact: connect.NewClient[v1.AddContactRequest, v1.AddContactResponse](
			httpClient,
			baseURL+ProfileServiceAddContactProcedure,
			connect.WithSchema(profileServiceMethods.ByName("AddContact")),
			connect.WithClientOptions(opts...),
		),
		createContact: connect.NewClient[v1.CreateContactRequest, v1.CreateContactResponse](
			httpClient,
			baseURL+ProfileServiceCreateContactProcedure,
			connect.WithSchema(profileServiceMethods.ByName("CreateContact")),
			connect.WithClientOptions(opts...),
		),
		createContactVerification: connect.NewClient[v1.CreateContactVerificationRequest, v1.CreateContactVerificationResponse](
			httpClient,
			baseURL+ProfileServiceCreateContactVerificationProcedure,
			connect.WithSchema(profileServiceMethods.ByName("CreateContactVerification")),
			connect.WithClientOptions(opts...),
		),
		checkVerification: connect.NewClient[v1.CheckVerificationRequest, v1.CheckVerificationResponse](
			httpClient,
			baseURL+ProfileServiceCheckVerificationProcedure,
			connect.WithSchema(profileServiceMethods.ByName("CheckVerification")),
			connect.WithClientOptions(opts...),
		),
		removeContact: connect.NewClient[v1.RemoveContactRequest, v1.RemoveContactResponse](
			httpClient,
			baseURL+ProfileServiceRemoveContactProcedure,
			connect.WithSchema(profileServiceMethods.ByName("RemoveContact")),
			connect.WithClientOptions(opts...),
		),
		searchRoster: connect.NewClient[v1.SearchRosterRequest, v1.SearchRosterResponse](
			httpClient,
			baseURL+ProfileServiceSearchRosterProcedure,
			connect.WithSchema(profileServiceMethods.ByName("SearchRoster")),
			connect.WithClientOptions(opts...),
		),
		addRoster: connect.NewClient[v1.AddRosterRequest, v1.AddRosterResponse](
			httpClient,
			baseURL+ProfileServiceAddRosterProcedure,
			connect.WithSchema(profileServiceMethods.ByName("AddRoster")),
			connect.WithClientOptions(opts...),
		),
		removeRoster: connect.NewClient[v1.RemoveRosterRequest, v1.RemoveRosterResponse](
			httpClient,
			baseURL+ProfileServiceRemoveRosterProcedure,
			connect.WithSchema(profileServiceMethods.ByName("RemoveRoster")),
			connect.WithClientOptions(opts...),
		),
		addAddress: connect.NewClient[v1.AddAddressRequest, v1.AddAddressResponse](
			httpClient,
			baseURL+ProfileServiceAddAddressProcedure,
			connect.WithSchema(profileServiceMethods.ByName("AddAddress")),
			connect.WithClientOptions(opts...),
		),
		addRelationship: connect.NewClient[v1.AddRelationshipRequest, v1.AddRelationshipResponse](
			httpClient,
			baseURL+ProfileServiceAddRelationshipProcedure,
			connect.WithSchema(profileServiceMethods.ByName("AddRelationship")),
			connect.WithClientOptions(opts...),
		),
		deleteRelationship: connect.NewClient[v1.DeleteRelationshipRequest, v1.DeleteRelationshipResponse](
			httpClient,
			baseURL+ProfileServiceDeleteRelationshipProcedure,
			connect.WithSchema(profileServiceMethods.ByName("DeleteRelationship")),
			connect.WithClientOptions(opts...),
		),
		listRelationship: connect.NewClient[v1.ListRelationshipRequest, v1.ListRelationshipResponse](
			httpClient,
			baseURL+ProfileServiceListRelationshipProcedure,
			connect.WithSchema(profileServiceMethods.ByName("ListRelationship")),
			connect.WithClientOptions(opts...),
		),
	}
}

// profileServiceClient implements ProfileServiceClient.
type profileServiceClient struct {
	getById                   *connect.Client[v1.GetByIdRequest, v1.GetByIdResponse]
	getByContact              *connect.Client[v1.GetByContactRequest, v1.GetByContactResponse]
	search                    *connect.Client[v1.SearchRequest, v1.SearchResponse]
	merge                     *connect.Client[v1.MergeRequest, v1.MergeResponse]
	create                    *connect.Client[v1.CreateRequest, v1.CreateResponse]
	update                    *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	addContact                *connect.Client[v1.AddContactRequest, v1.AddContactResponse]
	createContact             *connect.Client[v1.CreateContactRequest, v1.CreateContactResponse]
	createContactVerification *connect.Client[v1.CreateContactVerificationRequest, v1.CreateContactVerificationResponse]
	checkVerification         *connect.Client[v1.CheckVerificationRequest, v1.CheckVerificationResponse]
	removeContact             *connect.Client[v1.RemoveContactRequest, v1.RemoveContactResponse]
	searchRoster              *connect.Client[v1.SearchRosterRequest, v1.SearchRosterResponse]
	addRoster                 *connect.Client[v1.AddRosterRequest, v1.AddRosterResponse]
	removeRoster              *connect.Client[v1.RemoveRosterRequest, v1.RemoveRosterResponse]
	addAddress                *connect.Client[v1.AddAddressRequest, v1.AddAddressResponse]
	addRelationship           *connect.Client[v1.AddRelationshipRequest, v1.AddRelationshipResponse]
	deleteRelationship        *connect.Client[v1.DeleteRelationshipRequest, v1.DeleteRelationshipResponse]
	listRelationship          *connect.Client[v1.ListRelationshipRequest, v1.ListRelationshipResponse]
}

// GetById calls profile.v1.ProfileService.GetById.
func (c *profileServiceClient) GetById(ctx context.Context, req *connect.Request[v1.GetByIdRequest]) (*connect.Response[v1.GetByIdResponse], error) {
	return c.getById.CallUnary(ctx, req)
}

// GetByContact calls profile.v1.ProfileService.GetByContact.
func (c *profileServiceClient) GetByContact(ctx context.Context, req *connect.Request[v1.GetByContactRequest]) (*connect.Response[v1.GetByContactResponse], error) {
	return c.getByContact.CallUnary(ctx, req)
}

// Search calls profile.v1.ProfileService.Search.
func (c *profileServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error) {
	return c.search.CallServerStream(ctx, req)
}

// Merge calls profile.v1.ProfileService.Merge.
func (c *profileServiceClient) Merge(ctx context.Context, req *connect.Request[v1.MergeRequest]) (*connect.Response[v1.MergeResponse], error) {
	return c.merge.CallUnary(ctx, req)
}

// Create calls profile.v1.ProfileService.Create.
func (c *profileServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls profile.v1.ProfileService.Update.
func (c *profileServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// AddContact calls profile.v1.ProfileService.AddContact.
func (c *profileServiceClient) AddContact(ctx context.Context, req *connect.Request[v1.AddContactRequest]) (*connect.Response[v1.AddContactResponse], error) {
	return c.addContact.CallUnary(ctx, req)
}

// CreateContact calls profile.v1.ProfileService.CreateContact.
func (c *profileServiceClient) CreateContact(ctx context.Context, req *connect.Request[v1.CreateContactRequest]) (*connect.Response[v1.CreateContactResponse], error) {
	return c.createContact.CallUnary(ctx, req)
}

// CreateContactVerification calls profile.v1.ProfileService.CreateContactVerification.
func (c *profileServiceClient) CreateContactVerification(ctx context.Context, req *connect.Request[v1.CreateContactVerificationRequest]) (*connect.Response[v1.CreateContactVerificationResponse], error) {
	return c.createContactVerification.CallUnary(ctx, req)
}

// CheckVerification calls profile.v1.ProfileService.CheckVerification.
func (c *profileServiceClient) CheckVerification(ctx context.Context, req *connect.Request[v1.CheckVerificationRequest]) (*connect.Response[v1.CheckVerificationResponse], error) {
	return c.checkVerification.CallUnary(ctx, req)
}

// RemoveContact calls profile.v1.ProfileService.RemoveContact.
func (c *profileServiceClient) RemoveContact(ctx context.Context, req *connect.Request[v1.RemoveContactRequest]) (*connect.Response[v1.RemoveContactResponse], error) {
	return c.removeContact.CallUnary(ctx, req)
}

// SearchRoster calls profile.v1.ProfileService.SearchRoster.
func (c *profileServiceClient) SearchRoster(ctx context.Context, req *connect.Request[v1.SearchRosterRequest]) (*connect.ServerStreamForClient[v1.SearchRosterResponse], error) {
	return c.searchRoster.CallServerStream(ctx, req)
}

// AddRoster calls profile.v1.ProfileService.AddRoster.
func (c *profileServiceClient) AddRoster(ctx context.Context, req *connect.Request[v1.AddRosterRequest]) (*connect.Response[v1.AddRosterResponse], error) {
	return c.addRoster.CallUnary(ctx, req)
}

// RemoveRoster calls profile.v1.ProfileService.RemoveRoster.
func (c *profileServiceClient) RemoveRoster(ctx context.Context, req *connect.Request[v1.RemoveRosterRequest]) (*connect.Response[v1.RemoveRosterResponse], error) {
	return c.removeRoster.CallUnary(ctx, req)
}

// AddAddress calls profile.v1.ProfileService.AddAddress.
func (c *profileServiceClient) AddAddress(ctx context.Context, req *connect.Request[v1.AddAddressRequest]) (*connect.Response[v1.AddAddressResponse], error) {
	return c.addAddress.CallUnary(ctx, req)
}

// AddRelationship calls profile.v1.ProfileService.AddRelationship.
func (c *profileServiceClient) AddRelationship(ctx context.Context, req *connect.Request[v1.AddRelationshipRequest]) (*connect.Response[v1.AddRelationshipResponse], error) {
	return c.addRelationship.CallUnary(ctx, req)
}

// DeleteRelationship calls profile.v1.ProfileService.DeleteRelationship.
func (c *profileServiceClient) DeleteRelationship(ctx context.Context, req *connect.Request[v1.DeleteRelationshipRequest]) (*connect.Response[v1.DeleteRelationshipResponse], error) {
	return c.deleteRelationship.CallUnary(ctx, req)
}

// ListRelationship calls profile.v1.ProfileService.ListRelationship.
func (c *profileServiceClient) ListRelationship(ctx context.Context, req *connect.Request[v1.ListRelationshipRequest]) (*connect.ServerStreamForClient[v1.ListRelationshipResponse], error) {
	return c.listRelationship.CallServerStream(ctx, req)
}

// ProfileServiceHandler is an implementation of the profile.v1.ProfileService service.
type ProfileServiceHandler interface {
	// GetById retrieves a profile by its unique ID.
	GetById(context.Context, *connect.Request[v1.GetByIdRequest]) (*connect.Response[v1.GetByIdResponse], error)
	// GetByContact retrieves a profile by contact information.
	GetByContact(context.Context, *connect.Request[v1.GetByContactRequest]) (*connect.Response[v1.GetByContactResponse], error)
	// Search finds profiles matching specified criteria.
	Search(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error
	// Merge combines two profiles into one.
	Merge(context.Context, *connect.Request[v1.MergeRequest]) (*connect.Response[v1.MergeResponse], error)
	// Create creates a new profile.
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Update updates an existing profile's properties.
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	// AddContact adds a new contact to a profile with automatic verification.
	AddContact(context.Context, *connect.Request[v1.AddContactRequest]) (*connect.Response[v1.AddContactResponse], error)
	// CreateContact creates a standalone contact not linked to a profile.
	CreateContact(context.Context, *connect.Request[v1.CreateContactRequest]) (*connect.Response[v1.CreateContactResponse], error)
	// CreateContactVerification initiates contact verification.
	CreateContactVerification(context.Context, *connect.Request[v1.CreateContactVerificationRequest]) (*connect.Response[v1.CreateContactVerificationResponse], error)
	// CheckVerification verifies a contact using the provided code.
	CheckVerification(context.Context, *connect.Request[v1.CheckVerificationRequest]) (*connect.Response[v1.CheckVerificationResponse], error)
	// RemoveContact removes a contact from a profile.
	RemoveContact(context.Context, *connect.Request[v1.RemoveContactRequest]) (*connect.Response[v1.RemoveContactResponse], error)
	// SearchRoster searches a user's contact roster.
	SearchRoster(context.Context, *connect.Request[v1.SearchRosterRequest], *connect.ServerStream[v1.SearchRosterResponse]) error
	// AddRoster adds multiple contacts to a user's roster.
	AddRoster(context.Context, *connect.Request[v1.AddRosterRequest]) (*connect.Response[v1.AddRosterResponse], error)
	// RemoveRoster removes a contact from a user's roster.
	RemoveRoster(context.Context, *connect.Request[v1.RemoveRosterRequest]) (*connect.Response[v1.RemoveRosterResponse], error)
	// AddAddress adds a new address to a profile.
	AddAddress(context.Context, *connect.Request[v1.AddAddressRequest]) (*connect.Response[v1.AddAddressResponse], error)
	// AddRelationship creates a relationship between profiles.
	AddRelationship(context.Context, *connect.Request[v1.AddRelationshipRequest]) (*connect.Response[v1.AddRelationshipResponse], error)
	// DeleteRelationship removes a relationship between profiles.
	DeleteRelationship(context.Context, *connect.Request[v1.DeleteRelationshipRequest]) (*connect.Response[v1.DeleteRelationshipResponse], error)
	// ListRelationship lists all relationships for a profile.
	ListRelationship(context.Context, *connect.Request[v1.ListRelationshipRequest], *connect.ServerStream[v1.ListRelationshipResponse]) error
}

// NewProfileServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProfileServiceHandler(svc ProfileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	profileServiceMethods := v1.File_profile_v1_profile_proto.Services().ByName("ProfileService").Methods()
	profileServiceGetByIdHandler := connect.NewUnaryHandler(
		ProfileServiceGetByIdProcedure,
		svc.GetById,
		connect.WithSchema(profileServiceMethods.ByName("GetById")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceGetByContactHandler := connect.NewUnaryHandler(
		ProfileServiceGetByContactProcedure,
		svc.GetByContact,
		connect.WithSchema(profileServiceMethods.ByName("GetByContact")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceSearchHandler := connect.NewServerStreamHandler(
		ProfileServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(profileServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceMergeHandler := connect.NewUnaryHandler(
		ProfileServiceMergeProcedure,
		svc.Merge,
		connect.WithSchema(profileServiceMethods.ByName("Merge")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceCreateHandler := connect.NewUnaryHandler(
		ProfileServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(profileServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceUpdateHandler := connect.NewUnaryHandler(
		ProfileServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(profileServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceAddContactHandler := connect.NewUnaryHandler(
		ProfileServiceAddContactProcedure,
		svc.AddContact,
		connect.WithSchema(profileServiceMethods.ByName("AddContact")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceCreateContactHandler := connect.NewUnaryHandler(
		ProfileServiceCreateContactProcedure,
		svc.CreateContact,
		connect.WithSchema(profileServiceMethods.ByName("CreateContact")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceCreateContactVerificationHandler := connect.NewUnaryHandler(
		ProfileServiceCreateContactVerificationProcedure,
		svc.CreateContactVerification,
		connect.WithSchema(profileServiceMethods.ByName("CreateContactVerification")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceCheckVerificationHandler := connect.NewUnaryHandler(
		ProfileServiceCheckVerificationProcedure,
		svc.CheckVerification,
		connect.WithSchema(profileServiceMethods.ByName("CheckVerification")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceRemoveContactHandler := connect.NewUnaryHandler(
		ProfileServiceRemoveContactProcedure,
		svc.RemoveContact,
		connect.WithSchema(profileServiceMethods.ByName("RemoveContact")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceSearchRosterHandler := connect.NewServerStreamHandler(
		ProfileServiceSearchRosterProcedure,
		svc.SearchRoster,
		connect.WithSchema(profileServiceMethods.ByName("SearchRoster")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceAddRosterHandler := connect.NewUnaryHandler(
		ProfileServiceAddRosterProcedure,
		svc.AddRoster,
		connect.WithSchema(profileServiceMethods.ByName("AddRoster")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceRemoveRosterHandler := connect.NewUnaryHandler(
		ProfileServiceRemoveRosterProcedure,
		svc.RemoveRoster,
		connect.WithSchema(profileServiceMethods.ByName("RemoveRoster")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceAddAddressHandler := connect.NewUnaryHandler(
		ProfileServiceAddAddressProcedure,
		svc.AddAddress,
		connect.WithSchema(profileServiceMethods.ByName("AddAddress")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceAddRelationshipHandler := connect.NewUnaryHandler(
		ProfileServiceAddRelationshipProcedure,
		svc.AddRelationship,
		connect.WithSchema(profileServiceMethods.ByName("AddRelationship")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceDeleteRelationshipHandler := connect.NewUnaryHandler(
		ProfileServiceDeleteRelationshipProcedure,
		svc.DeleteRelationship,
		connect.WithSchema(profileServiceMethods.ByName("DeleteRelationship")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceListRelationshipHandler := connect.NewServerStreamHandler(
		ProfileServiceListRelationshipProcedure,
		svc.ListRelationship,
		connect.WithSchema(profileServiceMethods.ByName("ListRelationship")),
		connect.WithHandlerOptions(opts...),
	)
	return "/profile.v1.ProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProfileServiceGetByIdProcedure:
			profileServiceGetByIdHandler.ServeHTTP(w, r)
		case ProfileServiceGetByContactProcedure:
			profileServiceGetByContactHandler.ServeHTTP(w, r)
		case ProfileServiceSearchProcedure:
			profileServiceSearchHandler.ServeHTTP(w, r)
		case ProfileServiceMergeProcedure:
			profileServiceMergeHandler.ServeHTTP(w, r)
		case ProfileServiceCreateProcedure:
			profileServiceCreateHandler.ServeHTTP(w, r)
		case ProfileServiceUpdateProcedure:
			profileServiceUpdateHandler.ServeHTTP(w, r)
		case ProfileServiceAddContactProcedure:
			profileServiceAddContactHandler.ServeHTTP(w, r)
		case ProfileServiceCreateContactProcedure:
			profileServiceCreateContactHandler.ServeHTTP(w, r)
		case ProfileServiceCreateContactVerificationProcedure:
			profileServiceCreateContactVerificationHandler.ServeHTTP(w, r)
		case ProfileServiceCheckVerificationProcedure:
			profileServiceCheckVerificationHandler.ServeHTTP(w, r)
		case ProfileServiceRemoveContactProcedure:
			profileServiceRemoveContactHandler.ServeHTTP(w, r)
		case ProfileServiceSearchRosterProcedure:
			profileServiceSearchRosterHandler.ServeHTTP(w, r)
		case ProfileServiceAddRosterProcedure:
			profileServiceAddRosterHandler.ServeHTTP(w, r)
		case ProfileServiceRemoveRosterProcedure:
			profileServiceRemoveRosterHandler.ServeHTTP(w, r)
		case ProfileServiceAddAddressProcedure:
			profileServiceAddAddressHandler.ServeHTTP(w, r)
		case ProfileServiceAddRelationshipProcedure:
			profileServiceAddRelationshipHandler.ServeHTTP(w, r)
		case ProfileServiceDeleteRelationshipProcedure:
			profileServiceDeleteRelationshipHandler.ServeHTTP(w, r)
		case ProfileServiceListRelationshipProcedure:
			profileServiceListRelationshipHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProfileServiceHandler struct{}

func (UnimplementedProfileServiceHandler) GetById(context.Context, *connect.Request[v1.GetByIdRequest]) (*connect.Response[v1.GetByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.GetById is not implemented"))
}

func (UnimplementedProfileServiceHandler) GetByContact(context.Context, *connect.Request[v1.GetByContactRequest]) (*connect.Response[v1.GetByContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.GetByContact is not implemented"))
}

func (UnimplementedProfileServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.Search is not implemented"))
}

func (UnimplementedProfileServiceHandler) Merge(context.Context, *connect.Request[v1.MergeRequest]) (*connect.Response[v1.MergeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.Merge is not implemented"))
}

func (UnimplementedProfileServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.Create is not implemented"))
}

func (UnimplementedProfileServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.Update is not implemented"))
}

func (UnimplementedProfileServiceHandler) AddContact(context.Context, *connect.Request[v1.AddContactRequest]) (*connect.Response[v1.AddContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.AddContact is not implemented"))
}

func (UnimplementedProfileServiceHandler) CreateContact(context.Context, *connect.Request[v1.CreateContactRequest]) (*connect.Response[v1.CreateContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.CreateContact is not implemented"))
}

func (UnimplementedProfileServiceHandler) CreateContactVerification(context.Context, *connect.Request[v1.CreateContactVerificationRequest]) (*connect.Response[v1.CreateContactVerificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.CreateContactVerification is not implemented"))
}

func (UnimplementedProfileServiceHandler) CheckVerification(context.Context, *connect.Request[v1.CheckVerificationRequest]) (*connect.Response[v1.CheckVerificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.CheckVerification is not implemented"))
}

func (UnimplementedProfileServiceHandler) RemoveContact(context.Context, *connect.Request[v1.RemoveContactRequest]) (*connect.Response[v1.RemoveContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.RemoveContact is not implemented"))
}

func (UnimplementedProfileServiceHandler) SearchRoster(context.Context, *connect.Request[v1.SearchRosterRequest], *connect.ServerStream[v1.SearchRosterResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.SearchRoster is not implemented"))
}

func (UnimplementedProfileServiceHandler) AddRoster(context.Context, *connect.Request[v1.AddRosterRequest]) (*connect.Response[v1.AddRosterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.AddRoster is not implemented"))
}

func (UnimplementedProfileServiceHandler) RemoveRoster(context.Context, *connect.Request[v1.RemoveRosterRequest]) (*connect.Response[v1.RemoveRosterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.RemoveRoster is not implemented"))
}

func (UnimplementedProfileServiceHandler) AddAddress(context.Context, *connect.Request[v1.AddAddressRequest]) (*connect.Response[v1.AddAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.AddAddress is not implemented"))
}

func (UnimplementedProfileServiceHandler) AddRelationship(context.Context, *connect.Request[v1.AddRelationshipRequest]) (*connect.Response[v1.AddRelationshipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.AddRelationship is not implemented"))
}

func (UnimplementedProfileServiceHandler) DeleteRelationship(context.Context, *connect.Request[v1.DeleteRelationshipRequest]) (*connect.Response[v1.DeleteRelationshipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.DeleteRelationship is not implemented"))
}

func (UnimplementedProfileServiceHandler) ListRelationship(context.Context, *connect.Request[v1.ListRelationshipRequest], *connect.ServerStream[v1.ListRelationshipResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.ListRelationship is not implemented"))
}
