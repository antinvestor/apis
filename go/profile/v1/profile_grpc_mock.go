// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/profile/v1/profile_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/profile/v1/profile_grpc.pb.go -package=profilev1 -destination=/home/j/code/antinvestor/apis/go/profile/v1/profile_grpc_mock.go
//

// Package profilev1 is a generated GoMock package.
package profilev1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockProfileServiceClient is a mock of ProfileServiceClient interface.
type MockProfileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceClientMockRecorder
}

// MockProfileServiceClientMockRecorder is the mock recorder for MockProfileServiceClient.
type MockProfileServiceClientMockRecorder struct {
	mock *MockProfileServiceClient
}

// NewMockProfileServiceClient creates a new mock instance.
func NewMockProfileServiceClient(ctrl *gomock.Controller) *MockProfileServiceClient {
	mock := &MockProfileServiceClient{ctrl: ctrl}
	mock.recorder = &MockProfileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServiceClient) EXPECT() *MockProfileServiceClientMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockProfileServiceClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAddress", varargs...)
	ret0, _ := ret[0].(*AddAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockProfileServiceClientMockRecorder) AddAddress(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockProfileServiceClient)(nil).AddAddress), varargs...)
}

// AddContact mocks base method.
func (m *MockProfileServiceClient) AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddContact", varargs...)
	ret0, _ := ret[0].(*AddContactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContact indicates an expected call of AddContact.
func (mr *MockProfileServiceClientMockRecorder) AddContact(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockProfileServiceClient)(nil).AddContact), varargs...)
}

// AddRelationship mocks base method.
func (m *MockProfileServiceClient) AddRelationship(ctx context.Context, in *AddRelationshipRequest, opts ...grpc.CallOption) (*AddRelationshipResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRelationship", varargs...)
	ret0, _ := ret[0].(*AddRelationshipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRelationship indicates an expected call of AddRelationship.
func (mr *MockProfileServiceClientMockRecorder) AddRelationship(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelationship", reflect.TypeOf((*MockProfileServiceClient)(nil).AddRelationship), varargs...)
}

// Create mocks base method.
func (m *MockProfileServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProfileServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileServiceClient)(nil).Create), varargs...)
}

// DeleteRelationship mocks base method.
func (m *MockProfileServiceClient) DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRelationship", varargs...)
	ret0, _ := ret[0].(*DeleteRelationshipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRelationship indicates an expected call of DeleteRelationship.
func (mr *MockProfileServiceClientMockRecorder) DeleteRelationship(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationship", reflect.TypeOf((*MockProfileServiceClient)(nil).DeleteRelationship), varargs...)
}

// GetByContact mocks base method.
func (m *MockProfileServiceClient) GetByContact(ctx context.Context, in *GetByContactRequest, opts ...grpc.CallOption) (*GetByContactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByContact", varargs...)
	ret0, _ := ret[0].(*GetByContactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContact indicates an expected call of GetByContact.
func (mr *MockProfileServiceClientMockRecorder) GetByContact(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContact", reflect.TypeOf((*MockProfileServiceClient)(nil).GetByContact), varargs...)
}

// GetById mocks base method.
func (m *MockProfileServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetById", varargs...)
	ret0, _ := ret[0].(*GetByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockProfileServiceClientMockRecorder) GetById(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProfileServiceClient)(nil).GetById), varargs...)
}

// ListRelationship mocks base method.
func (m *MockProfileServiceClient) ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListRelationshipResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRelationship", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[ListRelationshipResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelationship indicates an expected call of ListRelationship.
func (mr *MockProfileServiceClientMockRecorder) ListRelationship(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelationship", reflect.TypeOf((*MockProfileServiceClient)(nil).ListRelationship), varargs...)
}

// Merge mocks base method.
func (m *MockProfileServiceClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Merge", varargs...)
	ret0, _ := ret[0].(*MergeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Merge indicates an expected call of Merge.
func (mr *MockProfileServiceClientMockRecorder) Merge(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockProfileServiceClient)(nil).Merge), varargs...)
}

// Search mocks base method.
func (m *MockProfileServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[SearchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockProfileServiceClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockProfileServiceClient)(nil).Search), varargs...)
}

// Update mocks base method.
func (m *MockProfileServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProfileServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfileServiceClient)(nil).Update), varargs...)
}

// MockProfileServiceServer is a mock of ProfileServiceServer interface.
type MockProfileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceServerMockRecorder
}

// MockProfileServiceServerMockRecorder is the mock recorder for MockProfileServiceServer.
type MockProfileServiceServerMockRecorder struct {
	mock *MockProfileServiceServer
}

// NewMockProfileServiceServer creates a new mock instance.
func NewMockProfileServiceServer(ctrl *gomock.Controller) *MockProfileServiceServer {
	mock := &MockProfileServiceServer{ctrl: ctrl}
	mock.recorder = &MockProfileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServiceServer) EXPECT() *MockProfileServiceServerMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockProfileServiceServer) AddAddress(arg0 context.Context, arg1 *AddAddressRequest) (*AddAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", arg0, arg1)
	ret0, _ := ret[0].(*AddAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockProfileServiceServerMockRecorder) AddAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockProfileServiceServer)(nil).AddAddress), arg0, arg1)
}

// AddContact mocks base method.
func (m *MockProfileServiceServer) AddContact(arg0 context.Context, arg1 *AddContactRequest) (*AddContactResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", arg0, arg1)
	ret0, _ := ret[0].(*AddContactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContact indicates an expected call of AddContact.
func (mr *MockProfileServiceServerMockRecorder) AddContact(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockProfileServiceServer)(nil).AddContact), arg0, arg1)
}

// AddRelationship mocks base method.
func (m *MockProfileServiceServer) AddRelationship(arg0 context.Context, arg1 *AddRelationshipRequest) (*AddRelationshipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelationship", arg0, arg1)
	ret0, _ := ret[0].(*AddRelationshipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRelationship indicates an expected call of AddRelationship.
func (mr *MockProfileServiceServerMockRecorder) AddRelationship(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelationship", reflect.TypeOf((*MockProfileServiceServer)(nil).AddRelationship), arg0, arg1)
}

// Create mocks base method.
func (m *MockProfileServiceServer) Create(arg0 context.Context, arg1 *CreateRequest) (*CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProfileServiceServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileServiceServer)(nil).Create), arg0, arg1)
}

// DeleteRelationship mocks base method.
func (m *MockProfileServiceServer) DeleteRelationship(arg0 context.Context, arg1 *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationship", arg0, arg1)
	ret0, _ := ret[0].(*DeleteRelationshipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRelationship indicates an expected call of DeleteRelationship.
func (mr *MockProfileServiceServerMockRecorder) DeleteRelationship(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationship", reflect.TypeOf((*MockProfileServiceServer)(nil).DeleteRelationship), arg0, arg1)
}

// GetByContact mocks base method.
func (m *MockProfileServiceServer) GetByContact(arg0 context.Context, arg1 *GetByContactRequest) (*GetByContactResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContact", arg0, arg1)
	ret0, _ := ret[0].(*GetByContactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContact indicates an expected call of GetByContact.
func (mr *MockProfileServiceServerMockRecorder) GetByContact(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContact", reflect.TypeOf((*MockProfileServiceServer)(nil).GetByContact), arg0, arg1)
}

// GetById mocks base method.
func (m *MockProfileServiceServer) GetById(arg0 context.Context, arg1 *GetByIdRequest) (*GetByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*GetByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockProfileServiceServerMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProfileServiceServer)(nil).GetById), arg0, arg1)
}

// ListRelationship mocks base method.
func (m *MockProfileServiceServer) ListRelationship(arg0 *ListRelationshipRequest, arg1 grpc.ServerStreamingServer[ListRelationshipResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelationship", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRelationship indicates an expected call of ListRelationship.
func (mr *MockProfileServiceServerMockRecorder) ListRelationship(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelationship", reflect.TypeOf((*MockProfileServiceServer)(nil).ListRelationship), arg0, arg1)
}

// Merge mocks base method.
func (m *MockProfileServiceServer) Merge(arg0 context.Context, arg1 *MergeRequest) (*MergeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0, arg1)
	ret0, _ := ret[0].(*MergeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Merge indicates an expected call of Merge.
func (mr *MockProfileServiceServerMockRecorder) Merge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockProfileServiceServer)(nil).Merge), arg0, arg1)
}

// Search mocks base method.
func (m *MockProfileServiceServer) Search(arg0 *SearchRequest, arg1 grpc.ServerStreamingServer[SearchResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockProfileServiceServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockProfileServiceServer)(nil).Search), arg0, arg1)
}

// Update mocks base method.
func (m *MockProfileServiceServer) Update(arg0 context.Context, arg1 *UpdateRequest) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProfileServiceServerMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfileServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedProfileServiceServer mocks base method.
func (m *MockProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServiceServer")
}

// mustEmbedUnimplementedProfileServiceServer indicates an expected call of mustEmbedUnimplementedProfileServiceServer.
func (mr *MockProfileServiceServerMockRecorder) mustEmbedUnimplementedProfileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServiceServer", reflect.TypeOf((*MockProfileServiceServer)(nil).mustEmbedUnimplementedProfileServiceServer))
}

// MockUnsafeProfileServiceServer is a mock of UnsafeProfileServiceServer interface.
type MockUnsafeProfileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProfileServiceServerMockRecorder
}

// MockUnsafeProfileServiceServerMockRecorder is the mock recorder for MockUnsafeProfileServiceServer.
type MockUnsafeProfileServiceServerMockRecorder struct {
	mock *MockUnsafeProfileServiceServer
}

// NewMockUnsafeProfileServiceServer creates a new mock instance.
func NewMockUnsafeProfileServiceServer(ctrl *gomock.Controller) *MockUnsafeProfileServiceServer {
	mock := &MockUnsafeProfileServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProfileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProfileServiceServer) EXPECT() *MockUnsafeProfileServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProfileServiceServer mocks base method.
func (m *MockUnsafeProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServiceServer")
}

// mustEmbedUnimplementedProfileServiceServer indicates an expected call of mustEmbedUnimplementedProfileServiceServer.
func (mr *MockUnsafeProfileServiceServerMockRecorder) mustEmbedUnimplementedProfileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServiceServer", reflect.TypeOf((*MockUnsafeProfileServiceServer)(nil).mustEmbedUnimplementedProfileServiceServer))
}
