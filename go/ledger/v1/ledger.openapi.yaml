openapi: 3.1.0
info:
  title: Ledger Service
  description: The Ledger Service provides double-entry bookkeeping and financial accounting capabilities. It supports hierarchical chart of accounts, multi-currency transactions, transaction reversals, and balance tracking. The service follows standard accounting principles with ledger types (Asset, Liability, Income, Expense, Capital) and ensures all transactions are balanced (debits equal credits). Supports both cleared and uncleared transactions with reservation capabilities for pending operations.
  contact:
    name: Ant Investor Ltd
    url: https://github.com/antinvestor/service-ledger
    email: info@antinvestor.com
  license:
    name: Apache License
    url: https://github.com/antinvestor/apis/blob/master/LICENSE
  version: v1.0.0
paths:
  /ledger.v1.LedgerService/CreateAccount:
    post:
      tags:
        - Accounts
        - ledger.v1.LedgerService
      summary: Create a new account
      description: Creates a new account within a ledger. Accounts track balances (cleared, uncleared, reserved) and support multi-currency operations.
      operationId: createAccount
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ledger.v1.Account'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ledger.v1.Account'
  /ledger.v1.LedgerService/CreateLedger:
    post:
      tags:
        - Ledgers
        - ledger.v1.LedgerService
      summary: Create a new ledger
      description: Creates a new ledger in the chart of accounts. Ledgers represent accounting categories (Asset, Liability, Income, Expense, Capital) and can be organized hierarchically.
      operationId: createLedger
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ledger.v1.Ledger'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ledger.v1.Ledger'
  /ledger.v1.LedgerService/CreateTransaction:
    post:
      tags:
        - Transactions
        - ledger.v1.LedgerService
      summary: Create a new transaction
      description: Creates a new double-entry transaction. The transaction must contain at least two entries with balanced debits and credits. Updates affected account balances automatically.
      operationId: createTransaction
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ledger.v1.Transaction'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ledger.v1.Transaction'
  /ledger.v1.LedgerService/ReverseTransaction:
    post:
      tags:
        - Transactions
        - ledger.v1.LedgerService
      summary: Reverse a transaction
      description: Reverses a transaction by creating a new REVERSAL transaction with inverted entries. The original transaction remains in the ledger for audit purposes.
      operationId: reverseTransaction
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ledger.v1.Transaction'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ledger.v1.Transaction'
  /ledger.v1.LedgerService/SearchAccounts: {}
  /ledger.v1.LedgerService/SearchLedgers: {}
  /ledger.v1.LedgerService/SearchTransactionEntries: {}
  /ledger.v1.LedgerService/SearchTransactions: {}
  /ledger.v1.LedgerService/UpdateAccount:
    post:
      tags:
        - Accounts
        - ledger.v1.LedgerService
      summary: Update account metadata
      description: Updates an existing account's metadata and properties. Account balances are updated through transactions, not directly via this RPC.
      operationId: updateAccount
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ledger.v1.Account'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ledger.v1.Account'
  /ledger.v1.LedgerService/UpdateLedger:
    post:
      tags:
        - Ledgers
        - ledger.v1.LedgerService
      summary: Update ledger metadata
      description: Updates an existing ledger's metadata and properties. The ledger type and reference cannot be changed after creation.
      operationId: updateLedger
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ledger.v1.Ledger'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ledger.v1.Ledger'
  /ledger.v1.LedgerService/UpdateTransaction:
    post:
      tags:
        - Transactions
        - ledger.v1.LedgerService
      summary: Update transaction metadata
      description: Updates a transaction's metadata and properties. Transaction entries and amounts cannot be changed after creation - use ReverseTransaction to correct errors.
      operationId: updateTransaction
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ledger.v1.Transaction'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ledger.v1.Transaction'
components:
  schemas:
    common.v1.Pagination:
      type: object
      properties:
        count:
          type: integer
          title: count
          format: int32
          description: Number of items per page (limit)
        page:
          type: integer
          title: page
          format: int32
          description: Page number (0-indexed or 1-indexed depending on service)
        startDate:
          type: string
          title: start_date
          description: 'Optional: Filter results from this date (RFC3339 format)'
        endDate:
          type: string
          title: end_date
          description: 'Optional: Filter results until this date (RFC3339 format)'
      title: Pagination
      additionalProperties: false
      description: |-
        Pagination provides standard offset-based pagination parameters.
         Used for list operations that return large result sets.
    common.v1.SearchRequest:
      type: object
      properties:
        query:
          type: string
          title: query
          description: Full-text search query string
        idQuery:
          type: string
          title: id_query
          description: Specific ID or ID pattern to search for
        limits:
          title: limits
          description: Pagination parameters
          $ref: '#/components/schemas/common.v1.Pagination'
        properties:
          type: array
          items:
            type: string
          title: properties
          description: Specific properties/fields to include in results
        extras:
          title: extras
          description: Service-specific additional search parameters
          $ref: '#/components/schemas/google.protobuf.Struct'
      title: SearchRequest
      additionalProperties: false
      description: |-
        SearchRequest provides a standard structure for search operations across services.
         Supports text search, ID-based queries, pagination, property filtering, and extensibility.
    connect-protocol-version:
      type: number
      title: Connect-Protocol-Version
      enum:
        - 1
      description: Define the version of the Connect protocol
      const: 1
    connect-timeout-header:
      type: number
      title: Connect-Timeout-Ms
      description: Define the timeout, in ms
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - not_found
          enum:
            - canceled
            - unknown
            - invalid_argument
            - deadline_exceeded
            - not_found
            - already_exists
            - permission_denied
            - resource_exhausted
            - failed_precondition
            - aborted
            - out_of_range
            - unimplemented
            - internal
            - unavailable
            - data_loss
            - unauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/connect.error_details.Any'
          description: A list of messages that carry the error details. There is no limit on the number of messages.
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    connect.error_details.Any:
      type: object
      properties:
        type:
          type: string
          description: 'A URL that acts as a globally unique identifier for the type of the serialized message. For example: `type.googleapis.com/google.rpc.ErrorInfo`. This is used to determine the schema of the data in the `value` field and is the discriminator for the `debug` field.'
        value:
          type: string
          format: binary
          description: The Protobuf message, serialized as bytes and base64-encoded. The specific message type is identified by the `type` field.
        debug:
          oneOf:
            - type: object
              title: Any
              additionalProperties: true
              description: Detailed error information.
          discriminator:
            propertyName: type
          title: Debug
          description: Deserialized error detail payload. The 'type' field indicates the schema. This field is for easier debugging and should not be relied upon for application logic.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message, with an additional debug field for ConnectRPC error details.
    google.protobuf.ListValue:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/google.protobuf.Value'
          title: values
          description: Repeated field of dynamically typed values.
      title: ListValue
      additionalProperties: false
      description: |-
        `ListValue` is a wrapper around a repeated field of values.

         The JSON representation for `ListValue` is JSON array.
    google.protobuf.NullValue:
      type: string
      title: NullValue
      enum:
        - NULL_VALUE
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
         `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.
    google.protobuf.Struct:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/google.protobuf.Value'
      description: |-
        `Struct` represents a structured data value, consisting of fields
         which map to dynamically typed values. In some languages, `Struct`
         might be supported by a native representation. For example, in
         scripting languages like JS a struct is represented as an
         object. The details of that representation are described together
         with the proto support for the language.

         The JSON representation for `Struct` is JSON object.
    google.protobuf.Struct.FieldsEntry:
      type: object
      properties:
        key:
          type: string
          title: key
        value:
          title: value
          $ref: '#/components/schemas/google.protobuf.Value'
      title: FieldsEntry
      additionalProperties: false
    google.protobuf.Value:
      oneOf:
        - type: "null"
        - type: number
        - type: string
        - type: boolean
        - type: array
        - type: object
          additionalProperties: true
      description: |-
        `Value` represents a dynamically typed value which can be either
         null, a number, a string, a boolean, a recursive struct value, or a
         list of values. A producer of value is expected to set one of these
         variants. Absence of any variant indicates an error.

         The JSON representation for `Value` is JSON value.
    google.type.Money:
      type: object
      properties:
        currencyCode:
          type: string
          title: currency_code
          description: The three-letter currency code defined in ISO 4217.
        units:
          type:
            - integer
            - string
          title: units
          format: int64
          description: |-
            The whole units of the amount.
             For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
        nanos:
          type: integer
          title: nanos
          format: int32
          description: |-
            Number of nano (10^-9) units of the amount.
             The value must be between -999,999,999 and +999,999,999 inclusive.
             If `units` is positive, `nanos` must be positive or zero.
             If `units` is zero, `nanos` can be positive, zero, or negative.
             If `units` is negative, `nanos` must be negative or zero.
             For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
      title: Money
      additionalProperties: false
      description: Represents an amount of money with its currency type.
    ledger.v1.Account:
      type: object
      properties:
        reference:
          type: string
          title: reference
          description: Unique account reference/number
        ledger:
          type: string
          title: ledger
          description: Ledger this account belongs to
        balance:
          title: balance
          description: Current cleared balance
          $ref: '#/components/schemas/google.type.Money'
        data:
          title: data
          description: Additional account metadata (owner, description, etc.)
          $ref: '#/components/schemas/google.protobuf.Struct'
        unclearedBalance:
          title: uncleared_balance
          description: Balance including uncleared transactions
          $ref: '#/components/schemas/google.type.Money'
        reservedBalance:
          title: reserved_balance
          description: Amount held in reservations
          $ref: '#/components/schemas/google.type.Money'
      title: Account
      additionalProperties: false
      description: |-
        Account represents a specific account within a ledger.
         Tracks balances and supports multi-currency operations.
    ledger.v1.Ledger:
      type: object
      properties:
        reference:
          type: string
          title: reference
          description: Unique reference/code for the ledger (e.g., "1000", "CASH")
        type:
          title: type
          description: Accounting category type
          $ref: '#/components/schemas/ledger.v1.LedgerType'
        parent:
          type: string
          title: parent
          description: Parent ledger reference for hierarchical structure
        data:
          title: data
          description: Additional ledger metadata (name, description, etc.)
          $ref: '#/components/schemas/google.protobuf.Struct'
      title: Ledger
      additionalProperties: false
      description: |-
        Ledger represents a category in the chart of accounts.
         Ledgers can be hierarchical with parent-child relationships.
    ledger.v1.LedgerType:
      type: string
      title: LedgerType
      enum:
        - ASSET
        - LIABILITY
        - INCOME
        - EXPENSE
        - CAPITAL
      description: |-
        LedgerType defines the fundamental accounting categories.
         Based on standard accounting equation: Assets = Liabilities + Capital + (Income - Expenses)
         buf:lint:ignore ENUM_VALUE_PREFIX
    ledger.v1.Transaction:
      type: object
      properties:
        reference:
          type: string
          title: reference
          description: Unique transaction reference/ID
        currency:
          type: string
          title: currency
          description: Currency code for all entries (ISO 4217)
        transactedAt:
          type: string
          title: transacted_at
          description: Transaction timestamp (RFC3339)
        data:
          title: data
          description: Additional transaction metadata (description, source, etc.)
          $ref: '#/components/schemas/google.protobuf.Struct'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ledger.v1.TransactionEntry'
          title: entries
          description: Transaction entries (must be balanced)
        cleared:
          type: boolean
          title: cleared
          description: Whether transaction has been cleared/posted
        type:
          title: type
          description: Transaction type (normal, reversal, reservation)
          $ref: '#/components/schemas/ledger.v1.TransactionType'
      title: Transaction
      additionalProperties: false
      description: |-
        Transaction represents a complete double-entry transaction.
         Must contain balanced entries (sum of debits = sum of credits).
    ledger.v1.TransactionEntry:
      type: object
      properties:
        account:
          type: string
          title: account
          description: Account reference for this entry
        transaction:
          type: string
          title: transaction
          description: Transaction reference this entry belongs to
        transactedAt:
          type: string
          title: transacted_at
          description: Transaction timestamp (RFC3339)
        amount:
          title: amount
          description: Amount for this entry
          $ref: '#/components/schemas/google.type.Money'
        credit:
          type: boolean
          title: credit
          description: True if credit, false if debit
        accBalance:
          title: acc_balance
          description: Account balance after this entry
          $ref: '#/components/schemas/google.type.Money'
        clearedAt:
          type: string
          title: cleared_at
          description: When this entry was cleared (RFC3339)
      title: TransactionEntry
      additionalProperties: false
      description: |-
        TransactionEntry represents one side of a double-entry transaction.
         Each transaction must have at least two entries with balanced debits and credits.
    ledger.v1.TransactionType:
      type: string
      title: TransactionType
      enum:
        - NORMAL
        - REVERSAL
        - RESERVATION
      description: |-
        TransactionType defines the nature of a transaction.
         buf:lint:ignore ENUM_VALUE_PREFIX
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security: []
tags:
  - name: ledger.v1.LedgerService
    description: |-
      LedgerService provides double-entry bookkeeping and financial accounting.
       All RPCs require authentication via Bearer token.
