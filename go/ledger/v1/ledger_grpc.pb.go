// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ledger/v1/ledger.proto

package ledgerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LedgerService_SearchLedgers_FullMethodName            = "/ledger.v1.LedgerService/SearchLedgers"
	LedgerService_CreateLedger_FullMethodName             = "/ledger.v1.LedgerService/CreateLedger"
	LedgerService_UpdateLedger_FullMethodName             = "/ledger.v1.LedgerService/UpdateLedger"
	LedgerService_SearchAccounts_FullMethodName           = "/ledger.v1.LedgerService/SearchAccounts"
	LedgerService_CreateAccount_FullMethodName            = "/ledger.v1.LedgerService/CreateAccount"
	LedgerService_UpdateAccount_FullMethodName            = "/ledger.v1.LedgerService/UpdateAccount"
	LedgerService_SearchTransactions_FullMethodName       = "/ledger.v1.LedgerService/SearchTransactions"
	LedgerService_CreateTransaction_FullMethodName        = "/ledger.v1.LedgerService/CreateTransaction"
	LedgerService_ReverseTransaction_FullMethodName       = "/ledger.v1.LedgerService/ReverseTransaction"
	LedgerService_UpdateTransaction_FullMethodName        = "/ledger.v1.LedgerService/UpdateTransaction"
	LedgerService_SearchTransactionEntries_FullMethodName = "/ledger.v1.LedgerService/SearchTransactionEntries"
)

// LedgerServiceClient is the client API for LedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ledger service definition.
type LedgerServiceClient interface {
	// Searches for an ledger based on details
	SearchLedgers(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Ledger], error)
	// Creates a new ledger based on supplied data
	CreateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Ledger, error)
	// Updates the data component of the ledger.
	UpdateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Ledger, error)
	// Searches for an account based on details
	SearchAccounts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Account], error)
	// Creates a new account based on supplied data
	CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	// Updates the data component of the account.
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	// Searches for a transaction based on details
	SearchTransactions(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Transaction], error)
	// Creates a new transaction
	CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	// Reverses a transaction by creating a new one with inverted entries
	ReverseTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	// Updates a transaction's details
	UpdateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	// Searches for entries matching the search details
	SearchTransactionEntries(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionEntry], error)
}

type ledgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerServiceClient(cc grpc.ClientConnInterface) LedgerServiceClient {
	return &ledgerServiceClient{cc}
}

func (c *ledgerServiceClient) SearchLedgers(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Ledger], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LedgerService_ServiceDesc.Streams[0], LedgerService_SearchLedgers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchRequest, Ledger]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerService_SearchLedgersClient = grpc.ServerStreamingClient[Ledger]

func (c *ledgerServiceClient) CreateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Ledger, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ledger)
	err := c.cc.Invoke(ctx, LedgerService_CreateLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) UpdateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Ledger, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ledger)
	err := c.cc.Invoke(ctx, LedgerService_UpdateLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) SearchAccounts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Account], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LedgerService_ServiceDesc.Streams[1], LedgerService_SearchAccounts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchRequest, Account]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerService_SearchAccountsClient = grpc.ServerStreamingClient[Account]

func (c *ledgerServiceClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, LedgerService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, LedgerService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) SearchTransactions(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Transaction], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LedgerService_ServiceDesc.Streams[2], LedgerService_SearchTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchRequest, Transaction]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerService_SearchTransactionsClient = grpc.ServerStreamingClient[Transaction]

func (c *ledgerServiceClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, LedgerService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) ReverseTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, LedgerService_ReverseTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) UpdateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, LedgerService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) SearchTransactionEntries(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LedgerService_ServiceDesc.Streams[3], LedgerService_SearchTransactionEntries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchRequest, TransactionEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerService_SearchTransactionEntriesClient = grpc.ServerStreamingClient[TransactionEntry]

// LedgerServiceServer is the server API for LedgerService service.
// All implementations must embed UnimplementedLedgerServiceServer
// for forward compatibility.
//
// The ledger service definition.
type LedgerServiceServer interface {
	// Searches for an ledger based on details
	SearchLedgers(*SearchRequest, grpc.ServerStreamingServer[Ledger]) error
	// Creates a new ledger based on supplied data
	CreateLedger(context.Context, *Ledger) (*Ledger, error)
	// Updates the data component of the ledger.
	UpdateLedger(context.Context, *Ledger) (*Ledger, error)
	// Searches for an account based on details
	SearchAccounts(*SearchRequest, grpc.ServerStreamingServer[Account]) error
	// Creates a new account based on supplied data
	CreateAccount(context.Context, *Account) (*Account, error)
	// Updates the data component of the account.
	UpdateAccount(context.Context, *Account) (*Account, error)
	// Searches for a transaction based on details
	SearchTransactions(*SearchRequest, grpc.ServerStreamingServer[Transaction]) error
	// Creates a new transaction
	CreateTransaction(context.Context, *Transaction) (*Transaction, error)
	// Reverses a transaction by creating a new one with inverted entries
	ReverseTransaction(context.Context, *Transaction) (*Transaction, error)
	// Updates a transaction's details
	UpdateTransaction(context.Context, *Transaction) (*Transaction, error)
	// Searches for entries matching the search details
	SearchTransactionEntries(*SearchRequest, grpc.ServerStreamingServer[TransactionEntry]) error
	mustEmbedUnimplementedLedgerServiceServer()
}

// UnimplementedLedgerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLedgerServiceServer struct{}

func (UnimplementedLedgerServiceServer) SearchLedgers(*SearchRequest, grpc.ServerStreamingServer[Ledger]) error {
	return status.Errorf(codes.Unimplemented, "method SearchLedgers not implemented")
}
func (UnimplementedLedgerServiceServer) CreateLedger(context.Context, *Ledger) (*Ledger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedger not implemented")
}
func (UnimplementedLedgerServiceServer) UpdateLedger(context.Context, *Ledger) (*Ledger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLedger not implemented")
}
func (UnimplementedLedgerServiceServer) SearchAccounts(*SearchRequest, grpc.ServerStreamingServer[Account]) error {
	return status.Errorf(codes.Unimplemented, "method SearchAccounts not implemented")
}
func (UnimplementedLedgerServiceServer) CreateAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedLedgerServiceServer) UpdateAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedLedgerServiceServer) SearchTransactions(*SearchRequest, grpc.ServerStreamingServer[Transaction]) error {
	return status.Errorf(codes.Unimplemented, "method SearchTransactions not implemented")
}
func (UnimplementedLedgerServiceServer) CreateTransaction(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedLedgerServiceServer) ReverseTransaction(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseTransaction not implemented")
}
func (UnimplementedLedgerServiceServer) UpdateTransaction(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedLedgerServiceServer) SearchTransactionEntries(*SearchRequest, grpc.ServerStreamingServer[TransactionEntry]) error {
	return status.Errorf(codes.Unimplemented, "method SearchTransactionEntries not implemented")
}
func (UnimplementedLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {}
func (UnimplementedLedgerServiceServer) testEmbeddedByValue()                       {}

// UnsafeLedgerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServiceServer will
// result in compilation errors.
type UnsafeLedgerServiceServer interface {
	mustEmbedUnimplementedLedgerServiceServer()
}

func RegisterLedgerServiceServer(s grpc.ServiceRegistrar, srv LedgerServiceServer) {
	// If the following call pancis, it indicates UnimplementedLedgerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LedgerService_ServiceDesc, srv)
}

func _LedgerService_SearchLedgers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerServiceServer).SearchLedgers(m, &grpc.GenericServerStream[SearchRequest, Ledger]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerService_SearchLedgersServer = grpc.ServerStreamingServer[Ledger]

func _LedgerService_CreateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ledger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).CreateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_CreateLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).CreateLedger(ctx, req.(*Ledger))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_UpdateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ledger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).UpdateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_UpdateLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).UpdateLedger(ctx, req.(*Ledger))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_SearchAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerServiceServer).SearchAccounts(m, &grpc.GenericServerStream[SearchRequest, Account]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerService_SearchAccountsServer = grpc.ServerStreamingServer[Account]

func _LedgerService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).CreateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_SearchTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerServiceServer).SearchTransactions(m, &grpc.GenericServerStream[SearchRequest, Transaction]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerService_SearchTransactionsServer = grpc.ServerStreamingServer[Transaction]

func _LedgerService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).CreateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_ReverseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).ReverseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_ReverseTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).ReverseTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).UpdateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_SearchTransactionEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerServiceServer).SearchTransactionEntries(m, &grpc.GenericServerStream[SearchRequest, TransactionEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerService_SearchTransactionEntriesServer = grpc.ServerStreamingServer[TransactionEntry]

// LedgerService_ServiceDesc is the grpc.ServiceDesc for LedgerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.v1.LedgerService",
	HandlerType: (*LedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLedger",
			Handler:    _LedgerService_CreateLedger_Handler,
		},
		{
			MethodName: "UpdateLedger",
			Handler:    _LedgerService_UpdateLedger_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _LedgerService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _LedgerService_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _LedgerService_CreateTransaction_Handler,
		},
		{
			MethodName: "ReverseTransaction",
			Handler:    _LedgerService_ReverseTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _LedgerService_UpdateTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchLedgers",
			Handler:       _LedgerService_SearchLedgers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchAccounts",
			Handler:       _LedgerService_SearchAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchTransactions",
			Handler:       _LedgerService_SearchTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchTransactionEntries",
			Handler:       _LedgerService_SearchTransactionEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ledger/v1/ledger.proto",
}
