// Code generated by MockGen. DO NOT EDIT.
// Source: /home/kimongi/code/apis/go/ledger/v1/ledger_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/kimongi/code/apis/go/ledger/v1/ledger_grpc.pb.go -package=ledgerv1 -destination=/home/kimongi/code/apis/go/ledger/v1/ledger_grpc_mock.go
//

// Package ledgerv1 is a generated GoMock package.
package ledgerv1

import (
	context "context"
	reflect "reflect"

	commonv1 "github.com/antinvestor/apis/go/common/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLedgerServiceClient is a mock of LedgerServiceClient interface.
type MockLedgerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerServiceClientMockRecorder
	isgomock struct{}
}

// MockLedgerServiceClientMockRecorder is the mock recorder for MockLedgerServiceClient.
type MockLedgerServiceClientMockRecorder struct {
	mock *MockLedgerServiceClient
}

// NewMockLedgerServiceClient creates a new mock instance.
func NewMockLedgerServiceClient(ctrl *gomock.Controller) *MockLedgerServiceClient {
	mock := &MockLedgerServiceClient{ctrl: ctrl}
	mock.recorder = &MockLedgerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerServiceClient) EXPECT() *MockLedgerServiceClientMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockLedgerServiceClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockLedgerServiceClientMockRecorder) CreateAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockLedgerServiceClient)(nil).CreateAccount), varargs...)
}

// CreateLedger mocks base method.
func (m *MockLedgerServiceClient) CreateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Ledger, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLedger", varargs...)
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedger indicates an expected call of CreateLedger.
func (mr *MockLedgerServiceClientMockRecorder) CreateLedger(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedger", reflect.TypeOf((*MockLedgerServiceClient)(nil).CreateLedger), varargs...)
}

// CreateTransaction mocks base method.
func (m *MockLedgerServiceClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransaction", varargs...)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockLedgerServiceClientMockRecorder) CreateTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockLedgerServiceClient)(nil).CreateTransaction), varargs...)
}

// ReverseTransaction mocks base method.
func (m *MockLedgerServiceClient) ReverseTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReverseTransaction", varargs...)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseTransaction indicates an expected call of ReverseTransaction.
func (mr *MockLedgerServiceClientMockRecorder) ReverseTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseTransaction", reflect.TypeOf((*MockLedgerServiceClient)(nil).ReverseTransaction), varargs...)
}

// SearchAccounts mocks base method.
func (m *MockLedgerServiceClient) SearchAccounts(ctx context.Context, in *commonv1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Account], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAccounts", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[Account])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccounts indicates an expected call of SearchAccounts.
func (mr *MockLedgerServiceClientMockRecorder) SearchAccounts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccounts", reflect.TypeOf((*MockLedgerServiceClient)(nil).SearchAccounts), varargs...)
}

// SearchLedgers mocks base method.
func (m *MockLedgerServiceClient) SearchLedgers(ctx context.Context, in *commonv1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Ledger], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchLedgers", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[Ledger])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLedgers indicates an expected call of SearchLedgers.
func (mr *MockLedgerServiceClientMockRecorder) SearchLedgers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLedgers", reflect.TypeOf((*MockLedgerServiceClient)(nil).SearchLedgers), varargs...)
}

// SearchTransactionEntries mocks base method.
func (m *MockLedgerServiceClient) SearchTransactionEntries(ctx context.Context, in *commonv1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionEntry], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTransactionEntries", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[TransactionEntry])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTransactionEntries indicates an expected call of SearchTransactionEntries.
func (mr *MockLedgerServiceClientMockRecorder) SearchTransactionEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactionEntries", reflect.TypeOf((*MockLedgerServiceClient)(nil).SearchTransactionEntries), varargs...)
}

// SearchTransactions mocks base method.
func (m *MockLedgerServiceClient) SearchTransactions(ctx context.Context, in *commonv1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Transaction], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTransactions", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[Transaction])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTransactions indicates an expected call of SearchTransactions.
func (mr *MockLedgerServiceClientMockRecorder) SearchTransactions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactions", reflect.TypeOf((*MockLedgerServiceClient)(nil).SearchTransactions), varargs...)
}

// UpdateAccount mocks base method.
func (m *MockLedgerServiceClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockLedgerServiceClientMockRecorder) UpdateAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockLedgerServiceClient)(nil).UpdateAccount), varargs...)
}

// UpdateLedger mocks base method.
func (m *MockLedgerServiceClient) UpdateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Ledger, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLedger", varargs...)
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedger indicates an expected call of UpdateLedger.
func (mr *MockLedgerServiceClientMockRecorder) UpdateLedger(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedger", reflect.TypeOf((*MockLedgerServiceClient)(nil).UpdateLedger), varargs...)
}

// UpdateTransaction mocks base method.
func (m *MockLedgerServiceClient) UpdateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransaction", varargs...)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockLedgerServiceClientMockRecorder) UpdateTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockLedgerServiceClient)(nil).UpdateTransaction), varargs...)
}

// MockLedgerServiceServer is a mock of LedgerServiceServer interface.
type MockLedgerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerServiceServerMockRecorder
	isgomock struct{}
}

// MockLedgerServiceServerMockRecorder is the mock recorder for MockLedgerServiceServer.
type MockLedgerServiceServerMockRecorder struct {
	mock *MockLedgerServiceServer
}

// NewMockLedgerServiceServer creates a new mock instance.
func NewMockLedgerServiceServer(ctrl *gomock.Controller) *MockLedgerServiceServer {
	mock := &MockLedgerServiceServer{ctrl: ctrl}
	mock.recorder = &MockLedgerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerServiceServer) EXPECT() *MockLedgerServiceServerMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockLedgerServiceServer) CreateAccount(arg0 context.Context, arg1 *Account) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockLedgerServiceServerMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockLedgerServiceServer)(nil).CreateAccount), arg0, arg1)
}

// CreateLedger mocks base method.
func (m *MockLedgerServiceServer) CreateLedger(arg0 context.Context, arg1 *Ledger) (*Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedger", arg0, arg1)
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedger indicates an expected call of CreateLedger.
func (mr *MockLedgerServiceServerMockRecorder) CreateLedger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedger", reflect.TypeOf((*MockLedgerServiceServer)(nil).CreateLedger), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockLedgerServiceServer) CreateTransaction(arg0 context.Context, arg1 *Transaction) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockLedgerServiceServerMockRecorder) CreateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockLedgerServiceServer)(nil).CreateTransaction), arg0, arg1)
}

// ReverseTransaction mocks base method.
func (m *MockLedgerServiceServer) ReverseTransaction(arg0 context.Context, arg1 *Transaction) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseTransaction", arg0, arg1)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseTransaction indicates an expected call of ReverseTransaction.
func (mr *MockLedgerServiceServerMockRecorder) ReverseTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseTransaction", reflect.TypeOf((*MockLedgerServiceServer)(nil).ReverseTransaction), arg0, arg1)
}

// SearchAccounts mocks base method.
func (m *MockLedgerServiceServer) SearchAccounts(arg0 *commonv1.SearchRequest, arg1 grpc.ServerStreamingServer[Account]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAccounts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchAccounts indicates an expected call of SearchAccounts.
func (mr *MockLedgerServiceServerMockRecorder) SearchAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccounts", reflect.TypeOf((*MockLedgerServiceServer)(nil).SearchAccounts), arg0, arg1)
}

// SearchLedgers mocks base method.
func (m *MockLedgerServiceServer) SearchLedgers(arg0 *commonv1.SearchRequest, arg1 grpc.ServerStreamingServer[Ledger]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLedgers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchLedgers indicates an expected call of SearchLedgers.
func (mr *MockLedgerServiceServerMockRecorder) SearchLedgers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLedgers", reflect.TypeOf((*MockLedgerServiceServer)(nil).SearchLedgers), arg0, arg1)
}

// SearchTransactionEntries mocks base method.
func (m *MockLedgerServiceServer) SearchTransactionEntries(arg0 *commonv1.SearchRequest, arg1 grpc.ServerStreamingServer[TransactionEntry]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTransactionEntries", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTransactionEntries indicates an expected call of SearchTransactionEntries.
func (mr *MockLedgerServiceServerMockRecorder) SearchTransactionEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactionEntries", reflect.TypeOf((*MockLedgerServiceServer)(nil).SearchTransactionEntries), arg0, arg1)
}

// SearchTransactions mocks base method.
func (m *MockLedgerServiceServer) SearchTransactions(arg0 *commonv1.SearchRequest, arg1 grpc.ServerStreamingServer[Transaction]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTransactions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTransactions indicates an expected call of SearchTransactions.
func (mr *MockLedgerServiceServerMockRecorder) SearchTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactions", reflect.TypeOf((*MockLedgerServiceServer)(nil).SearchTransactions), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockLedgerServiceServer) UpdateAccount(arg0 context.Context, arg1 *Account) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockLedgerServiceServerMockRecorder) UpdateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockLedgerServiceServer)(nil).UpdateAccount), arg0, arg1)
}

// UpdateLedger mocks base method.
func (m *MockLedgerServiceServer) UpdateLedger(arg0 context.Context, arg1 *Ledger) (*Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLedger", arg0, arg1)
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedger indicates an expected call of UpdateLedger.
func (mr *MockLedgerServiceServerMockRecorder) UpdateLedger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedger", reflect.TypeOf((*MockLedgerServiceServer)(nil).UpdateLedger), arg0, arg1)
}

// UpdateTransaction mocks base method.
func (m *MockLedgerServiceServer) UpdateTransaction(arg0 context.Context, arg1 *Transaction) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockLedgerServiceServerMockRecorder) UpdateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockLedgerServiceServer)(nil).UpdateTransaction), arg0, arg1)
}

// mustEmbedUnimplementedLedgerServiceServer mocks base method.
func (m *MockLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLedgerServiceServer")
}

// mustEmbedUnimplementedLedgerServiceServer indicates an expected call of mustEmbedUnimplementedLedgerServiceServer.
func (mr *MockLedgerServiceServerMockRecorder) mustEmbedUnimplementedLedgerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLedgerServiceServer", reflect.TypeOf((*MockLedgerServiceServer)(nil).mustEmbedUnimplementedLedgerServiceServer))
}

// MockUnsafeLedgerServiceServer is a mock of UnsafeLedgerServiceServer interface.
type MockUnsafeLedgerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLedgerServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeLedgerServiceServerMockRecorder is the mock recorder for MockUnsafeLedgerServiceServer.
type MockUnsafeLedgerServiceServerMockRecorder struct {
	mock *MockUnsafeLedgerServiceServer
}

// NewMockUnsafeLedgerServiceServer creates a new mock instance.
func NewMockUnsafeLedgerServiceServer(ctrl *gomock.Controller) *MockUnsafeLedgerServiceServer {
	mock := &MockUnsafeLedgerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLedgerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLedgerServiceServer) EXPECT() *MockUnsafeLedgerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLedgerServiceServer mocks base method.
func (m *MockUnsafeLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLedgerServiceServer")
}

// mustEmbedUnimplementedLedgerServiceServer indicates an expected call of mustEmbedUnimplementedLedgerServiceServer.
func (mr *MockUnsafeLedgerServiceServerMockRecorder) mustEmbedUnimplementedLedgerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLedgerServiceServer", reflect.TypeOf((*MockUnsafeLedgerServiceServer)(nil).mustEmbedUnimplementedLedgerServiceServer))
}
