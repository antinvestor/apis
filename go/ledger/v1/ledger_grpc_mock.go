// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/ledger/v1/ledger_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/ledger/v1/ledger_grpc.pb.go -package=ledgerv1 -destination=/home/j/code/antinvestor/apis/go/ledger/v1/ledger_grpc_mock.go
//
// Package ledgerv1 is a generated GoMock package.
package ledgerv1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockLedgerServiceClient is a mock of LedgerServiceClient interface.
type MockLedgerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerServiceClientMockRecorder
}

// MockLedgerServiceClientMockRecorder is the mock recorder for MockLedgerServiceClient.
type MockLedgerServiceClientMockRecorder struct {
	mock *MockLedgerServiceClient
}

// NewMockLedgerServiceClient creates a new mock instance.
func NewMockLedgerServiceClient(ctrl *gomock.Controller) *MockLedgerServiceClient {
	mock := &MockLedgerServiceClient{ctrl: ctrl}
	mock.recorder = &MockLedgerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerServiceClient) EXPECT() *MockLedgerServiceClientMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockLedgerServiceClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockLedgerServiceClientMockRecorder) CreateAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockLedgerServiceClient)(nil).CreateAccount), varargs...)
}

// CreateLedger mocks base method.
func (m *MockLedgerServiceClient) CreateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Ledger, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLedger", varargs...)
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedger indicates an expected call of CreateLedger.
func (mr *MockLedgerServiceClientMockRecorder) CreateLedger(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedger", reflect.TypeOf((*MockLedgerServiceClient)(nil).CreateLedger), varargs...)
}

// CreateTransaction mocks base method.
func (m *MockLedgerServiceClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransaction", varargs...)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockLedgerServiceClientMockRecorder) CreateTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockLedgerServiceClient)(nil).CreateTransaction), varargs...)
}

// ReverseTransaction mocks base method.
func (m *MockLedgerServiceClient) ReverseTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReverseTransaction", varargs...)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseTransaction indicates an expected call of ReverseTransaction.
func (mr *MockLedgerServiceClientMockRecorder) ReverseTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseTransaction", reflect.TypeOf((*MockLedgerServiceClient)(nil).ReverseTransaction), varargs...)
}

// SearchAccounts mocks base method.
func (m *MockLedgerServiceClient) SearchAccounts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (LedgerService_SearchAccountsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAccounts", varargs...)
	ret0, _ := ret[0].(LedgerService_SearchAccountsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccounts indicates an expected call of SearchAccounts.
func (mr *MockLedgerServiceClientMockRecorder) SearchAccounts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccounts", reflect.TypeOf((*MockLedgerServiceClient)(nil).SearchAccounts), varargs...)
}

// SearchLedgers mocks base method.
func (m *MockLedgerServiceClient) SearchLedgers(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (LedgerService_SearchLedgersClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchLedgers", varargs...)
	ret0, _ := ret[0].(LedgerService_SearchLedgersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLedgers indicates an expected call of SearchLedgers.
func (mr *MockLedgerServiceClientMockRecorder) SearchLedgers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLedgers", reflect.TypeOf((*MockLedgerServiceClient)(nil).SearchLedgers), varargs...)
}

// SearchTransactionEntries mocks base method.
func (m *MockLedgerServiceClient) SearchTransactionEntries(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (LedgerService_SearchTransactionEntriesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTransactionEntries", varargs...)
	ret0, _ := ret[0].(LedgerService_SearchTransactionEntriesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTransactionEntries indicates an expected call of SearchTransactionEntries.
func (mr *MockLedgerServiceClientMockRecorder) SearchTransactionEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactionEntries", reflect.TypeOf((*MockLedgerServiceClient)(nil).SearchTransactionEntries), varargs...)
}

// SearchTransactions mocks base method.
func (m *MockLedgerServiceClient) SearchTransactions(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (LedgerService_SearchTransactionsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTransactions", varargs...)
	ret0, _ := ret[0].(LedgerService_SearchTransactionsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTransactions indicates an expected call of SearchTransactions.
func (mr *MockLedgerServiceClientMockRecorder) SearchTransactions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactions", reflect.TypeOf((*MockLedgerServiceClient)(nil).SearchTransactions), varargs...)
}

// UpdateAccount mocks base method.
func (m *MockLedgerServiceClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockLedgerServiceClientMockRecorder) UpdateAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockLedgerServiceClient)(nil).UpdateAccount), varargs...)
}

// UpdateLedger mocks base method.
func (m *MockLedgerServiceClient) UpdateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Ledger, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLedger", varargs...)
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedger indicates an expected call of UpdateLedger.
func (mr *MockLedgerServiceClientMockRecorder) UpdateLedger(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedger", reflect.TypeOf((*MockLedgerServiceClient)(nil).UpdateLedger), varargs...)
}

// UpdateTransaction mocks base method.
func (m *MockLedgerServiceClient) UpdateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransaction", varargs...)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockLedgerServiceClientMockRecorder) UpdateTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockLedgerServiceClient)(nil).UpdateTransaction), varargs...)
}

// MockLedgerService_SearchLedgersClient is a mock of LedgerService_SearchLedgersClient interface.
type MockLedgerService_SearchLedgersClient struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerService_SearchLedgersClientMockRecorder
}

// MockLedgerService_SearchLedgersClientMockRecorder is the mock recorder for MockLedgerService_SearchLedgersClient.
type MockLedgerService_SearchLedgersClientMockRecorder struct {
	mock *MockLedgerService_SearchLedgersClient
}

// NewMockLedgerService_SearchLedgersClient creates a new mock instance.
func NewMockLedgerService_SearchLedgersClient(ctrl *gomock.Controller) *MockLedgerService_SearchLedgersClient {
	mock := &MockLedgerService_SearchLedgersClient{ctrl: ctrl}
	mock.recorder = &MockLedgerService_SearchLedgersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerService_SearchLedgersClient) EXPECT() *MockLedgerService_SearchLedgersClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLedgerService_SearchLedgersClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLedgerService_SearchLedgersClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLedgerService_SearchLedgersClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLedgerService_SearchLedgersClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLedgerService_SearchLedgersClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLedgerService_SearchLedgersClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLedgerService_SearchLedgersClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLedgerService_SearchLedgersClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLedgerService_SearchLedgersClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLedgerService_SearchLedgersClient) Recv() (*Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLedgerService_SearchLedgersClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLedgerService_SearchLedgersClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLedgerService_SearchLedgersClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLedgerService_SearchLedgersClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLedgerService_SearchLedgersClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLedgerService_SearchLedgersClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLedgerService_SearchLedgersClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLedgerService_SearchLedgersClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLedgerService_SearchLedgersClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLedgerService_SearchLedgersClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLedgerService_SearchLedgersClient)(nil).Trailer))
}

// MockLedgerService_SearchAccountsClient is a mock of LedgerService_SearchAccountsClient interface.
type MockLedgerService_SearchAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerService_SearchAccountsClientMockRecorder
}

// MockLedgerService_SearchAccountsClientMockRecorder is the mock recorder for MockLedgerService_SearchAccountsClient.
type MockLedgerService_SearchAccountsClientMockRecorder struct {
	mock *MockLedgerService_SearchAccountsClient
}

// NewMockLedgerService_SearchAccountsClient creates a new mock instance.
func NewMockLedgerService_SearchAccountsClient(ctrl *gomock.Controller) *MockLedgerService_SearchAccountsClient {
	mock := &MockLedgerService_SearchAccountsClient{ctrl: ctrl}
	mock.recorder = &MockLedgerService_SearchAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerService_SearchAccountsClient) EXPECT() *MockLedgerService_SearchAccountsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLedgerService_SearchAccountsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLedgerService_SearchAccountsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLedgerService_SearchAccountsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLedgerService_SearchAccountsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLedgerService_SearchAccountsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLedgerService_SearchAccountsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLedgerService_SearchAccountsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLedgerService_SearchAccountsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLedgerService_SearchAccountsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLedgerService_SearchAccountsClient) Recv() (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLedgerService_SearchAccountsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLedgerService_SearchAccountsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLedgerService_SearchAccountsClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLedgerService_SearchAccountsClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLedgerService_SearchAccountsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLedgerService_SearchAccountsClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLedgerService_SearchAccountsClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLedgerService_SearchAccountsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLedgerService_SearchAccountsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLedgerService_SearchAccountsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLedgerService_SearchAccountsClient)(nil).Trailer))
}

// MockLedgerService_SearchTransactionsClient is a mock of LedgerService_SearchTransactionsClient interface.
type MockLedgerService_SearchTransactionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerService_SearchTransactionsClientMockRecorder
}

// MockLedgerService_SearchTransactionsClientMockRecorder is the mock recorder for MockLedgerService_SearchTransactionsClient.
type MockLedgerService_SearchTransactionsClientMockRecorder struct {
	mock *MockLedgerService_SearchTransactionsClient
}

// NewMockLedgerService_SearchTransactionsClient creates a new mock instance.
func NewMockLedgerService_SearchTransactionsClient(ctrl *gomock.Controller) *MockLedgerService_SearchTransactionsClient {
	mock := &MockLedgerService_SearchTransactionsClient{ctrl: ctrl}
	mock.recorder = &MockLedgerService_SearchTransactionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerService_SearchTransactionsClient) EXPECT() *MockLedgerService_SearchTransactionsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLedgerService_SearchTransactionsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLedgerService_SearchTransactionsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLedgerService_SearchTransactionsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLedgerService_SearchTransactionsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLedgerService_SearchTransactionsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLedgerService_SearchTransactionsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLedgerService_SearchTransactionsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLedgerService_SearchTransactionsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLedgerService_SearchTransactionsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLedgerService_SearchTransactionsClient) Recv() (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLedgerService_SearchTransactionsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLedgerService_SearchTransactionsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLedgerService_SearchTransactionsClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLedgerService_SearchTransactionsClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLedgerService_SearchTransactionsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLedgerService_SearchTransactionsClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLedgerService_SearchTransactionsClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLedgerService_SearchTransactionsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLedgerService_SearchTransactionsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLedgerService_SearchTransactionsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLedgerService_SearchTransactionsClient)(nil).Trailer))
}

// MockLedgerService_SearchTransactionEntriesClient is a mock of LedgerService_SearchTransactionEntriesClient interface.
type MockLedgerService_SearchTransactionEntriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerService_SearchTransactionEntriesClientMockRecorder
}

// MockLedgerService_SearchTransactionEntriesClientMockRecorder is the mock recorder for MockLedgerService_SearchTransactionEntriesClient.
type MockLedgerService_SearchTransactionEntriesClientMockRecorder struct {
	mock *MockLedgerService_SearchTransactionEntriesClient
}

// NewMockLedgerService_SearchTransactionEntriesClient creates a new mock instance.
func NewMockLedgerService_SearchTransactionEntriesClient(ctrl *gomock.Controller) *MockLedgerService_SearchTransactionEntriesClient {
	mock := &MockLedgerService_SearchTransactionEntriesClient{ctrl: ctrl}
	mock.recorder = &MockLedgerService_SearchTransactionEntriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerService_SearchTransactionEntriesClient) EXPECT() *MockLedgerService_SearchTransactionEntriesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLedgerService_SearchTransactionEntriesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLedgerService_SearchTransactionEntriesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLedgerService_SearchTransactionEntriesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesClient) Recv() (*TransactionEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TransactionEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLedgerService_SearchTransactionEntriesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLedgerService_SearchTransactionEntriesClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLedgerService_SearchTransactionEntriesClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLedgerService_SearchTransactionEntriesClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLedgerService_SearchTransactionEntriesClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLedgerService_SearchTransactionEntriesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesClient)(nil).Trailer))
}

// MockLedgerServiceServer is a mock of LedgerServiceServer interface.
type MockLedgerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerServiceServerMockRecorder
}

// MockLedgerServiceServerMockRecorder is the mock recorder for MockLedgerServiceServer.
type MockLedgerServiceServerMockRecorder struct {
	mock *MockLedgerServiceServer
}

// NewMockLedgerServiceServer creates a new mock instance.
func NewMockLedgerServiceServer(ctrl *gomock.Controller) *MockLedgerServiceServer {
	mock := &MockLedgerServiceServer{ctrl: ctrl}
	mock.recorder = &MockLedgerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerServiceServer) EXPECT() *MockLedgerServiceServerMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockLedgerServiceServer) CreateAccount(arg0 context.Context, arg1 *Account) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockLedgerServiceServerMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockLedgerServiceServer)(nil).CreateAccount), arg0, arg1)
}

// CreateLedger mocks base method.
func (m *MockLedgerServiceServer) CreateLedger(arg0 context.Context, arg1 *Ledger) (*Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedger", arg0, arg1)
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedger indicates an expected call of CreateLedger.
func (mr *MockLedgerServiceServerMockRecorder) CreateLedger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedger", reflect.TypeOf((*MockLedgerServiceServer)(nil).CreateLedger), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockLedgerServiceServer) CreateTransaction(arg0 context.Context, arg1 *Transaction) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockLedgerServiceServerMockRecorder) CreateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockLedgerServiceServer)(nil).CreateTransaction), arg0, arg1)
}

// ReverseTransaction mocks base method.
func (m *MockLedgerServiceServer) ReverseTransaction(arg0 context.Context, arg1 *Transaction) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseTransaction", arg0, arg1)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseTransaction indicates an expected call of ReverseTransaction.
func (mr *MockLedgerServiceServerMockRecorder) ReverseTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseTransaction", reflect.TypeOf((*MockLedgerServiceServer)(nil).ReverseTransaction), arg0, arg1)
}

// SearchAccounts mocks base method.
func (m *MockLedgerServiceServer) SearchAccounts(arg0 *SearchRequest, arg1 LedgerService_SearchAccountsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAccounts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchAccounts indicates an expected call of SearchAccounts.
func (mr *MockLedgerServiceServerMockRecorder) SearchAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccounts", reflect.TypeOf((*MockLedgerServiceServer)(nil).SearchAccounts), arg0, arg1)
}

// SearchLedgers mocks base method.
func (m *MockLedgerServiceServer) SearchLedgers(arg0 *SearchRequest, arg1 LedgerService_SearchLedgersServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLedgers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchLedgers indicates an expected call of SearchLedgers.
func (mr *MockLedgerServiceServerMockRecorder) SearchLedgers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLedgers", reflect.TypeOf((*MockLedgerServiceServer)(nil).SearchLedgers), arg0, arg1)
}

// SearchTransactionEntries mocks base method.
func (m *MockLedgerServiceServer) SearchTransactionEntries(arg0 *SearchRequest, arg1 LedgerService_SearchTransactionEntriesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTransactionEntries", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTransactionEntries indicates an expected call of SearchTransactionEntries.
func (mr *MockLedgerServiceServerMockRecorder) SearchTransactionEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactionEntries", reflect.TypeOf((*MockLedgerServiceServer)(nil).SearchTransactionEntries), arg0, arg1)
}

// SearchTransactions mocks base method.
func (m *MockLedgerServiceServer) SearchTransactions(arg0 *SearchRequest, arg1 LedgerService_SearchTransactionsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTransactions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTransactions indicates an expected call of SearchTransactions.
func (mr *MockLedgerServiceServerMockRecorder) SearchTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactions", reflect.TypeOf((*MockLedgerServiceServer)(nil).SearchTransactions), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockLedgerServiceServer) UpdateAccount(arg0 context.Context, arg1 *Account) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockLedgerServiceServerMockRecorder) UpdateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockLedgerServiceServer)(nil).UpdateAccount), arg0, arg1)
}

// UpdateLedger mocks base method.
func (m *MockLedgerServiceServer) UpdateLedger(arg0 context.Context, arg1 *Ledger) (*Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLedger", arg0, arg1)
	ret0, _ := ret[0].(*Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedger indicates an expected call of UpdateLedger.
func (mr *MockLedgerServiceServerMockRecorder) UpdateLedger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedger", reflect.TypeOf((*MockLedgerServiceServer)(nil).UpdateLedger), arg0, arg1)
}

// UpdateTransaction mocks base method.
func (m *MockLedgerServiceServer) UpdateTransaction(arg0 context.Context, arg1 *Transaction) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockLedgerServiceServerMockRecorder) UpdateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockLedgerServiceServer)(nil).UpdateTransaction), arg0, arg1)
}

// mustEmbedUnimplementedLedgerServiceServer mocks base method.
func (m *MockLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLedgerServiceServer")
}

// mustEmbedUnimplementedLedgerServiceServer indicates an expected call of mustEmbedUnimplementedLedgerServiceServer.
func (mr *MockLedgerServiceServerMockRecorder) mustEmbedUnimplementedLedgerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLedgerServiceServer", reflect.TypeOf((*MockLedgerServiceServer)(nil).mustEmbedUnimplementedLedgerServiceServer))
}

// MockUnsafeLedgerServiceServer is a mock of UnsafeLedgerServiceServer interface.
type MockUnsafeLedgerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLedgerServiceServerMockRecorder
}

// MockUnsafeLedgerServiceServerMockRecorder is the mock recorder for MockUnsafeLedgerServiceServer.
type MockUnsafeLedgerServiceServerMockRecorder struct {
	mock *MockUnsafeLedgerServiceServer
}

// NewMockUnsafeLedgerServiceServer creates a new mock instance.
func NewMockUnsafeLedgerServiceServer(ctrl *gomock.Controller) *MockUnsafeLedgerServiceServer {
	mock := &MockUnsafeLedgerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLedgerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLedgerServiceServer) EXPECT() *MockUnsafeLedgerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLedgerServiceServer mocks base method.
func (m *MockUnsafeLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLedgerServiceServer")
}

// mustEmbedUnimplementedLedgerServiceServer indicates an expected call of mustEmbedUnimplementedLedgerServiceServer.
func (mr *MockUnsafeLedgerServiceServerMockRecorder) mustEmbedUnimplementedLedgerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLedgerServiceServer", reflect.TypeOf((*MockUnsafeLedgerServiceServer)(nil).mustEmbedUnimplementedLedgerServiceServer))
}

// MockLedgerService_SearchLedgersServer is a mock of LedgerService_SearchLedgersServer interface.
type MockLedgerService_SearchLedgersServer struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerService_SearchLedgersServerMockRecorder
}

// MockLedgerService_SearchLedgersServerMockRecorder is the mock recorder for MockLedgerService_SearchLedgersServer.
type MockLedgerService_SearchLedgersServerMockRecorder struct {
	mock *MockLedgerService_SearchLedgersServer
}

// NewMockLedgerService_SearchLedgersServer creates a new mock instance.
func NewMockLedgerService_SearchLedgersServer(ctrl *gomock.Controller) *MockLedgerService_SearchLedgersServer {
	mock := &MockLedgerService_SearchLedgersServer{ctrl: ctrl}
	mock.recorder = &MockLedgerService_SearchLedgersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerService_SearchLedgersServer) EXPECT() *MockLedgerService_SearchLedgersServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLedgerService_SearchLedgersServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLedgerService_SearchLedgersServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLedgerService_SearchLedgersServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLedgerService_SearchLedgersServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLedgerService_SearchLedgersServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLedgerService_SearchLedgersServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLedgerService_SearchLedgersServer) Send(arg0 *Ledger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLedgerService_SearchLedgersServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLedgerService_SearchLedgersServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLedgerService_SearchLedgersServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLedgerService_SearchLedgersServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLedgerService_SearchLedgersServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLedgerService_SearchLedgersServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLedgerService_SearchLedgersServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLedgerService_SearchLedgersServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLedgerService_SearchLedgersServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLedgerService_SearchLedgersServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLedgerService_SearchLedgersServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLedgerService_SearchLedgersServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLedgerService_SearchLedgersServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLedgerService_SearchLedgersServer)(nil).SetTrailer), arg0)
}

// MockLedgerService_SearchAccountsServer is a mock of LedgerService_SearchAccountsServer interface.
type MockLedgerService_SearchAccountsServer struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerService_SearchAccountsServerMockRecorder
}

// MockLedgerService_SearchAccountsServerMockRecorder is the mock recorder for MockLedgerService_SearchAccountsServer.
type MockLedgerService_SearchAccountsServerMockRecorder struct {
	mock *MockLedgerService_SearchAccountsServer
}

// NewMockLedgerService_SearchAccountsServer creates a new mock instance.
func NewMockLedgerService_SearchAccountsServer(ctrl *gomock.Controller) *MockLedgerService_SearchAccountsServer {
	mock := &MockLedgerService_SearchAccountsServer{ctrl: ctrl}
	mock.recorder = &MockLedgerService_SearchAccountsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerService_SearchAccountsServer) EXPECT() *MockLedgerService_SearchAccountsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLedgerService_SearchAccountsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLedgerService_SearchAccountsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLedgerService_SearchAccountsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLedgerService_SearchAccountsServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLedgerService_SearchAccountsServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLedgerService_SearchAccountsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLedgerService_SearchAccountsServer) Send(arg0 *Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLedgerService_SearchAccountsServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLedgerService_SearchAccountsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLedgerService_SearchAccountsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLedgerService_SearchAccountsServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLedgerService_SearchAccountsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLedgerService_SearchAccountsServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLedgerService_SearchAccountsServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLedgerService_SearchAccountsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLedgerService_SearchAccountsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLedgerService_SearchAccountsServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLedgerService_SearchAccountsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLedgerService_SearchAccountsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLedgerService_SearchAccountsServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLedgerService_SearchAccountsServer)(nil).SetTrailer), arg0)
}

// MockLedgerService_SearchTransactionsServer is a mock of LedgerService_SearchTransactionsServer interface.
type MockLedgerService_SearchTransactionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerService_SearchTransactionsServerMockRecorder
}

// MockLedgerService_SearchTransactionsServerMockRecorder is the mock recorder for MockLedgerService_SearchTransactionsServer.
type MockLedgerService_SearchTransactionsServerMockRecorder struct {
	mock *MockLedgerService_SearchTransactionsServer
}

// NewMockLedgerService_SearchTransactionsServer creates a new mock instance.
func NewMockLedgerService_SearchTransactionsServer(ctrl *gomock.Controller) *MockLedgerService_SearchTransactionsServer {
	mock := &MockLedgerService_SearchTransactionsServer{ctrl: ctrl}
	mock.recorder = &MockLedgerService_SearchTransactionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerService_SearchTransactionsServer) EXPECT() *MockLedgerService_SearchTransactionsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLedgerService_SearchTransactionsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLedgerService_SearchTransactionsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLedgerService_SearchTransactionsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLedgerService_SearchTransactionsServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLedgerService_SearchTransactionsServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLedgerService_SearchTransactionsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLedgerService_SearchTransactionsServer) Send(arg0 *Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLedgerService_SearchTransactionsServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLedgerService_SearchTransactionsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLedgerService_SearchTransactionsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLedgerService_SearchTransactionsServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLedgerService_SearchTransactionsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLedgerService_SearchTransactionsServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLedgerService_SearchTransactionsServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLedgerService_SearchTransactionsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLedgerService_SearchTransactionsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLedgerService_SearchTransactionsServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLedgerService_SearchTransactionsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLedgerService_SearchTransactionsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLedgerService_SearchTransactionsServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLedgerService_SearchTransactionsServer)(nil).SetTrailer), arg0)
}

// MockLedgerService_SearchTransactionEntriesServer is a mock of LedgerService_SearchTransactionEntriesServer interface.
type MockLedgerService_SearchTransactionEntriesServer struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerService_SearchTransactionEntriesServerMockRecorder
}

// MockLedgerService_SearchTransactionEntriesServerMockRecorder is the mock recorder for MockLedgerService_SearchTransactionEntriesServer.
type MockLedgerService_SearchTransactionEntriesServerMockRecorder struct {
	mock *MockLedgerService_SearchTransactionEntriesServer
}

// NewMockLedgerService_SearchTransactionEntriesServer creates a new mock instance.
func NewMockLedgerService_SearchTransactionEntriesServer(ctrl *gomock.Controller) *MockLedgerService_SearchTransactionEntriesServer {
	mock := &MockLedgerService_SearchTransactionEntriesServer{ctrl: ctrl}
	mock.recorder = &MockLedgerService_SearchTransactionEntriesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerService_SearchTransactionEntriesServer) EXPECT() *MockLedgerService_SearchTransactionEntriesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLedgerService_SearchTransactionEntriesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLedgerService_SearchTransactionEntriesServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLedgerService_SearchTransactionEntriesServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesServer) Send(arg0 *TransactionEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLedgerService_SearchTransactionEntriesServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLedgerService_SearchTransactionEntriesServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLedgerService_SearchTransactionEntriesServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLedgerService_SearchTransactionEntriesServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLedgerService_SearchTransactionEntriesServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLedgerService_SearchTransactionEntriesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLedgerService_SearchTransactionEntriesServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLedgerService_SearchTransactionEntriesServer)(nil).SetTrailer), arg0)
}
