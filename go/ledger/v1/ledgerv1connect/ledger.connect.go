// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ledger/v1/ledger.proto

package ledgerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/antinvestor/apis/go/common/v1"
	v11 "github.com/antinvestor/apis/go/ledger/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LedgerServiceName is the fully-qualified name of the LedgerService service.
	LedgerServiceName = "ledger.v1.LedgerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LedgerServiceSearchLedgersProcedure is the fully-qualified name of the LedgerService's
	// SearchLedgers RPC.
	LedgerServiceSearchLedgersProcedure = "/ledger.v1.LedgerService/SearchLedgers"
	// LedgerServiceCreateLedgerProcedure is the fully-qualified name of the LedgerService's
	// CreateLedger RPC.
	LedgerServiceCreateLedgerProcedure = "/ledger.v1.LedgerService/CreateLedger"
	// LedgerServiceUpdateLedgerProcedure is the fully-qualified name of the LedgerService's
	// UpdateLedger RPC.
	LedgerServiceUpdateLedgerProcedure = "/ledger.v1.LedgerService/UpdateLedger"
	// LedgerServiceSearchAccountsProcedure is the fully-qualified name of the LedgerService's
	// SearchAccounts RPC.
	LedgerServiceSearchAccountsProcedure = "/ledger.v1.LedgerService/SearchAccounts"
	// LedgerServiceCreateAccountProcedure is the fully-qualified name of the LedgerService's
	// CreateAccount RPC.
	LedgerServiceCreateAccountProcedure = "/ledger.v1.LedgerService/CreateAccount"
	// LedgerServiceUpdateAccountProcedure is the fully-qualified name of the LedgerService's
	// UpdateAccount RPC.
	LedgerServiceUpdateAccountProcedure = "/ledger.v1.LedgerService/UpdateAccount"
	// LedgerServiceSearchTransactionsProcedure is the fully-qualified name of the LedgerService's
	// SearchTransactions RPC.
	LedgerServiceSearchTransactionsProcedure = "/ledger.v1.LedgerService/SearchTransactions"
	// LedgerServiceCreateTransactionProcedure is the fully-qualified name of the LedgerService's
	// CreateTransaction RPC.
	LedgerServiceCreateTransactionProcedure = "/ledger.v1.LedgerService/CreateTransaction"
	// LedgerServiceReverseTransactionProcedure is the fully-qualified name of the LedgerService's
	// ReverseTransaction RPC.
	LedgerServiceReverseTransactionProcedure = "/ledger.v1.LedgerService/ReverseTransaction"
	// LedgerServiceUpdateTransactionProcedure is the fully-qualified name of the LedgerService's
	// UpdateTransaction RPC.
	LedgerServiceUpdateTransactionProcedure = "/ledger.v1.LedgerService/UpdateTransaction"
	// LedgerServiceSearchTransactionEntriesProcedure is the fully-qualified name of the LedgerService's
	// SearchTransactionEntries RPC.
	LedgerServiceSearchTransactionEntriesProcedure = "/ledger.v1.LedgerService/SearchTransactionEntries"
)

// LedgerServiceClient is a client for the ledger.v1.LedgerService service.
type LedgerServiceClient interface {
	// SearchLedgers finds ledgers in the chart of accounts.
	// Supports filtering by type, parent, and custom properties.
	SearchLedgers(context.Context, *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v11.Ledger], error)
	// CreateLedger creates a new ledger in the chart of accounts.
	// Ledgers can be hierarchical with parent-child relationships.
	CreateLedger(context.Context, *connect.Request[v11.Ledger]) (*connect.Response[v11.Ledger], error)
	// UpdateLedger updates an existing ledger's metadata.
	// The ledger type and reference cannot be changed.
	UpdateLedger(context.Context, *connect.Request[v11.Ledger]) (*connect.Response[v11.Ledger], error)
	// SearchAccounts finds accounts matching specified criteria.
	// Supports filtering by ledger, balance range, and custom properties.
	SearchAccounts(context.Context, *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v11.Account], error)
	// CreateAccount creates a new account within a ledger.
	// Each account tracks balances and transaction history.
	CreateAccount(context.Context, *connect.Request[v11.Account]) (*connect.Response[v11.Account], error)
	// UpdateAccount updates an existing account's metadata.
	// Balances are updated through transactions, not directly.
	UpdateAccount(context.Context, *connect.Request[v11.Account]) (*connect.Response[v11.Account], error)
	// SearchTransactions finds transactions matching specified criteria.
	// Supports filtering by date range, account, currency, and status.
	SearchTransactions(context.Context, *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v11.Transaction], error)
	// CreateTransaction creates a new double-entry transaction.
	// All entries must be balanced (sum of debits = sum of credits).
	CreateTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error)
	// ReverseTransaction reverses a transaction by creating offsetting entries.
	// Creates a new REVERSAL transaction that negates the original.
	ReverseTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error)
	// UpdateTransaction updates a transaction's metadata.
	// Entries and amounts cannot be changed after creation.
	UpdateTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error)
	// SearchTransactionEntries finds individual transaction entries.
	// Useful for account statement generation and reconciliation.
	SearchTransactionEntries(context.Context, *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v11.TransactionEntry], error)
}

// NewLedgerServiceClient constructs a client for the ledger.v1.LedgerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLedgerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LedgerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ledgerServiceMethods := v11.File_ledger_v1_ledger_proto.Services().ByName("LedgerService").Methods()
	return &ledgerServiceClient{
		searchLedgers: connect.NewClient[v1.SearchRequest, v11.Ledger](
			httpClient,
			baseURL+LedgerServiceSearchLedgersProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("SearchLedgers")),
			connect.WithClientOptions(opts...),
		),
		createLedger: connect.NewClient[v11.Ledger, v11.Ledger](
			httpClient,
			baseURL+LedgerServiceCreateLedgerProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("CreateLedger")),
			connect.WithClientOptions(opts...),
		),
		updateLedger: connect.NewClient[v11.Ledger, v11.Ledger](
			httpClient,
			baseURL+LedgerServiceUpdateLedgerProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("UpdateLedger")),
			connect.WithClientOptions(opts...),
		),
		searchAccounts: connect.NewClient[v1.SearchRequest, v11.Account](
			httpClient,
			baseURL+LedgerServiceSearchAccountsProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("SearchAccounts")),
			connect.WithClientOptions(opts...),
		),
		createAccount: connect.NewClient[v11.Account, v11.Account](
			httpClient,
			baseURL+LedgerServiceCreateAccountProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("CreateAccount")),
			connect.WithClientOptions(opts...),
		),
		updateAccount: connect.NewClient[v11.Account, v11.Account](
			httpClient,
			baseURL+LedgerServiceUpdateAccountProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("UpdateAccount")),
			connect.WithClientOptions(opts...),
		),
		searchTransactions: connect.NewClient[v1.SearchRequest, v11.Transaction](
			httpClient,
			baseURL+LedgerServiceSearchTransactionsProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("SearchTransactions")),
			connect.WithClientOptions(opts...),
		),
		createTransaction: connect.NewClient[v11.Transaction, v11.Transaction](
			httpClient,
			baseURL+LedgerServiceCreateTransactionProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("CreateTransaction")),
			connect.WithClientOptions(opts...),
		),
		reverseTransaction: connect.NewClient[v11.Transaction, v11.Transaction](
			httpClient,
			baseURL+LedgerServiceReverseTransactionProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("ReverseTransaction")),
			connect.WithClientOptions(opts...),
		),
		updateTransaction: connect.NewClient[v11.Transaction, v11.Transaction](
			httpClient,
			baseURL+LedgerServiceUpdateTransactionProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("UpdateTransaction")),
			connect.WithClientOptions(opts...),
		),
		searchTransactionEntries: connect.NewClient[v1.SearchRequest, v11.TransactionEntry](
			httpClient,
			baseURL+LedgerServiceSearchTransactionEntriesProcedure,
			connect.WithSchema(ledgerServiceMethods.ByName("SearchTransactionEntries")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ledgerServiceClient implements LedgerServiceClient.
type ledgerServiceClient struct {
	searchLedgers            *connect.Client[v1.SearchRequest, v11.Ledger]
	createLedger             *connect.Client[v11.Ledger, v11.Ledger]
	updateLedger             *connect.Client[v11.Ledger, v11.Ledger]
	searchAccounts           *connect.Client[v1.SearchRequest, v11.Account]
	createAccount            *connect.Client[v11.Account, v11.Account]
	updateAccount            *connect.Client[v11.Account, v11.Account]
	searchTransactions       *connect.Client[v1.SearchRequest, v11.Transaction]
	createTransaction        *connect.Client[v11.Transaction, v11.Transaction]
	reverseTransaction       *connect.Client[v11.Transaction, v11.Transaction]
	updateTransaction        *connect.Client[v11.Transaction, v11.Transaction]
	searchTransactionEntries *connect.Client[v1.SearchRequest, v11.TransactionEntry]
}

// SearchLedgers calls ledger.v1.LedgerService.SearchLedgers.
func (c *ledgerServiceClient) SearchLedgers(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v11.Ledger], error) {
	return c.searchLedgers.CallServerStream(ctx, req)
}

// CreateLedger calls ledger.v1.LedgerService.CreateLedger.
func (c *ledgerServiceClient) CreateLedger(ctx context.Context, req *connect.Request[v11.Ledger]) (*connect.Response[v11.Ledger], error) {
	return c.createLedger.CallUnary(ctx, req)
}

// UpdateLedger calls ledger.v1.LedgerService.UpdateLedger.
func (c *ledgerServiceClient) UpdateLedger(ctx context.Context, req *connect.Request[v11.Ledger]) (*connect.Response[v11.Ledger], error) {
	return c.updateLedger.CallUnary(ctx, req)
}

// SearchAccounts calls ledger.v1.LedgerService.SearchAccounts.
func (c *ledgerServiceClient) SearchAccounts(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v11.Account], error) {
	return c.searchAccounts.CallServerStream(ctx, req)
}

// CreateAccount calls ledger.v1.LedgerService.CreateAccount.
func (c *ledgerServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v11.Account]) (*connect.Response[v11.Account], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// UpdateAccount calls ledger.v1.LedgerService.UpdateAccount.
func (c *ledgerServiceClient) UpdateAccount(ctx context.Context, req *connect.Request[v11.Account]) (*connect.Response[v11.Account], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// SearchTransactions calls ledger.v1.LedgerService.SearchTransactions.
func (c *ledgerServiceClient) SearchTransactions(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v11.Transaction], error) {
	return c.searchTransactions.CallServerStream(ctx, req)
}

// CreateTransaction calls ledger.v1.LedgerService.CreateTransaction.
func (c *ledgerServiceClient) CreateTransaction(ctx context.Context, req *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// ReverseTransaction calls ledger.v1.LedgerService.ReverseTransaction.
func (c *ledgerServiceClient) ReverseTransaction(ctx context.Context, req *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error) {
	return c.reverseTransaction.CallUnary(ctx, req)
}

// UpdateTransaction calls ledger.v1.LedgerService.UpdateTransaction.
func (c *ledgerServiceClient) UpdateTransaction(ctx context.Context, req *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error) {
	return c.updateTransaction.CallUnary(ctx, req)
}

// SearchTransactionEntries calls ledger.v1.LedgerService.SearchTransactionEntries.
func (c *ledgerServiceClient) SearchTransactionEntries(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v11.TransactionEntry], error) {
	return c.searchTransactionEntries.CallServerStream(ctx, req)
}

// LedgerServiceHandler is an implementation of the ledger.v1.LedgerService service.
type LedgerServiceHandler interface {
	// SearchLedgers finds ledgers in the chart of accounts.
	// Supports filtering by type, parent, and custom properties.
	SearchLedgers(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v11.Ledger]) error
	// CreateLedger creates a new ledger in the chart of accounts.
	// Ledgers can be hierarchical with parent-child relationships.
	CreateLedger(context.Context, *connect.Request[v11.Ledger]) (*connect.Response[v11.Ledger], error)
	// UpdateLedger updates an existing ledger's metadata.
	// The ledger type and reference cannot be changed.
	UpdateLedger(context.Context, *connect.Request[v11.Ledger]) (*connect.Response[v11.Ledger], error)
	// SearchAccounts finds accounts matching specified criteria.
	// Supports filtering by ledger, balance range, and custom properties.
	SearchAccounts(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v11.Account]) error
	// CreateAccount creates a new account within a ledger.
	// Each account tracks balances and transaction history.
	CreateAccount(context.Context, *connect.Request[v11.Account]) (*connect.Response[v11.Account], error)
	// UpdateAccount updates an existing account's metadata.
	// Balances are updated through transactions, not directly.
	UpdateAccount(context.Context, *connect.Request[v11.Account]) (*connect.Response[v11.Account], error)
	// SearchTransactions finds transactions matching specified criteria.
	// Supports filtering by date range, account, currency, and status.
	SearchTransactions(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v11.Transaction]) error
	// CreateTransaction creates a new double-entry transaction.
	// All entries must be balanced (sum of debits = sum of credits).
	CreateTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error)
	// ReverseTransaction reverses a transaction by creating offsetting entries.
	// Creates a new REVERSAL transaction that negates the original.
	ReverseTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error)
	// UpdateTransaction updates a transaction's metadata.
	// Entries and amounts cannot be changed after creation.
	UpdateTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error)
	// SearchTransactionEntries finds individual transaction entries.
	// Useful for account statement generation and reconciliation.
	SearchTransactionEntries(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v11.TransactionEntry]) error
}

// NewLedgerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLedgerServiceHandler(svc LedgerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ledgerServiceMethods := v11.File_ledger_v1_ledger_proto.Services().ByName("LedgerService").Methods()
	ledgerServiceSearchLedgersHandler := connect.NewServerStreamHandler(
		LedgerServiceSearchLedgersProcedure,
		svc.SearchLedgers,
		connect.WithSchema(ledgerServiceMethods.ByName("SearchLedgers")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceCreateLedgerHandler := connect.NewUnaryHandler(
		LedgerServiceCreateLedgerProcedure,
		svc.CreateLedger,
		connect.WithSchema(ledgerServiceMethods.ByName("CreateLedger")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceUpdateLedgerHandler := connect.NewUnaryHandler(
		LedgerServiceUpdateLedgerProcedure,
		svc.UpdateLedger,
		connect.WithSchema(ledgerServiceMethods.ByName("UpdateLedger")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceSearchAccountsHandler := connect.NewServerStreamHandler(
		LedgerServiceSearchAccountsProcedure,
		svc.SearchAccounts,
		connect.WithSchema(ledgerServiceMethods.ByName("SearchAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceCreateAccountHandler := connect.NewUnaryHandler(
		LedgerServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(ledgerServiceMethods.ByName("CreateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceUpdateAccountHandler := connect.NewUnaryHandler(
		LedgerServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		connect.WithSchema(ledgerServiceMethods.ByName("UpdateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceSearchTransactionsHandler := connect.NewServerStreamHandler(
		LedgerServiceSearchTransactionsProcedure,
		svc.SearchTransactions,
		connect.WithSchema(ledgerServiceMethods.ByName("SearchTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceCreateTransactionHandler := connect.NewUnaryHandler(
		LedgerServiceCreateTransactionProcedure,
		svc.CreateTransaction,
		connect.WithSchema(ledgerServiceMethods.ByName("CreateTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceReverseTransactionHandler := connect.NewUnaryHandler(
		LedgerServiceReverseTransactionProcedure,
		svc.ReverseTransaction,
		connect.WithSchema(ledgerServiceMethods.ByName("ReverseTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceUpdateTransactionHandler := connect.NewUnaryHandler(
		LedgerServiceUpdateTransactionProcedure,
		svc.UpdateTransaction,
		connect.WithSchema(ledgerServiceMethods.ByName("UpdateTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	ledgerServiceSearchTransactionEntriesHandler := connect.NewServerStreamHandler(
		LedgerServiceSearchTransactionEntriesProcedure,
		svc.SearchTransactionEntries,
		connect.WithSchema(ledgerServiceMethods.ByName("SearchTransactionEntries")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ledger.v1.LedgerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LedgerServiceSearchLedgersProcedure:
			ledgerServiceSearchLedgersHandler.ServeHTTP(w, r)
		case LedgerServiceCreateLedgerProcedure:
			ledgerServiceCreateLedgerHandler.ServeHTTP(w, r)
		case LedgerServiceUpdateLedgerProcedure:
			ledgerServiceUpdateLedgerHandler.ServeHTTP(w, r)
		case LedgerServiceSearchAccountsProcedure:
			ledgerServiceSearchAccountsHandler.ServeHTTP(w, r)
		case LedgerServiceCreateAccountProcedure:
			ledgerServiceCreateAccountHandler.ServeHTTP(w, r)
		case LedgerServiceUpdateAccountProcedure:
			ledgerServiceUpdateAccountHandler.ServeHTTP(w, r)
		case LedgerServiceSearchTransactionsProcedure:
			ledgerServiceSearchTransactionsHandler.ServeHTTP(w, r)
		case LedgerServiceCreateTransactionProcedure:
			ledgerServiceCreateTransactionHandler.ServeHTTP(w, r)
		case LedgerServiceReverseTransactionProcedure:
			ledgerServiceReverseTransactionHandler.ServeHTTP(w, r)
		case LedgerServiceUpdateTransactionProcedure:
			ledgerServiceUpdateTransactionHandler.ServeHTTP(w, r)
		case LedgerServiceSearchTransactionEntriesProcedure:
			ledgerServiceSearchTransactionEntriesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLedgerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLedgerServiceHandler struct{}

func (UnimplementedLedgerServiceHandler) SearchLedgers(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v11.Ledger]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.SearchLedgers is not implemented"))
}

func (UnimplementedLedgerServiceHandler) CreateLedger(context.Context, *connect.Request[v11.Ledger]) (*connect.Response[v11.Ledger], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.CreateLedger is not implemented"))
}

func (UnimplementedLedgerServiceHandler) UpdateLedger(context.Context, *connect.Request[v11.Ledger]) (*connect.Response[v11.Ledger], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.UpdateLedger is not implemented"))
}

func (UnimplementedLedgerServiceHandler) SearchAccounts(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v11.Account]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.SearchAccounts is not implemented"))
}

func (UnimplementedLedgerServiceHandler) CreateAccount(context.Context, *connect.Request[v11.Account]) (*connect.Response[v11.Account], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.CreateAccount is not implemented"))
}

func (UnimplementedLedgerServiceHandler) UpdateAccount(context.Context, *connect.Request[v11.Account]) (*connect.Response[v11.Account], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.UpdateAccount is not implemented"))
}

func (UnimplementedLedgerServiceHandler) SearchTransactions(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v11.Transaction]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.SearchTransactions is not implemented"))
}

func (UnimplementedLedgerServiceHandler) CreateTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.CreateTransaction is not implemented"))
}

func (UnimplementedLedgerServiceHandler) ReverseTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.ReverseTransaction is not implemented"))
}

func (UnimplementedLedgerServiceHandler) UpdateTransaction(context.Context, *connect.Request[v11.Transaction]) (*connect.Response[v11.Transaction], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.UpdateTransaction is not implemented"))
}

func (UnimplementedLedgerServiceHandler) SearchTransactionEntries(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v11.TransactionEntry]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ledger.v1.LedgerService.SearchTransactionEntries is not implemented"))
}
