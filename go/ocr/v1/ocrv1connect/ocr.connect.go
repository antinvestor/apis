// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ocr/v1/ocr.proto

package ocrv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/antinvestor/apis/go/common/v1"
	v1 "github.com/antinvestor/apis/go/ocr/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OCRServiceName is the fully-qualified name of the OCRService service.
	OCRServiceName = "ocr.v1.OCRService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OCRServiceRecognizeProcedure is the fully-qualified name of the OCRService's Recognize RPC.
	OCRServiceRecognizeProcedure = "/ocr.v1.OCRService/Recognize"
	// OCRServiceStatusProcedure is the fully-qualified name of the OCRService's Status RPC.
	OCRServiceStatusProcedure = "/ocr.v1.OCRService/Status"
)

// OCRServiceClient is a client for the ocr.v1.OCRService service.
type OCRServiceClient interface {
	// Recognize performs OCR on one or more files.
	// Supports both synchronous and asynchronous processing.
	Recognize(context.Context, *connect.Request[v1.RecognizeRequest]) (*connect.Response[v1.RecognizeResponse], error)
	// Status retrieves the current status of an async OCR request.
	// Returns processing status and results if available.
	Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
}

// NewOCRServiceClient constructs a client for the ocr.v1.OCRService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOCRServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OCRServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	oCRServiceMethods := v1.File_ocr_v1_ocr_proto.Services().ByName("OCRService").Methods()
	return &oCRServiceClient{
		recognize: connect.NewClient[v1.RecognizeRequest, v1.RecognizeResponse](
			httpClient,
			baseURL+OCRServiceRecognizeProcedure,
			connect.WithSchema(oCRServiceMethods.ByName("Recognize")),
			connect.WithClientOptions(opts...),
		),
		status: connect.NewClient[v11.StatusRequest, v1.StatusResponse](
			httpClient,
			baseURL+OCRServiceStatusProcedure,
			connect.WithSchema(oCRServiceMethods.ByName("Status")),
			connect.WithClientOptions(opts...),
		),
	}
}

// oCRServiceClient implements OCRServiceClient.
type oCRServiceClient struct {
	recognize *connect.Client[v1.RecognizeRequest, v1.RecognizeResponse]
	status    *connect.Client[v11.StatusRequest, v1.StatusResponse]
}

// Recognize calls ocr.v1.OCRService.Recognize.
func (c *oCRServiceClient) Recognize(ctx context.Context, req *connect.Request[v1.RecognizeRequest]) (*connect.Response[v1.RecognizeResponse], error) {
	return c.recognize.CallUnary(ctx, req)
}

// Status calls ocr.v1.OCRService.Status.
func (c *oCRServiceClient) Status(ctx context.Context, req *connect.Request[v11.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// OCRServiceHandler is an implementation of the ocr.v1.OCRService service.
type OCRServiceHandler interface {
	// Recognize performs OCR on one or more files.
	// Supports both synchronous and asynchronous processing.
	Recognize(context.Context, *connect.Request[v1.RecognizeRequest]) (*connect.Response[v1.RecognizeResponse], error)
	// Status retrieves the current status of an async OCR request.
	// Returns processing status and results if available.
	Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
}

// NewOCRServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOCRServiceHandler(svc OCRServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	oCRServiceMethods := v1.File_ocr_v1_ocr_proto.Services().ByName("OCRService").Methods()
	oCRServiceRecognizeHandler := connect.NewUnaryHandler(
		OCRServiceRecognizeProcedure,
		svc.Recognize,
		connect.WithSchema(oCRServiceMethods.ByName("Recognize")),
		connect.WithHandlerOptions(opts...),
	)
	oCRServiceStatusHandler := connect.NewUnaryHandler(
		OCRServiceStatusProcedure,
		svc.Status,
		connect.WithSchema(oCRServiceMethods.ByName("Status")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ocr.v1.OCRService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OCRServiceRecognizeProcedure:
			oCRServiceRecognizeHandler.ServeHTTP(w, r)
		case OCRServiceStatusProcedure:
			oCRServiceStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOCRServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOCRServiceHandler struct{}

func (UnimplementedOCRServiceHandler) Recognize(context.Context, *connect.Request[v1.RecognizeRequest]) (*connect.Response[v1.RecognizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ocr.v1.OCRService.Recognize is not implemented"))
}

func (UnimplementedOCRServiceHandler) Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ocr.v1.OCRService.Status is not implemented"))
}
