// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: notification/v1/notification.proto

package notificationv1

import (
	context "context"
	v1 "github.com/antinvestor/apis/go/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_Send_FullMethodName           = "/notification.v1.NotificationService/Send"
	NotificationService_Release_FullMethodName        = "/notification.v1.NotificationService/Release"
	NotificationService_Receive_FullMethodName        = "/notification.v1.NotificationService/Receive"
	NotificationService_Search_FullMethodName         = "/notification.v1.NotificationService/Search"
	NotificationService_Status_FullMethodName         = "/notification.v1.NotificationService/Status"
	NotificationService_StatusUpdate_FullMethodName   = "/notification.v1.NotificationService/StatusUpdate"
	NotificationService_TemplateSearch_FullMethodName = "/notification.v1.NotificationService/TemplateSearch"
	NotificationService_TemplateSave_FullMethodName   = "/notification.v1.NotificationService/TemplateSave"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NotificationService provides multi-channel notification delivery.
// All RPCs require authentication via Bearer token unless otherwise specified.
type NotificationServiceClient interface {
	// Send queues one or more notifications for delivery.
	// Notifications can be auto-released or manually released via the Release RPC.
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendResponse], error)
	// Release triggers delivery of queued notifications.
	// Used for batch processing where notifications are queued first, then released together.
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReleaseResponse], error)
	// Receive acknowledges receipt of notifications by the client.
	// Used for tracking delivery confirmation and read receipts.
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveResponse], error)
	// Search finds notifications matching specified criteria.
	// Supports filtering by date range, type, status, and custom properties.
	Search(ctx context.Context, in *v1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchResponse], error)
	// Status retrieves the current status of a notification.
	// Returns delivery status, timestamps, and error information if applicable.
	Status(ctx context.Context, in *v1.StatusRequest, opts ...grpc.CallOption) (*v1.StatusResponse, error)
	// StatusUpdate updates the status of a notification.
	// Used by delivery workers to update notification state during processing.
	StatusUpdate(ctx context.Context, in *v1.StatusUpdateRequest, opts ...grpc.CallOption) (*v1.StatusUpdateResponse, error)
	// TemplateSearch finds notification templates matching specified criteria.
	// Supports filtering by language and template name.
	TemplateSearch(ctx context.Context, in *TemplateSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemplateSearchResponse], error)
	// TemplateSave creates or updates a notification template.
	// Templates enable consistent, reusable notification formatting with localization.
	TemplateSave(ctx context.Context, in *TemplateSaveRequest, opts ...grpc.CallOption) (*TemplateSaveResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], NotificationService_Send_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendRequest, SendResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_SendClient = grpc.ServerStreamingClient[SendResponse]

func (c *notificationServiceClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReleaseResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[1], NotificationService_Release_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReleaseRequest, ReleaseResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_ReleaseClient = grpc.ServerStreamingClient[ReleaseResponse]

func (c *notificationServiceClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[2], NotificationService_Receive_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveRequest, ReceiveResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_ReceiveClient = grpc.ServerStreamingClient[ReceiveResponse]

func (c *notificationServiceClient) Search(ctx context.Context, in *v1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[3], NotificationService_Search_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v1.SearchRequest, SearchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_SearchClient = grpc.ServerStreamingClient[SearchResponse]

func (c *notificationServiceClient) Status(ctx context.Context, in *v1.StatusRequest, opts ...grpc.CallOption) (*v1.StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.StatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) StatusUpdate(ctx context.Context, in *v1.StatusUpdateRequest, opts ...grpc.CallOption) (*v1.StatusUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.StatusUpdateResponse)
	err := c.cc.Invoke(ctx, NotificationService_StatusUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) TemplateSearch(ctx context.Context, in *TemplateSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemplateSearchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[4], NotificationService_TemplateSearch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TemplateSearchRequest, TemplateSearchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_TemplateSearchClient = grpc.ServerStreamingClient[TemplateSearchResponse]

func (c *notificationServiceClient) TemplateSave(ctx context.Context, in *TemplateSaveRequest, opts ...grpc.CallOption) (*TemplateSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TemplateSaveResponse)
	err := c.cc.Invoke(ctx, NotificationService_TemplateSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
//
// NotificationService provides multi-channel notification delivery.
// All RPCs require authentication via Bearer token unless otherwise specified.
type NotificationServiceServer interface {
	// Send queues one or more notifications for delivery.
	// Notifications can be auto-released or manually released via the Release RPC.
	Send(*SendRequest, grpc.ServerStreamingServer[SendResponse]) error
	// Release triggers delivery of queued notifications.
	// Used for batch processing where notifications are queued first, then released together.
	Release(*ReleaseRequest, grpc.ServerStreamingServer[ReleaseResponse]) error
	// Receive acknowledges receipt of notifications by the client.
	// Used for tracking delivery confirmation and read receipts.
	Receive(*ReceiveRequest, grpc.ServerStreamingServer[ReceiveResponse]) error
	// Search finds notifications matching specified criteria.
	// Supports filtering by date range, type, status, and custom properties.
	Search(*v1.SearchRequest, grpc.ServerStreamingServer[SearchResponse]) error
	// Status retrieves the current status of a notification.
	// Returns delivery status, timestamps, and error information if applicable.
	Status(context.Context, *v1.StatusRequest) (*v1.StatusResponse, error)
	// StatusUpdate updates the status of a notification.
	// Used by delivery workers to update notification state during processing.
	StatusUpdate(context.Context, *v1.StatusUpdateRequest) (*v1.StatusUpdateResponse, error)
	// TemplateSearch finds notification templates matching specified criteria.
	// Supports filtering by language and template name.
	TemplateSearch(*TemplateSearchRequest, grpc.ServerStreamingServer[TemplateSearchResponse]) error
	// TemplateSave creates or updates a notification template.
	// Templates enable consistent, reusable notification formatting with localization.
	TemplateSave(context.Context, *TemplateSaveRequest) (*TemplateSaveResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) Send(*SendRequest, grpc.ServerStreamingServer[SendResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedNotificationServiceServer) Release(*ReleaseRequest, grpc.ServerStreamingServer[ReleaseResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedNotificationServiceServer) Receive(*ReceiveRequest, grpc.ServerStreamingServer[ReceiveResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedNotificationServiceServer) Search(*v1.SearchRequest, grpc.ServerStreamingServer[SearchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedNotificationServiceServer) Status(context.Context, *v1.StatusRequest) (*v1.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedNotificationServiceServer) StatusUpdate(context.Context, *v1.StatusUpdateRequest) (*v1.StatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusUpdate not implemented")
}
func (UnimplementedNotificationServiceServer) TemplateSearch(*TemplateSearchRequest, grpc.ServerStreamingServer[TemplateSearchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TemplateSearch not implemented")
}
func (UnimplementedNotificationServiceServer) TemplateSave(context.Context, *TemplateSaveRequest) (*TemplateSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateSave not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).Send(m, &grpc.GenericServerStream[SendRequest, SendResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_SendServer = grpc.ServerStreamingServer[SendResponse]

func _NotificationService_Release_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReleaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).Release(m, &grpc.GenericServerStream[ReleaseRequest, ReleaseResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_ReleaseServer = grpc.ServerStreamingServer[ReleaseResponse]

func _NotificationService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).Receive(m, &grpc.GenericServerStream[ReceiveRequest, ReceiveResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_ReceiveServer = grpc.ServerStreamingServer[ReceiveResponse]

func _NotificationService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).Search(m, &grpc.GenericServerStream[v1.SearchRequest, SearchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_SearchServer = grpc.ServerStreamingServer[SearchResponse]

func _NotificationService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Status(ctx, req.(*v1.StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_StatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.StatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).StatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_StatusUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).StatusUpdate(ctx, req.(*v1.StatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_TemplateSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TemplateSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).TemplateSearch(m, &grpc.GenericServerStream[TemplateSearchRequest, TemplateSearchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_TemplateSearchServer = grpc.ServerStreamingServer[TemplateSearchResponse]

func _NotificationService_TemplateSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).TemplateSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_TemplateSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).TemplateSave(ctx, req.(*TemplateSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _NotificationService_Status_Handler,
		},
		{
			MethodName: "StatusUpdate",
			Handler:    _NotificationService_StatusUpdate_Handler,
		},
		{
			MethodName: "TemplateSave",
			Handler:    _NotificationService_TemplateSave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _NotificationService_Send_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Release",
			Handler:       _NotificationService_Release_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Receive",
			Handler:       _NotificationService_Receive_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _NotificationService_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TemplateSearch",
			Handler:       _NotificationService_TemplateSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification/v1/notification.proto",
}
