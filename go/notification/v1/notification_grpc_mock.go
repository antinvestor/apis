// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/notification/v1/notification_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/notification/v1/notification_grpc.pb.go -package=notificationv1 -destination=/home/j/code/antinvestor/apis/go/notification/v1/notification_grpc_mock.go
//

// Package notificationv1 is a generated GoMock package.
package notificationv1

import (
	context "context"
	reflect "reflect"

	commonv1 "github.com/antinvestor/apis/go/common/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNotificationServiceClient is a mock of NotificationServiceClient interface.
type MockNotificationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceClientMockRecorder
	isgomock struct{}
}

// MockNotificationServiceClientMockRecorder is the mock recorder for MockNotificationServiceClient.
type MockNotificationServiceClientMockRecorder struct {
	mock *MockNotificationServiceClient
}

// NewMockNotificationServiceClient creates a new mock instance.
func NewMockNotificationServiceClient(ctrl *gomock.Controller) *MockNotificationServiceClient {
	mock := &MockNotificationServiceClient{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationServiceClient) EXPECT() *MockNotificationServiceClientMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockNotificationServiceClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Receive", varargs...)
	ret0, _ := ret[0].(*ReceiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockNotificationServiceClientMockRecorder) Receive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockNotificationServiceClient)(nil).Receive), varargs...)
}

// Release mocks base method.
func (m *MockNotificationServiceClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Release", varargs...)
	ret0, _ := ret[0].(*ReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockNotificationServiceClientMockRecorder) Release(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNotificationServiceClient)(nil).Release), varargs...)
}

// Search mocks base method.
func (m *MockNotificationServiceClient) Search(ctx context.Context, in *commonv1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[SearchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNotificationServiceClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNotificationServiceClient)(nil).Search), varargs...)
}

// Send mocks base method.
func (m *MockNotificationServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockNotificationServiceClientMockRecorder) Send(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationServiceClient)(nil).Send), varargs...)
}

// Status mocks base method.
func (m *MockNotificationServiceClient) Status(ctx context.Context, in *commonv1.StatusRequest, opts ...grpc.CallOption) (*commonv1.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*commonv1.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockNotificationServiceClientMockRecorder) Status(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNotificationServiceClient)(nil).Status), varargs...)
}

// StatusUpdate mocks base method.
func (m *MockNotificationServiceClient) StatusUpdate(ctx context.Context, in *commonv1.StatusUpdateRequest, opts ...grpc.CallOption) (*commonv1.StatusUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatusUpdate", varargs...)
	ret0, _ := ret[0].(*commonv1.StatusUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusUpdate indicates an expected call of StatusUpdate.
func (mr *MockNotificationServiceClientMockRecorder) StatusUpdate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockNotificationServiceClient)(nil).StatusUpdate), varargs...)
}

// TemplateSave mocks base method.
func (m *MockNotificationServiceClient) TemplateSave(ctx context.Context, in *TemplateSaveRequest, opts ...grpc.CallOption) (*TemplateSaveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TemplateSave", varargs...)
	ret0, _ := ret[0].(*TemplateSaveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateSave indicates an expected call of TemplateSave.
func (mr *MockNotificationServiceClientMockRecorder) TemplateSave(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateSave", reflect.TypeOf((*MockNotificationServiceClient)(nil).TemplateSave), varargs...)
}

// TemplateSearch mocks base method.
func (m *MockNotificationServiceClient) TemplateSearch(ctx context.Context, in *TemplateSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemplateSearchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TemplateSearch", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[TemplateSearchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateSearch indicates an expected call of TemplateSearch.
func (mr *MockNotificationServiceClientMockRecorder) TemplateSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateSearch", reflect.TypeOf((*MockNotificationServiceClient)(nil).TemplateSearch), varargs...)
}

// MockNotificationServiceServer is a mock of NotificationServiceServer interface.
type MockNotificationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceServerMockRecorder
	isgomock struct{}
}

// MockNotificationServiceServerMockRecorder is the mock recorder for MockNotificationServiceServer.
type MockNotificationServiceServerMockRecorder struct {
	mock *MockNotificationServiceServer
}

// NewMockNotificationServiceServer creates a new mock instance.
func NewMockNotificationServiceServer(ctrl *gomock.Controller) *MockNotificationServiceServer {
	mock := &MockNotificationServiceServer{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationServiceServer) EXPECT() *MockNotificationServiceServerMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockNotificationServiceServer) Receive(arg0 context.Context, arg1 *ReceiveRequest) (*ReceiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(*ReceiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockNotificationServiceServerMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockNotificationServiceServer)(nil).Receive), arg0, arg1)
}

// Release mocks base method.
func (m *MockNotificationServiceServer) Release(arg0 context.Context, arg1 *ReleaseRequest) (*ReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1)
	ret0, _ := ret[0].(*ReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockNotificationServiceServerMockRecorder) Release(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNotificationServiceServer)(nil).Release), arg0, arg1)
}

// Search mocks base method.
func (m *MockNotificationServiceServer) Search(arg0 *commonv1.SearchRequest, arg1 grpc.ServerStreamingServer[SearchResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockNotificationServiceServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNotificationServiceServer)(nil).Search), arg0, arg1)
}

// Send mocks base method.
func (m *MockNotificationServiceServer) Send(arg0 context.Context, arg1 *SendRequest) (*SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockNotificationServiceServerMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationServiceServer)(nil).Send), arg0, arg1)
}

// Status mocks base method.
func (m *MockNotificationServiceServer) Status(arg0 context.Context, arg1 *commonv1.StatusRequest) (*commonv1.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*commonv1.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockNotificationServiceServerMockRecorder) Status(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNotificationServiceServer)(nil).Status), arg0, arg1)
}

// StatusUpdate mocks base method.
func (m *MockNotificationServiceServer) StatusUpdate(arg0 context.Context, arg1 *commonv1.StatusUpdateRequest) (*commonv1.StatusUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusUpdate", arg0, arg1)
	ret0, _ := ret[0].(*commonv1.StatusUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusUpdate indicates an expected call of StatusUpdate.
func (mr *MockNotificationServiceServerMockRecorder) StatusUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockNotificationServiceServer)(nil).StatusUpdate), arg0, arg1)
}

// TemplateSave mocks base method.
func (m *MockNotificationServiceServer) TemplateSave(arg0 context.Context, arg1 *TemplateSaveRequest) (*TemplateSaveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateSave", arg0, arg1)
	ret0, _ := ret[0].(*TemplateSaveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateSave indicates an expected call of TemplateSave.
func (mr *MockNotificationServiceServerMockRecorder) TemplateSave(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateSave", reflect.TypeOf((*MockNotificationServiceServer)(nil).TemplateSave), arg0, arg1)
}

// TemplateSearch mocks base method.
func (m *MockNotificationServiceServer) TemplateSearch(arg0 *TemplateSearchRequest, arg1 grpc.ServerStreamingServer[TemplateSearchResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateSearch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemplateSearch indicates an expected call of TemplateSearch.
func (mr *MockNotificationServiceServerMockRecorder) TemplateSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateSearch", reflect.TypeOf((*MockNotificationServiceServer)(nil).TemplateSearch), arg0, arg1)
}

// mustEmbedUnimplementedNotificationServiceServer mocks base method.
func (m *MockNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNotificationServiceServer")
}

// mustEmbedUnimplementedNotificationServiceServer indicates an expected call of mustEmbedUnimplementedNotificationServiceServer.
func (mr *MockNotificationServiceServerMockRecorder) mustEmbedUnimplementedNotificationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNotificationServiceServer", reflect.TypeOf((*MockNotificationServiceServer)(nil).mustEmbedUnimplementedNotificationServiceServer))
}

// MockUnsafeNotificationServiceServer is a mock of UnsafeNotificationServiceServer interface.
type MockUnsafeNotificationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeNotificationServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeNotificationServiceServerMockRecorder is the mock recorder for MockUnsafeNotificationServiceServer.
type MockUnsafeNotificationServiceServerMockRecorder struct {
	mock *MockUnsafeNotificationServiceServer
}

// NewMockUnsafeNotificationServiceServer creates a new mock instance.
func NewMockUnsafeNotificationServiceServer(ctrl *gomock.Controller) *MockUnsafeNotificationServiceServer {
	mock := &MockUnsafeNotificationServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeNotificationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeNotificationServiceServer) EXPECT() *MockUnsafeNotificationServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedNotificationServiceServer mocks base method.
func (m *MockUnsafeNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNotificationServiceServer")
}

// mustEmbedUnimplementedNotificationServiceServer indicates an expected call of mustEmbedUnimplementedNotificationServiceServer.
func (mr *MockUnsafeNotificationServiceServerMockRecorder) mustEmbedUnimplementedNotificationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNotificationServiceServer", reflect.TypeOf((*MockUnsafeNotificationServiceServer)(nil).mustEmbedUnimplementedNotificationServiceServer))
}
