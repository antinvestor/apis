// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notification/v1/notification.proto

package notificationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/antinvestor/apis/go/common/v1"
	v1 "github.com/antinvestor/apis/go/notification/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "notification.v1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceSendProcedure is the fully-qualified name of the NotificationService's Send
	// RPC.
	NotificationServiceSendProcedure = "/notification.v1.NotificationService/Send"
	// NotificationServiceReleaseProcedure is the fully-qualified name of the NotificationService's
	// Release RPC.
	NotificationServiceReleaseProcedure = "/notification.v1.NotificationService/Release"
	// NotificationServiceReceiveProcedure is the fully-qualified name of the NotificationService's
	// Receive RPC.
	NotificationServiceReceiveProcedure = "/notification.v1.NotificationService/Receive"
	// NotificationServiceSearchProcedure is the fully-qualified name of the NotificationService's
	// Search RPC.
	NotificationServiceSearchProcedure = "/notification.v1.NotificationService/Search"
	// NotificationServiceStatusProcedure is the fully-qualified name of the NotificationService's
	// Status RPC.
	NotificationServiceStatusProcedure = "/notification.v1.NotificationService/Status"
	// NotificationServiceStatusUpdateProcedure is the fully-qualified name of the NotificationService's
	// StatusUpdate RPC.
	NotificationServiceStatusUpdateProcedure = "/notification.v1.NotificationService/StatusUpdate"
	// NotificationServiceTemplateSearchProcedure is the fully-qualified name of the
	// NotificationService's TemplateSearch RPC.
	NotificationServiceTemplateSearchProcedure = "/notification.v1.NotificationService/TemplateSearch"
	// NotificationServiceTemplateSaveProcedure is the fully-qualified name of the NotificationService's
	// TemplateSave RPC.
	NotificationServiceTemplateSaveProcedure = "/notification.v1.NotificationService/TemplateSave"
)

// NotificationServiceClient is a client for the notification.v1.NotificationService service.
type NotificationServiceClient interface {
	// Send queues one or more notifications for delivery.
	// Notifications can be auto-released or manually released via the Release RPC.
	Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.ServerStreamForClient[v1.SendResponse], error)
	// Release triggers delivery of queued notifications.
	// Used for batch processing where notifications are queued first, then released together.
	Release(context.Context, *connect.Request[v1.ReleaseRequest]) (*connect.ServerStreamForClient[v1.ReleaseResponse], error)
	// Receive acknowledges receipt of notifications by the client.
	// Used for tracking delivery confirmation and read receipts.
	Receive(context.Context, *connect.Request[v1.ReceiveRequest]) (*connect.ServerStreamForClient[v1.ReceiveResponse], error)
	// Search finds notifications matching specified criteria.
	// Supports filtering by date range, type, status, and custom properties.
	Search(context.Context, *connect.Request[v11.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error)
	// Status retrieves the current status of a notification.
	// Returns delivery status, timestamps, and error information if applicable.
	Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v11.StatusResponse], error)
	// StatusUpdate updates the status of a notification.
	// Used by delivery workers to update notification state during processing.
	StatusUpdate(context.Context, *connect.Request[v11.StatusUpdateRequest]) (*connect.Response[v11.StatusUpdateResponse], error)
	// TemplateSearch finds notification templates matching specified criteria.
	// Supports filtering by language and template name.
	TemplateSearch(context.Context, *connect.Request[v1.TemplateSearchRequest]) (*connect.ServerStreamForClient[v1.TemplateSearchResponse], error)
	// TemplateSave creates or updates a notification template.
	// Templates enable consistent, reusable notification formatting with localization.
	TemplateSave(context.Context, *connect.Request[v1.TemplateSaveRequest]) (*connect.Response[v1.TemplateSaveResponse], error)
}

// NewNotificationServiceClient constructs a client for the notification.v1.NotificationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notificationServiceMethods := v1.File_notification_v1_notification_proto.Services().ByName("NotificationService").Methods()
	return &notificationServiceClient{
		send: connect.NewClient[v1.SendRequest, v1.SendResponse](
			httpClient,
			baseURL+NotificationServiceSendProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("Send")),
			connect.WithClientOptions(opts...),
		),
		release: connect.NewClient[v1.ReleaseRequest, v1.ReleaseResponse](
			httpClient,
			baseURL+NotificationServiceReleaseProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("Release")),
			connect.WithClientOptions(opts...),
		),
		receive: connect.NewClient[v1.ReceiveRequest, v1.ReceiveResponse](
			httpClient,
			baseURL+NotificationServiceReceiveProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("Receive")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v11.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+NotificationServiceSearchProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		status: connect.NewClient[v11.StatusRequest, v11.StatusResponse](
			httpClient,
			baseURL+NotificationServiceStatusProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("Status")),
			connect.WithClientOptions(opts...),
		),
		statusUpdate: connect.NewClient[v11.StatusUpdateRequest, v11.StatusUpdateResponse](
			httpClient,
			baseURL+NotificationServiceStatusUpdateProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("StatusUpdate")),
			connect.WithClientOptions(opts...),
		),
		templateSearch: connect.NewClient[v1.TemplateSearchRequest, v1.TemplateSearchResponse](
			httpClient,
			baseURL+NotificationServiceTemplateSearchProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("TemplateSearch")),
			connect.WithClientOptions(opts...),
		),
		templateSave: connect.NewClient[v1.TemplateSaveRequest, v1.TemplateSaveResponse](
			httpClient,
			baseURL+NotificationServiceTemplateSaveProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("TemplateSave")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	send           *connect.Client[v1.SendRequest, v1.SendResponse]
	release        *connect.Client[v1.ReleaseRequest, v1.ReleaseResponse]
	receive        *connect.Client[v1.ReceiveRequest, v1.ReceiveResponse]
	search         *connect.Client[v11.SearchRequest, v1.SearchResponse]
	status         *connect.Client[v11.StatusRequest, v11.StatusResponse]
	statusUpdate   *connect.Client[v11.StatusUpdateRequest, v11.StatusUpdateResponse]
	templateSearch *connect.Client[v1.TemplateSearchRequest, v1.TemplateSearchResponse]
	templateSave   *connect.Client[v1.TemplateSaveRequest, v1.TemplateSaveResponse]
}

// Send calls notification.v1.NotificationService.Send.
func (c *notificationServiceClient) Send(ctx context.Context, req *connect.Request[v1.SendRequest]) (*connect.ServerStreamForClient[v1.SendResponse], error) {
	return c.send.CallServerStream(ctx, req)
}

// Release calls notification.v1.NotificationService.Release.
func (c *notificationServiceClient) Release(ctx context.Context, req *connect.Request[v1.ReleaseRequest]) (*connect.ServerStreamForClient[v1.ReleaseResponse], error) {
	return c.release.CallServerStream(ctx, req)
}

// Receive calls notification.v1.NotificationService.Receive.
func (c *notificationServiceClient) Receive(ctx context.Context, req *connect.Request[v1.ReceiveRequest]) (*connect.ServerStreamForClient[v1.ReceiveResponse], error) {
	return c.receive.CallServerStream(ctx, req)
}

// Search calls notification.v1.NotificationService.Search.
func (c *notificationServiceClient) Search(ctx context.Context, req *connect.Request[v11.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error) {
	return c.search.CallServerStream(ctx, req)
}

// Status calls notification.v1.NotificationService.Status.
func (c *notificationServiceClient) Status(ctx context.Context, req *connect.Request[v11.StatusRequest]) (*connect.Response[v11.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// StatusUpdate calls notification.v1.NotificationService.StatusUpdate.
func (c *notificationServiceClient) StatusUpdate(ctx context.Context, req *connect.Request[v11.StatusUpdateRequest]) (*connect.Response[v11.StatusUpdateResponse], error) {
	return c.statusUpdate.CallUnary(ctx, req)
}

// TemplateSearch calls notification.v1.NotificationService.TemplateSearch.
func (c *notificationServiceClient) TemplateSearch(ctx context.Context, req *connect.Request[v1.TemplateSearchRequest]) (*connect.ServerStreamForClient[v1.TemplateSearchResponse], error) {
	return c.templateSearch.CallServerStream(ctx, req)
}

// TemplateSave calls notification.v1.NotificationService.TemplateSave.
func (c *notificationServiceClient) TemplateSave(ctx context.Context, req *connect.Request[v1.TemplateSaveRequest]) (*connect.Response[v1.TemplateSaveResponse], error) {
	return c.templateSave.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the notification.v1.NotificationService
// service.
type NotificationServiceHandler interface {
	// Send queues one or more notifications for delivery.
	// Notifications can be auto-released or manually released via the Release RPC.
	Send(context.Context, *connect.Request[v1.SendRequest], *connect.ServerStream[v1.SendResponse]) error
	// Release triggers delivery of queued notifications.
	// Used for batch processing where notifications are queued first, then released together.
	Release(context.Context, *connect.Request[v1.ReleaseRequest], *connect.ServerStream[v1.ReleaseResponse]) error
	// Receive acknowledges receipt of notifications by the client.
	// Used for tracking delivery confirmation and read receipts.
	Receive(context.Context, *connect.Request[v1.ReceiveRequest], *connect.ServerStream[v1.ReceiveResponse]) error
	// Search finds notifications matching specified criteria.
	// Supports filtering by date range, type, status, and custom properties.
	Search(context.Context, *connect.Request[v11.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error
	// Status retrieves the current status of a notification.
	// Returns delivery status, timestamps, and error information if applicable.
	Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v11.StatusResponse], error)
	// StatusUpdate updates the status of a notification.
	// Used by delivery workers to update notification state during processing.
	StatusUpdate(context.Context, *connect.Request[v11.StatusUpdateRequest]) (*connect.Response[v11.StatusUpdateResponse], error)
	// TemplateSearch finds notification templates matching specified criteria.
	// Supports filtering by language and template name.
	TemplateSearch(context.Context, *connect.Request[v1.TemplateSearchRequest], *connect.ServerStream[v1.TemplateSearchResponse]) error
	// TemplateSave creates or updates a notification template.
	// Templates enable consistent, reusable notification formatting with localization.
	TemplateSave(context.Context, *connect.Request[v1.TemplateSaveRequest]) (*connect.Response[v1.TemplateSaveResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceMethods := v1.File_notification_v1_notification_proto.Services().ByName("NotificationService").Methods()
	notificationServiceSendHandler := connect.NewServerStreamHandler(
		NotificationServiceSendProcedure,
		svc.Send,
		connect.WithSchema(notificationServiceMethods.ByName("Send")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceReleaseHandler := connect.NewServerStreamHandler(
		NotificationServiceReleaseProcedure,
		svc.Release,
		connect.WithSchema(notificationServiceMethods.ByName("Release")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceReceiveHandler := connect.NewServerStreamHandler(
		NotificationServiceReceiveProcedure,
		svc.Receive,
		connect.WithSchema(notificationServiceMethods.ByName("Receive")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSearchHandler := connect.NewServerStreamHandler(
		NotificationServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(notificationServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceStatusHandler := connect.NewUnaryHandler(
		NotificationServiceStatusProcedure,
		svc.Status,
		connect.WithSchema(notificationServiceMethods.ByName("Status")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceStatusUpdateHandler := connect.NewUnaryHandler(
		NotificationServiceStatusUpdateProcedure,
		svc.StatusUpdate,
		connect.WithSchema(notificationServiceMethods.ByName("StatusUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceTemplateSearchHandler := connect.NewServerStreamHandler(
		NotificationServiceTemplateSearchProcedure,
		svc.TemplateSearch,
		connect.WithSchema(notificationServiceMethods.ByName("TemplateSearch")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceTemplateSaveHandler := connect.NewUnaryHandler(
		NotificationServiceTemplateSaveProcedure,
		svc.TemplateSave,
		connect.WithSchema(notificationServiceMethods.ByName("TemplateSave")),
		connect.WithHandlerOptions(opts...),
	)
	return "/notification.v1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceSendProcedure:
			notificationServiceSendHandler.ServeHTTP(w, r)
		case NotificationServiceReleaseProcedure:
			notificationServiceReleaseHandler.ServeHTTP(w, r)
		case NotificationServiceReceiveProcedure:
			notificationServiceReceiveHandler.ServeHTTP(w, r)
		case NotificationServiceSearchProcedure:
			notificationServiceSearchHandler.ServeHTTP(w, r)
		case NotificationServiceStatusProcedure:
			notificationServiceStatusHandler.ServeHTTP(w, r)
		case NotificationServiceStatusUpdateProcedure:
			notificationServiceStatusUpdateHandler.ServeHTTP(w, r)
		case NotificationServiceTemplateSearchProcedure:
			notificationServiceTemplateSearchHandler.ServeHTTP(w, r)
		case NotificationServiceTemplateSaveProcedure:
			notificationServiceTemplateSaveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) Send(context.Context, *connect.Request[v1.SendRequest], *connect.ServerStream[v1.SendResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.Send is not implemented"))
}

func (UnimplementedNotificationServiceHandler) Release(context.Context, *connect.Request[v1.ReleaseRequest], *connect.ServerStream[v1.ReleaseResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.Release is not implemented"))
}

func (UnimplementedNotificationServiceHandler) Receive(context.Context, *connect.Request[v1.ReceiveRequest], *connect.ServerStream[v1.ReceiveResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.Receive is not implemented"))
}

func (UnimplementedNotificationServiceHandler) Search(context.Context, *connect.Request[v11.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.Search is not implemented"))
}

func (UnimplementedNotificationServiceHandler) Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v11.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.Status is not implemented"))
}

func (UnimplementedNotificationServiceHandler) StatusUpdate(context.Context, *connect.Request[v11.StatusUpdateRequest]) (*connect.Response[v11.StatusUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.StatusUpdate is not implemented"))
}

func (UnimplementedNotificationServiceHandler) TemplateSearch(context.Context, *connect.Request[v1.TemplateSearchRequest], *connect.ServerStream[v1.TemplateSearchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.TemplateSearch is not implemented"))
}

func (UnimplementedNotificationServiceHandler) TemplateSave(context.Context, *connect.Request[v1.TemplateSaveRequest]) (*connect.Response[v1.TemplateSaveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.TemplateSave is not implemented"))
}
