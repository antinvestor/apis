// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/lostid/v1/lostid_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/lostid/v1/lostid_grpc.pb.go -package=lostidv1_mocks -destination=/home/j/code/antinvestor/apis/go/lostid/v1_mocks/lostid_grpc_mock.go
//

// Package lostidv1_mocks is a generated GoMock package.
package lostidv1_mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/antinvestor/apis/go/common/v1"
	v10 "github.com/antinvestor/apis/go/lostid/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLostIdServiceClient is a mock of LostIdServiceClient interface.
type MockLostIdServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdServiceClientMockRecorder
	isgomock struct{}
}

// MockLostIdServiceClientMockRecorder is the mock recorder for MockLostIdServiceClient.
type MockLostIdServiceClientMockRecorder struct {
	mock *MockLostIdServiceClient
}

// NewMockLostIdServiceClient creates a new mock instance.
func NewMockLostIdServiceClient(ctrl *gomock.Controller) *MockLostIdServiceClient {
	mock := &MockLostIdServiceClient{ctrl: ctrl}
	mock.recorder = &MockLostIdServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdServiceClient) EXPECT() *MockLostIdServiceClientMockRecorder {
	return m.recorder
}

// Collectible mocks base method.
func (m *MockLostIdServiceClient) Collectible(ctx context.Context, in *v10.CollectibleRequest, opts ...grpc.CallOption) (*v10.CollectibleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collectible", varargs...)
	ret0, _ := ret[0].(*v10.CollectibleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collectible indicates an expected call of Collectible.
func (mr *MockLostIdServiceClientMockRecorder) Collectible(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collectible", reflect.TypeOf((*MockLostIdServiceClient)(nil).Collectible), varargs...)
}

// ListCollectible mocks base method.
func (m *MockLostIdServiceClient) ListCollectible(ctx context.Context, in *v10.ListCollectibleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v10.ListCollectibleResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectible", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v10.ListCollectibleResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectible indicates an expected call of ListCollectible.
func (mr *MockLostIdServiceClientMockRecorder) ListCollectible(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectible", reflect.TypeOf((*MockLostIdServiceClient)(nil).ListCollectible), varargs...)
}

// ListSearch mocks base method.
func (m *MockLostIdServiceClient) ListSearch(ctx context.Context, in *v10.ListSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v10.ListSearchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSearch", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v10.ListSearchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSearch indicates an expected call of ListSearch.
func (mr *MockLostIdServiceClientMockRecorder) ListSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSearch", reflect.TypeOf((*MockLostIdServiceClient)(nil).ListSearch), varargs...)
}

// ListTransaction mocks base method.
func (m *MockLostIdServiceClient) ListTransaction(ctx context.Context, in *v10.ListTransactionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v10.ListTransactionResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransaction", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v10.ListTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransaction indicates an expected call of ListTransaction.
func (mr *MockLostIdServiceClientMockRecorder) ListTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransaction", reflect.TypeOf((*MockLostIdServiceClient)(nil).ListTransaction), varargs...)
}

// Progress mocks base method.
func (m *MockLostIdServiceClient) Progress(ctx context.Context, in *v10.ProgressRequest, opts ...grpc.CallOption) (*v10.ProgressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Progress", varargs...)
	ret0, _ := ret[0].(*v10.ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progress indicates an expected call of Progress.
func (mr *MockLostIdServiceClientMockRecorder) Progress(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockLostIdServiceClient)(nil).Progress), varargs...)
}

// Search mocks base method.
func (m *MockLostIdServiceClient) Search(ctx context.Context, in *v1.SearchRequest, opts ...grpc.CallOption) (*v10.SearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*v10.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLostIdServiceClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLostIdServiceClient)(nil).Search), varargs...)
}

// MockLostIdServiceServer is a mock of LostIdServiceServer interface.
type MockLostIdServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdServiceServerMockRecorder
	isgomock struct{}
}

// MockLostIdServiceServerMockRecorder is the mock recorder for MockLostIdServiceServer.
type MockLostIdServiceServerMockRecorder struct {
	mock *MockLostIdServiceServer
}

// NewMockLostIdServiceServer creates a new mock instance.
func NewMockLostIdServiceServer(ctrl *gomock.Controller) *MockLostIdServiceServer {
	mock := &MockLostIdServiceServer{ctrl: ctrl}
	mock.recorder = &MockLostIdServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdServiceServer) EXPECT() *MockLostIdServiceServerMockRecorder {
	return m.recorder
}

// Collectible mocks base method.
func (m *MockLostIdServiceServer) Collectible(arg0 context.Context, arg1 *v10.CollectibleRequest) (*v10.CollectibleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collectible", arg0, arg1)
	ret0, _ := ret[0].(*v10.CollectibleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collectible indicates an expected call of Collectible.
func (mr *MockLostIdServiceServerMockRecorder) Collectible(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collectible", reflect.TypeOf((*MockLostIdServiceServer)(nil).Collectible), arg0, arg1)
}

// ListCollectible mocks base method.
func (m *MockLostIdServiceServer) ListCollectible(arg0 *v10.ListCollectibleRequest, arg1 grpc.ServerStreamingServer[v10.ListCollectibleResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollectible", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollectible indicates an expected call of ListCollectible.
func (mr *MockLostIdServiceServerMockRecorder) ListCollectible(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectible", reflect.TypeOf((*MockLostIdServiceServer)(nil).ListCollectible), arg0, arg1)
}

// ListSearch mocks base method.
func (m *MockLostIdServiceServer) ListSearch(arg0 *v10.ListSearchRequest, arg1 grpc.ServerStreamingServer[v10.ListSearchResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSearch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSearch indicates an expected call of ListSearch.
func (mr *MockLostIdServiceServerMockRecorder) ListSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSearch", reflect.TypeOf((*MockLostIdServiceServer)(nil).ListSearch), arg0, arg1)
}

// ListTransaction mocks base method.
func (m *MockLostIdServiceServer) ListTransaction(arg0 *v10.ListTransactionRequest, arg1 grpc.ServerStreamingServer[v10.ListTransactionResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransaction indicates an expected call of ListTransaction.
func (mr *MockLostIdServiceServerMockRecorder) ListTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransaction", reflect.TypeOf((*MockLostIdServiceServer)(nil).ListTransaction), arg0, arg1)
}

// Progress mocks base method.
func (m *MockLostIdServiceServer) Progress(arg0 context.Context, arg1 *v10.ProgressRequest) (*v10.ProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Progress", arg0, arg1)
	ret0, _ := ret[0].(*v10.ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progress indicates an expected call of Progress.
func (mr *MockLostIdServiceServerMockRecorder) Progress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockLostIdServiceServer)(nil).Progress), arg0, arg1)
}

// Search mocks base method.
func (m *MockLostIdServiceServer) Search(arg0 context.Context, arg1 *v1.SearchRequest) (*v10.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*v10.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLostIdServiceServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLostIdServiceServer)(nil).Search), arg0, arg1)
}

// mustEmbedUnimplementedLostIdServiceServer mocks base method.
func (m *MockLostIdServiceServer) mustEmbedUnimplementedLostIdServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLostIdServiceServer")
}

// mustEmbedUnimplementedLostIdServiceServer indicates an expected call of mustEmbedUnimplementedLostIdServiceServer.
func (mr *MockLostIdServiceServerMockRecorder) mustEmbedUnimplementedLostIdServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLostIdServiceServer", reflect.TypeOf((*MockLostIdServiceServer)(nil).mustEmbedUnimplementedLostIdServiceServer))
}

// MockUnsafeLostIdServiceServer is a mock of UnsafeLostIdServiceServer interface.
type MockUnsafeLostIdServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLostIdServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeLostIdServiceServerMockRecorder is the mock recorder for MockUnsafeLostIdServiceServer.
type MockUnsafeLostIdServiceServerMockRecorder struct {
	mock *MockUnsafeLostIdServiceServer
}

// NewMockUnsafeLostIdServiceServer creates a new mock instance.
func NewMockUnsafeLostIdServiceServer(ctrl *gomock.Controller) *MockUnsafeLostIdServiceServer {
	mock := &MockUnsafeLostIdServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLostIdServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLostIdServiceServer) EXPECT() *MockUnsafeLostIdServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLostIdServiceServer mocks base method.
func (m *MockUnsafeLostIdServiceServer) mustEmbedUnimplementedLostIdServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLostIdServiceServer")
}

// mustEmbedUnimplementedLostIdServiceServer indicates an expected call of mustEmbedUnimplementedLostIdServiceServer.
func (mr *MockUnsafeLostIdServiceServerMockRecorder) mustEmbedUnimplementedLostIdServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLostIdServiceServer", reflect.TypeOf((*MockUnsafeLostIdServiceServer)(nil).mustEmbedUnimplementedLostIdServiceServer))
}
