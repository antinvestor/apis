// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/lostid/v1/lostid_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/lostid/v1/lostid_grpc.pb.go -package=lostidv1 -destination=/home/j/code/antinvestor/apis/go/lostid/v1/lostid_grpc_mock.go
//
// Package lostidv1 is a generated GoMock package.
package lostidv1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockLostIdServiceClient is a mock of LostIdServiceClient interface.
type MockLostIdServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdServiceClientMockRecorder
}

// MockLostIdServiceClientMockRecorder is the mock recorder for MockLostIdServiceClient.
type MockLostIdServiceClientMockRecorder struct {
	mock *MockLostIdServiceClient
}

// NewMockLostIdServiceClient creates a new mock instance.
func NewMockLostIdServiceClient(ctrl *gomock.Controller) *MockLostIdServiceClient {
	mock := &MockLostIdServiceClient{ctrl: ctrl}
	mock.recorder = &MockLostIdServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdServiceClient) EXPECT() *MockLostIdServiceClientMockRecorder {
	return m.recorder
}

// Collectible mocks base method.
func (m *MockLostIdServiceClient) Collectible(ctx context.Context, in *CollectibleRequest, opts ...grpc.CallOption) (*CollectibleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collectible", varargs...)
	ret0, _ := ret[0].(*CollectibleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collectible indicates an expected call of Collectible.
func (mr *MockLostIdServiceClientMockRecorder) Collectible(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collectible", reflect.TypeOf((*MockLostIdServiceClient)(nil).Collectible), varargs...)
}

// ListCollectible mocks base method.
func (m *MockLostIdServiceClient) ListCollectible(ctx context.Context, in *ListCollectibleRequest, opts ...grpc.CallOption) (LostIdService_ListCollectibleClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectible", varargs...)
	ret0, _ := ret[0].(LostIdService_ListCollectibleClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectible indicates an expected call of ListCollectible.
func (mr *MockLostIdServiceClientMockRecorder) ListCollectible(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectible", reflect.TypeOf((*MockLostIdServiceClient)(nil).ListCollectible), varargs...)
}

// ListSearch mocks base method.
func (m *MockLostIdServiceClient) ListSearch(ctx context.Context, in *ListSearchRequest, opts ...grpc.CallOption) (LostIdService_ListSearchClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSearch", varargs...)
	ret0, _ := ret[0].(LostIdService_ListSearchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSearch indicates an expected call of ListSearch.
func (mr *MockLostIdServiceClientMockRecorder) ListSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSearch", reflect.TypeOf((*MockLostIdServiceClient)(nil).ListSearch), varargs...)
}

// ListTransaction mocks base method.
func (m *MockLostIdServiceClient) ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (LostIdService_ListTransactionClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransaction", varargs...)
	ret0, _ := ret[0].(LostIdService_ListTransactionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransaction indicates an expected call of ListTransaction.
func (mr *MockLostIdServiceClientMockRecorder) ListTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransaction", reflect.TypeOf((*MockLostIdServiceClient)(nil).ListTransaction), varargs...)
}

// Progress mocks base method.
func (m *MockLostIdServiceClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Progress", varargs...)
	ret0, _ := ret[0].(*ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progress indicates an expected call of Progress.
func (mr *MockLostIdServiceClientMockRecorder) Progress(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockLostIdServiceClient)(nil).Progress), varargs...)
}

// Search mocks base method.
func (m *MockLostIdServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLostIdServiceClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLostIdServiceClient)(nil).Search), varargs...)
}

// MockLostIdService_ListCollectibleClient is a mock of LostIdService_ListCollectibleClient interface.
type MockLostIdService_ListCollectibleClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdService_ListCollectibleClientMockRecorder
}

// MockLostIdService_ListCollectibleClientMockRecorder is the mock recorder for MockLostIdService_ListCollectibleClient.
type MockLostIdService_ListCollectibleClientMockRecorder struct {
	mock *MockLostIdService_ListCollectibleClient
}

// NewMockLostIdService_ListCollectibleClient creates a new mock instance.
func NewMockLostIdService_ListCollectibleClient(ctrl *gomock.Controller) *MockLostIdService_ListCollectibleClient {
	mock := &MockLostIdService_ListCollectibleClient{ctrl: ctrl}
	mock.recorder = &MockLostIdService_ListCollectibleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdService_ListCollectibleClient) EXPECT() *MockLostIdService_ListCollectibleClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLostIdService_ListCollectibleClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLostIdService_ListCollectibleClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLostIdService_ListCollectibleClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLostIdService_ListCollectibleClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostIdService_ListCollectibleClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostIdService_ListCollectibleClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLostIdService_ListCollectibleClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLostIdService_ListCollectibleClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLostIdService_ListCollectibleClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLostIdService_ListCollectibleClient) Recv() (*ListCollectibleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListCollectibleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLostIdService_ListCollectibleClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLostIdService_ListCollectibleClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLostIdService_ListCollectibleClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostIdService_ListCollectibleClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostIdService_ListCollectibleClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLostIdService_ListCollectibleClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostIdService_ListCollectibleClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostIdService_ListCollectibleClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLostIdService_ListCollectibleClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLostIdService_ListCollectibleClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLostIdService_ListCollectibleClient)(nil).Trailer))
}

// MockLostIdService_ListSearchClient is a mock of LostIdService_ListSearchClient interface.
type MockLostIdService_ListSearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdService_ListSearchClientMockRecorder
}

// MockLostIdService_ListSearchClientMockRecorder is the mock recorder for MockLostIdService_ListSearchClient.
type MockLostIdService_ListSearchClientMockRecorder struct {
	mock *MockLostIdService_ListSearchClient
}

// NewMockLostIdService_ListSearchClient creates a new mock instance.
func NewMockLostIdService_ListSearchClient(ctrl *gomock.Controller) *MockLostIdService_ListSearchClient {
	mock := &MockLostIdService_ListSearchClient{ctrl: ctrl}
	mock.recorder = &MockLostIdService_ListSearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdService_ListSearchClient) EXPECT() *MockLostIdService_ListSearchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLostIdService_ListSearchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLostIdService_ListSearchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLostIdService_ListSearchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLostIdService_ListSearchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostIdService_ListSearchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostIdService_ListSearchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLostIdService_ListSearchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLostIdService_ListSearchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLostIdService_ListSearchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLostIdService_ListSearchClient) Recv() (*ListSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLostIdService_ListSearchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLostIdService_ListSearchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLostIdService_ListSearchClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostIdService_ListSearchClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostIdService_ListSearchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLostIdService_ListSearchClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostIdService_ListSearchClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostIdService_ListSearchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLostIdService_ListSearchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLostIdService_ListSearchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLostIdService_ListSearchClient)(nil).Trailer))
}

// MockLostIdService_ListTransactionClient is a mock of LostIdService_ListTransactionClient interface.
type MockLostIdService_ListTransactionClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdService_ListTransactionClientMockRecorder
}

// MockLostIdService_ListTransactionClientMockRecorder is the mock recorder for MockLostIdService_ListTransactionClient.
type MockLostIdService_ListTransactionClientMockRecorder struct {
	mock *MockLostIdService_ListTransactionClient
}

// NewMockLostIdService_ListTransactionClient creates a new mock instance.
func NewMockLostIdService_ListTransactionClient(ctrl *gomock.Controller) *MockLostIdService_ListTransactionClient {
	mock := &MockLostIdService_ListTransactionClient{ctrl: ctrl}
	mock.recorder = &MockLostIdService_ListTransactionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdService_ListTransactionClient) EXPECT() *MockLostIdService_ListTransactionClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLostIdService_ListTransactionClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLostIdService_ListTransactionClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLostIdService_ListTransactionClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLostIdService_ListTransactionClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostIdService_ListTransactionClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostIdService_ListTransactionClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLostIdService_ListTransactionClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLostIdService_ListTransactionClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLostIdService_ListTransactionClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLostIdService_ListTransactionClient) Recv() (*ListTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLostIdService_ListTransactionClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLostIdService_ListTransactionClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLostIdService_ListTransactionClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostIdService_ListTransactionClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostIdService_ListTransactionClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLostIdService_ListTransactionClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostIdService_ListTransactionClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostIdService_ListTransactionClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLostIdService_ListTransactionClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLostIdService_ListTransactionClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLostIdService_ListTransactionClient)(nil).Trailer))
}

// MockLostIdServiceServer is a mock of LostIdServiceServer interface.
type MockLostIdServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdServiceServerMockRecorder
}

// MockLostIdServiceServerMockRecorder is the mock recorder for MockLostIdServiceServer.
type MockLostIdServiceServerMockRecorder struct {
	mock *MockLostIdServiceServer
}

// NewMockLostIdServiceServer creates a new mock instance.
func NewMockLostIdServiceServer(ctrl *gomock.Controller) *MockLostIdServiceServer {
	mock := &MockLostIdServiceServer{ctrl: ctrl}
	mock.recorder = &MockLostIdServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdServiceServer) EXPECT() *MockLostIdServiceServerMockRecorder {
	return m.recorder
}

// Collectible mocks base method.
func (m *MockLostIdServiceServer) Collectible(arg0 context.Context, arg1 *CollectibleRequest) (*CollectibleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collectible", arg0, arg1)
	ret0, _ := ret[0].(*CollectibleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collectible indicates an expected call of Collectible.
func (mr *MockLostIdServiceServerMockRecorder) Collectible(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collectible", reflect.TypeOf((*MockLostIdServiceServer)(nil).Collectible), arg0, arg1)
}

// ListCollectible mocks base method.
func (m *MockLostIdServiceServer) ListCollectible(arg0 *ListCollectibleRequest, arg1 LostIdService_ListCollectibleServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollectible", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollectible indicates an expected call of ListCollectible.
func (mr *MockLostIdServiceServerMockRecorder) ListCollectible(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectible", reflect.TypeOf((*MockLostIdServiceServer)(nil).ListCollectible), arg0, arg1)
}

// ListSearch mocks base method.
func (m *MockLostIdServiceServer) ListSearch(arg0 *ListSearchRequest, arg1 LostIdService_ListSearchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSearch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSearch indicates an expected call of ListSearch.
func (mr *MockLostIdServiceServerMockRecorder) ListSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSearch", reflect.TypeOf((*MockLostIdServiceServer)(nil).ListSearch), arg0, arg1)
}

// ListTransaction mocks base method.
func (m *MockLostIdServiceServer) ListTransaction(arg0 *ListTransactionRequest, arg1 LostIdService_ListTransactionServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransaction indicates an expected call of ListTransaction.
func (mr *MockLostIdServiceServerMockRecorder) ListTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransaction", reflect.TypeOf((*MockLostIdServiceServer)(nil).ListTransaction), arg0, arg1)
}

// Progress mocks base method.
func (m *MockLostIdServiceServer) Progress(arg0 context.Context, arg1 *ProgressRequest) (*ProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Progress", arg0, arg1)
	ret0, _ := ret[0].(*ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progress indicates an expected call of Progress.
func (mr *MockLostIdServiceServerMockRecorder) Progress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockLostIdServiceServer)(nil).Progress), arg0, arg1)
}

// Search mocks base method.
func (m *MockLostIdServiceServer) Search(arg0 context.Context, arg1 *SearchRequest) (*SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLostIdServiceServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLostIdServiceServer)(nil).Search), arg0, arg1)
}

// mustEmbedUnimplementedLostIdServiceServer mocks base method.
func (m *MockLostIdServiceServer) mustEmbedUnimplementedLostIdServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLostIdServiceServer")
}

// mustEmbedUnimplementedLostIdServiceServer indicates an expected call of mustEmbedUnimplementedLostIdServiceServer.
func (mr *MockLostIdServiceServerMockRecorder) mustEmbedUnimplementedLostIdServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLostIdServiceServer", reflect.TypeOf((*MockLostIdServiceServer)(nil).mustEmbedUnimplementedLostIdServiceServer))
}

// MockUnsafeLostIdServiceServer is a mock of UnsafeLostIdServiceServer interface.
type MockUnsafeLostIdServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLostIdServiceServerMockRecorder
}

// MockUnsafeLostIdServiceServerMockRecorder is the mock recorder for MockUnsafeLostIdServiceServer.
type MockUnsafeLostIdServiceServerMockRecorder struct {
	mock *MockUnsafeLostIdServiceServer
}

// NewMockUnsafeLostIdServiceServer creates a new mock instance.
func NewMockUnsafeLostIdServiceServer(ctrl *gomock.Controller) *MockUnsafeLostIdServiceServer {
	mock := &MockUnsafeLostIdServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLostIdServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLostIdServiceServer) EXPECT() *MockUnsafeLostIdServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLostIdServiceServer mocks base method.
func (m *MockUnsafeLostIdServiceServer) mustEmbedUnimplementedLostIdServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLostIdServiceServer")
}

// mustEmbedUnimplementedLostIdServiceServer indicates an expected call of mustEmbedUnimplementedLostIdServiceServer.
func (mr *MockUnsafeLostIdServiceServerMockRecorder) mustEmbedUnimplementedLostIdServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLostIdServiceServer", reflect.TypeOf((*MockUnsafeLostIdServiceServer)(nil).mustEmbedUnimplementedLostIdServiceServer))
}

// MockLostIdService_ListCollectibleServer is a mock of LostIdService_ListCollectibleServer interface.
type MockLostIdService_ListCollectibleServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdService_ListCollectibleServerMockRecorder
}

// MockLostIdService_ListCollectibleServerMockRecorder is the mock recorder for MockLostIdService_ListCollectibleServer.
type MockLostIdService_ListCollectibleServerMockRecorder struct {
	mock *MockLostIdService_ListCollectibleServer
}

// NewMockLostIdService_ListCollectibleServer creates a new mock instance.
func NewMockLostIdService_ListCollectibleServer(ctrl *gomock.Controller) *MockLostIdService_ListCollectibleServer {
	mock := &MockLostIdService_ListCollectibleServer{ctrl: ctrl}
	mock.recorder = &MockLostIdService_ListCollectibleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdService_ListCollectibleServer) EXPECT() *MockLostIdService_ListCollectibleServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLostIdService_ListCollectibleServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostIdService_ListCollectibleServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostIdService_ListCollectibleServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLostIdService_ListCollectibleServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostIdService_ListCollectibleServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostIdService_ListCollectibleServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLostIdService_ListCollectibleServer) Send(arg0 *ListCollectibleResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLostIdService_ListCollectibleServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLostIdService_ListCollectibleServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLostIdService_ListCollectibleServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLostIdService_ListCollectibleServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLostIdService_ListCollectibleServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLostIdService_ListCollectibleServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostIdService_ListCollectibleServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostIdService_ListCollectibleServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLostIdService_ListCollectibleServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLostIdService_ListCollectibleServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLostIdService_ListCollectibleServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLostIdService_ListCollectibleServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLostIdService_ListCollectibleServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLostIdService_ListCollectibleServer)(nil).SetTrailer), arg0)
}

// MockLostIdService_ListSearchServer is a mock of LostIdService_ListSearchServer interface.
type MockLostIdService_ListSearchServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdService_ListSearchServerMockRecorder
}

// MockLostIdService_ListSearchServerMockRecorder is the mock recorder for MockLostIdService_ListSearchServer.
type MockLostIdService_ListSearchServerMockRecorder struct {
	mock *MockLostIdService_ListSearchServer
}

// NewMockLostIdService_ListSearchServer creates a new mock instance.
func NewMockLostIdService_ListSearchServer(ctrl *gomock.Controller) *MockLostIdService_ListSearchServer {
	mock := &MockLostIdService_ListSearchServer{ctrl: ctrl}
	mock.recorder = &MockLostIdService_ListSearchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdService_ListSearchServer) EXPECT() *MockLostIdService_ListSearchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLostIdService_ListSearchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostIdService_ListSearchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostIdService_ListSearchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLostIdService_ListSearchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostIdService_ListSearchServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostIdService_ListSearchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLostIdService_ListSearchServer) Send(arg0 *ListSearchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLostIdService_ListSearchServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLostIdService_ListSearchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLostIdService_ListSearchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLostIdService_ListSearchServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLostIdService_ListSearchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLostIdService_ListSearchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostIdService_ListSearchServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostIdService_ListSearchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLostIdService_ListSearchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLostIdService_ListSearchServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLostIdService_ListSearchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLostIdService_ListSearchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLostIdService_ListSearchServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLostIdService_ListSearchServer)(nil).SetTrailer), arg0)
}

// MockLostIdService_ListTransactionServer is a mock of LostIdService_ListTransactionServer interface.
type MockLostIdService_ListTransactionServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostIdService_ListTransactionServerMockRecorder
}

// MockLostIdService_ListTransactionServerMockRecorder is the mock recorder for MockLostIdService_ListTransactionServer.
type MockLostIdService_ListTransactionServerMockRecorder struct {
	mock *MockLostIdService_ListTransactionServer
}

// NewMockLostIdService_ListTransactionServer creates a new mock instance.
func NewMockLostIdService_ListTransactionServer(ctrl *gomock.Controller) *MockLostIdService_ListTransactionServer {
	mock := &MockLostIdService_ListTransactionServer{ctrl: ctrl}
	mock.recorder = &MockLostIdService_ListTransactionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostIdService_ListTransactionServer) EXPECT() *MockLostIdService_ListTransactionServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLostIdService_ListTransactionServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostIdService_ListTransactionServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostIdService_ListTransactionServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLostIdService_ListTransactionServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostIdService_ListTransactionServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostIdService_ListTransactionServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLostIdService_ListTransactionServer) Send(arg0 *ListTransactionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLostIdService_ListTransactionServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLostIdService_ListTransactionServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLostIdService_ListTransactionServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLostIdService_ListTransactionServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLostIdService_ListTransactionServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLostIdService_ListTransactionServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostIdService_ListTransactionServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostIdService_ListTransactionServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLostIdService_ListTransactionServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLostIdService_ListTransactionServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLostIdService_ListTransactionServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLostIdService_ListTransactionServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLostIdService_ListTransactionServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLostIdService_ListTransactionServer)(nil).SetTrailer), arg0)
}
