// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: lostid/v1/lostid.proto

package lostidv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LostIdService_Collectible_FullMethodName     = "/lostid.v1.LostIdService/Collectible"
	LostIdService_ListCollectible_FullMethodName = "/lostid.v1.LostIdService/ListCollectible"
	LostIdService_Search_FullMethodName          = "/lostid.v1.LostIdService/Search"
	LostIdService_ListSearch_FullMethodName      = "/lostid.v1.LostIdService/ListSearch"
	LostIdService_Progress_FullMethodName        = "/lostid.v1.LostIdService/Progress"
	LostIdService_ListTransaction_FullMethodName = "/lostid.v1.LostIdService/ListTransaction"
)

// LostIdServiceClient is the client API for LostIdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LostIdServiceClient interface {
	// Log a new Collectible request
	Collectible(ctx context.Context, in *CollectibleRequest, opts ...grpc.CallOption) (*CollectibleResponse, error)
	ListCollectible(ctx context.Context, in *ListCollectibleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListCollectibleResponse], error)
	// Log a new search request
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	ListSearch(ctx context.Context, in *ListSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListSearchResponse], error)
	Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error)
	ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListTransactionResponse], error)
}

type lostIdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLostIdServiceClient(cc grpc.ClientConnInterface) LostIdServiceClient {
	return &lostIdServiceClient{cc}
}

func (c *lostIdServiceClient) Collectible(ctx context.Context, in *CollectibleRequest, opts ...grpc.CallOption) (*CollectibleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectibleResponse)
	err := c.cc.Invoke(ctx, LostIdService_Collectible_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostIdServiceClient) ListCollectible(ctx context.Context, in *ListCollectibleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListCollectibleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LostIdService_ServiceDesc.Streams[0], LostIdService_ListCollectible_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListCollectibleRequest, ListCollectibleResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LostIdService_ListCollectibleClient = grpc.ServerStreamingClient[ListCollectibleResponse]

func (c *lostIdServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, LostIdService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostIdServiceClient) ListSearch(ctx context.Context, in *ListSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListSearchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LostIdService_ServiceDesc.Streams[1], LostIdService_ListSearch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListSearchRequest, ListSearchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LostIdService_ListSearchClient = grpc.ServerStreamingClient[ListSearchResponse]

func (c *lostIdServiceClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProgressResponse)
	err := c.cc.Invoke(ctx, LostIdService_Progress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostIdServiceClient) ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListTransactionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LostIdService_ServiceDesc.Streams[2], LostIdService_ListTransaction_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListTransactionRequest, ListTransactionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LostIdService_ListTransactionClient = grpc.ServerStreamingClient[ListTransactionResponse]

// LostIdServiceServer is the server API for LostIdService service.
// All implementations must embed UnimplementedLostIdServiceServer
// for forward compatibility.
type LostIdServiceServer interface {
	// Log a new Collectible request
	Collectible(context.Context, *CollectibleRequest) (*CollectibleResponse, error)
	ListCollectible(*ListCollectibleRequest, grpc.ServerStreamingServer[ListCollectibleResponse]) error
	// Log a new search request
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	ListSearch(*ListSearchRequest, grpc.ServerStreamingServer[ListSearchResponse]) error
	Progress(context.Context, *ProgressRequest) (*ProgressResponse, error)
	ListTransaction(*ListTransactionRequest, grpc.ServerStreamingServer[ListTransactionResponse]) error
	mustEmbedUnimplementedLostIdServiceServer()
}

// UnimplementedLostIdServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLostIdServiceServer struct{}

func (UnimplementedLostIdServiceServer) Collectible(context.Context, *CollectibleRequest) (*CollectibleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collectible not implemented")
}
func (UnimplementedLostIdServiceServer) ListCollectible(*ListCollectibleRequest, grpc.ServerStreamingServer[ListCollectibleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListCollectible not implemented")
}
func (UnimplementedLostIdServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedLostIdServiceServer) ListSearch(*ListSearchRequest, grpc.ServerStreamingServer[ListSearchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListSearch not implemented")
}
func (UnimplementedLostIdServiceServer) Progress(context.Context, *ProgressRequest) (*ProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedLostIdServiceServer) ListTransaction(*ListTransactionRequest, grpc.ServerStreamingServer[ListTransactionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListTransaction not implemented")
}
func (UnimplementedLostIdServiceServer) mustEmbedUnimplementedLostIdServiceServer() {}
func (UnimplementedLostIdServiceServer) testEmbeddedByValue()                       {}

// UnsafeLostIdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LostIdServiceServer will
// result in compilation errors.
type UnsafeLostIdServiceServer interface {
	mustEmbedUnimplementedLostIdServiceServer()
}

func RegisterLostIdServiceServer(s grpc.ServiceRegistrar, srv LostIdServiceServer) {
	// If the following call pancis, it indicates UnimplementedLostIdServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LostIdService_ServiceDesc, srv)
}

func _LostIdService_Collectible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectibleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostIdServiceServer).Collectible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostIdService_Collectible_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostIdServiceServer).Collectible(ctx, req.(*CollectibleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostIdService_ListCollectible_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCollectibleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LostIdServiceServer).ListCollectible(m, &grpc.GenericServerStream[ListCollectibleRequest, ListCollectibleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LostIdService_ListCollectibleServer = grpc.ServerStreamingServer[ListCollectibleResponse]

func _LostIdService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostIdServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostIdService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostIdServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostIdService_ListSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LostIdServiceServer).ListSearch(m, &grpc.GenericServerStream[ListSearchRequest, ListSearchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LostIdService_ListSearchServer = grpc.ServerStreamingServer[ListSearchResponse]

func _LostIdService_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostIdServiceServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostIdService_Progress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostIdServiceServer).Progress(ctx, req.(*ProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostIdService_ListTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LostIdServiceServer).ListTransaction(m, &grpc.GenericServerStream[ListTransactionRequest, ListTransactionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LostIdService_ListTransactionServer = grpc.ServerStreamingServer[ListTransactionResponse]

// LostIdService_ServiceDesc is the grpc.ServiceDesc for LostIdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LostIdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lostid.v1.LostIdService",
	HandlerType: (*LostIdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collectible",
			Handler:    _LostIdService_Collectible_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _LostIdService_Search_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _LostIdService_Progress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCollectible",
			Handler:       _LostIdService_ListCollectible_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSearch",
			Handler:       _LostIdService_ListSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTransaction",
			Handler:       _LostIdService_ListTransaction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lostid/v1/lostid.proto",
}
