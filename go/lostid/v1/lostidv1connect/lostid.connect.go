// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lostid/v1/lostid.proto

package lostidv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/antinvestor/apis/go/common/v1"
	v1 "github.com/antinvestor/apis/go/lostid/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LostIdServiceName is the fully-qualified name of the LostIdService service.
	LostIdServiceName = "lostid.v1.LostIdService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LostIdServiceCollectibleProcedure is the fully-qualified name of the LostIdService's Collectible
	// RPC.
	LostIdServiceCollectibleProcedure = "/lostid.v1.LostIdService/Collectible"
	// LostIdServiceListCollectibleProcedure is the fully-qualified name of the LostIdService's
	// ListCollectible RPC.
	LostIdServiceListCollectibleProcedure = "/lostid.v1.LostIdService/ListCollectible"
	// LostIdServiceSearchProcedure is the fully-qualified name of the LostIdService's Search RPC.
	LostIdServiceSearchProcedure = "/lostid.v1.LostIdService/Search"
	// LostIdServiceListSearchProcedure is the fully-qualified name of the LostIdService's ListSearch
	// RPC.
	LostIdServiceListSearchProcedure = "/lostid.v1.LostIdService/ListSearch"
	// LostIdServiceProgressProcedure is the fully-qualified name of the LostIdService's Progress RPC.
	LostIdServiceProgressProcedure = "/lostid.v1.LostIdService/Progress"
	// LostIdServiceListTransactionProcedure is the fully-qualified name of the LostIdService's
	// ListTransaction RPC.
	LostIdServiceListTransactionProcedure = "/lostid.v1.LostIdService/ListTransaction"
)

// LostIdServiceClient is a client for the lostid.v1.LostIdService service.
type LostIdServiceClient interface {
	// Collectible registers a found identification document.
	// Supports up to 5 images of the found item.
	Collectible(context.Context, *connect.Request[v1.CollectibleRequest]) (*connect.Response[v1.CollectibleResponse], error)
	// ListCollectible retrieves registered collectibles.
	// Supports pagination or time-based filtering.
	ListCollectible(context.Context, *connect.Request[v1.ListCollectibleRequest]) (*connect.ServerStreamForClient[v1.ListCollectibleResponse], error)
	// Search creates a search request for a lost item.
	// The system will attempt to match with registered collectibles.
	Search(context.Context, *connect.Request[v11.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	// ListSearch retrieves search requests.
	// Supports pagination or time-based filtering.
	ListSearch(context.Context, *connect.Request[v1.ListSearchRequest]) (*connect.ServerStreamForClient[v1.ListSearchResponse], error)
	// Progress retrieves the complete history for a collectible or search.
	// Includes status updates and financial transactions.
	Progress(context.Context, *connect.Request[v1.ProgressRequest]) (*connect.Response[v1.ProgressResponse], error)
	// ListTransaction retrieves financial transactions.
	// Includes rewards paid and service fees charged.
	ListTransaction(context.Context, *connect.Request[v1.ListTransactionRequest]) (*connect.ServerStreamForClient[v1.ListTransactionResponse], error)
}

// NewLostIdServiceClient constructs a client for the lostid.v1.LostIdService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLostIdServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LostIdServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	lostIdServiceMethods := v1.File_lostid_v1_lostid_proto.Services().ByName("LostIdService").Methods()
	return &lostIdServiceClient{
		collectible: connect.NewClient[v1.CollectibleRequest, v1.CollectibleResponse](
			httpClient,
			baseURL+LostIdServiceCollectibleProcedure,
			connect.WithSchema(lostIdServiceMethods.ByName("Collectible")),
			connect.WithClientOptions(opts...),
		),
		listCollectible: connect.NewClient[v1.ListCollectibleRequest, v1.ListCollectibleResponse](
			httpClient,
			baseURL+LostIdServiceListCollectibleProcedure,
			connect.WithSchema(lostIdServiceMethods.ByName("ListCollectible")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v11.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+LostIdServiceSearchProcedure,
			connect.WithSchema(lostIdServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		listSearch: connect.NewClient[v1.ListSearchRequest, v1.ListSearchResponse](
			httpClient,
			baseURL+LostIdServiceListSearchProcedure,
			connect.WithSchema(lostIdServiceMethods.ByName("ListSearch")),
			connect.WithClientOptions(opts...),
		),
		progress: connect.NewClient[v1.ProgressRequest, v1.ProgressResponse](
			httpClient,
			baseURL+LostIdServiceProgressProcedure,
			connect.WithSchema(lostIdServiceMethods.ByName("Progress")),
			connect.WithClientOptions(opts...),
		),
		listTransaction: connect.NewClient[v1.ListTransactionRequest, v1.ListTransactionResponse](
			httpClient,
			baseURL+LostIdServiceListTransactionProcedure,
			connect.WithSchema(lostIdServiceMethods.ByName("ListTransaction")),
			connect.WithClientOptions(opts...),
		),
	}
}

// lostIdServiceClient implements LostIdServiceClient.
type lostIdServiceClient struct {
	collectible     *connect.Client[v1.CollectibleRequest, v1.CollectibleResponse]
	listCollectible *connect.Client[v1.ListCollectibleRequest, v1.ListCollectibleResponse]
	search          *connect.Client[v11.SearchRequest, v1.SearchResponse]
	listSearch      *connect.Client[v1.ListSearchRequest, v1.ListSearchResponse]
	progress        *connect.Client[v1.ProgressRequest, v1.ProgressResponse]
	listTransaction *connect.Client[v1.ListTransactionRequest, v1.ListTransactionResponse]
}

// Collectible calls lostid.v1.LostIdService.Collectible.
func (c *lostIdServiceClient) Collectible(ctx context.Context, req *connect.Request[v1.CollectibleRequest]) (*connect.Response[v1.CollectibleResponse], error) {
	return c.collectible.CallUnary(ctx, req)
}

// ListCollectible calls lostid.v1.LostIdService.ListCollectible.
func (c *lostIdServiceClient) ListCollectible(ctx context.Context, req *connect.Request[v1.ListCollectibleRequest]) (*connect.ServerStreamForClient[v1.ListCollectibleResponse], error) {
	return c.listCollectible.CallServerStream(ctx, req)
}

// Search calls lostid.v1.LostIdService.Search.
func (c *lostIdServiceClient) Search(ctx context.Context, req *connect.Request[v11.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// ListSearch calls lostid.v1.LostIdService.ListSearch.
func (c *lostIdServiceClient) ListSearch(ctx context.Context, req *connect.Request[v1.ListSearchRequest]) (*connect.ServerStreamForClient[v1.ListSearchResponse], error) {
	return c.listSearch.CallServerStream(ctx, req)
}

// Progress calls lostid.v1.LostIdService.Progress.
func (c *lostIdServiceClient) Progress(ctx context.Context, req *connect.Request[v1.ProgressRequest]) (*connect.Response[v1.ProgressResponse], error) {
	return c.progress.CallUnary(ctx, req)
}

// ListTransaction calls lostid.v1.LostIdService.ListTransaction.
func (c *lostIdServiceClient) ListTransaction(ctx context.Context, req *connect.Request[v1.ListTransactionRequest]) (*connect.ServerStreamForClient[v1.ListTransactionResponse], error) {
	return c.listTransaction.CallServerStream(ctx, req)
}

// LostIdServiceHandler is an implementation of the lostid.v1.LostIdService service.
type LostIdServiceHandler interface {
	// Collectible registers a found identification document.
	// Supports up to 5 images of the found item.
	Collectible(context.Context, *connect.Request[v1.CollectibleRequest]) (*connect.Response[v1.CollectibleResponse], error)
	// ListCollectible retrieves registered collectibles.
	// Supports pagination or time-based filtering.
	ListCollectible(context.Context, *connect.Request[v1.ListCollectibleRequest], *connect.ServerStream[v1.ListCollectibleResponse]) error
	// Search creates a search request for a lost item.
	// The system will attempt to match with registered collectibles.
	Search(context.Context, *connect.Request[v11.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	// ListSearch retrieves search requests.
	// Supports pagination or time-based filtering.
	ListSearch(context.Context, *connect.Request[v1.ListSearchRequest], *connect.ServerStream[v1.ListSearchResponse]) error
	// Progress retrieves the complete history for a collectible or search.
	// Includes status updates and financial transactions.
	Progress(context.Context, *connect.Request[v1.ProgressRequest]) (*connect.Response[v1.ProgressResponse], error)
	// ListTransaction retrieves financial transactions.
	// Includes rewards paid and service fees charged.
	ListTransaction(context.Context, *connect.Request[v1.ListTransactionRequest], *connect.ServerStream[v1.ListTransactionResponse]) error
}

// NewLostIdServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLostIdServiceHandler(svc LostIdServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lostIdServiceMethods := v1.File_lostid_v1_lostid_proto.Services().ByName("LostIdService").Methods()
	lostIdServiceCollectibleHandler := connect.NewUnaryHandler(
		LostIdServiceCollectibleProcedure,
		svc.Collectible,
		connect.WithSchema(lostIdServiceMethods.ByName("Collectible")),
		connect.WithHandlerOptions(opts...),
	)
	lostIdServiceListCollectibleHandler := connect.NewServerStreamHandler(
		LostIdServiceListCollectibleProcedure,
		svc.ListCollectible,
		connect.WithSchema(lostIdServiceMethods.ByName("ListCollectible")),
		connect.WithHandlerOptions(opts...),
	)
	lostIdServiceSearchHandler := connect.NewUnaryHandler(
		LostIdServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(lostIdServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	lostIdServiceListSearchHandler := connect.NewServerStreamHandler(
		LostIdServiceListSearchProcedure,
		svc.ListSearch,
		connect.WithSchema(lostIdServiceMethods.ByName("ListSearch")),
		connect.WithHandlerOptions(opts...),
	)
	lostIdServiceProgressHandler := connect.NewUnaryHandler(
		LostIdServiceProgressProcedure,
		svc.Progress,
		connect.WithSchema(lostIdServiceMethods.ByName("Progress")),
		connect.WithHandlerOptions(opts...),
	)
	lostIdServiceListTransactionHandler := connect.NewServerStreamHandler(
		LostIdServiceListTransactionProcedure,
		svc.ListTransaction,
		connect.WithSchema(lostIdServiceMethods.ByName("ListTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	return "/lostid.v1.LostIdService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LostIdServiceCollectibleProcedure:
			lostIdServiceCollectibleHandler.ServeHTTP(w, r)
		case LostIdServiceListCollectibleProcedure:
			lostIdServiceListCollectibleHandler.ServeHTTP(w, r)
		case LostIdServiceSearchProcedure:
			lostIdServiceSearchHandler.ServeHTTP(w, r)
		case LostIdServiceListSearchProcedure:
			lostIdServiceListSearchHandler.ServeHTTP(w, r)
		case LostIdServiceProgressProcedure:
			lostIdServiceProgressHandler.ServeHTTP(w, r)
		case LostIdServiceListTransactionProcedure:
			lostIdServiceListTransactionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLostIdServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLostIdServiceHandler struct{}

func (UnimplementedLostIdServiceHandler) Collectible(context.Context, *connect.Request[v1.CollectibleRequest]) (*connect.Response[v1.CollectibleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lostid.v1.LostIdService.Collectible is not implemented"))
}

func (UnimplementedLostIdServiceHandler) ListCollectible(context.Context, *connect.Request[v1.ListCollectibleRequest], *connect.ServerStream[v1.ListCollectibleResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("lostid.v1.LostIdService.ListCollectible is not implemented"))
}

func (UnimplementedLostIdServiceHandler) Search(context.Context, *connect.Request[v11.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lostid.v1.LostIdService.Search is not implemented"))
}

func (UnimplementedLostIdServiceHandler) ListSearch(context.Context, *connect.Request[v1.ListSearchRequest], *connect.ServerStream[v1.ListSearchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("lostid.v1.LostIdService.ListSearch is not implemented"))
}

func (UnimplementedLostIdServiceHandler) Progress(context.Context, *connect.Request[v1.ProgressRequest]) (*connect.Response[v1.ProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lostid.v1.LostIdService.Progress is not implemented"))
}

func (UnimplementedLostIdServiceHandler) ListTransaction(context.Context, *connect.Request[v1.ListTransactionRequest], *connect.ServerStream[v1.ListTransactionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("lostid.v1.LostIdService.ListTransaction is not implemented"))
}
