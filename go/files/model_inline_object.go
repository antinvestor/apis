// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Ant Investor Files
 *
 * An openAPI 3.0 specification that defines how files are stored and accessed on ant investor products
 *
 * API version: 1.0.0
 * Contact: info@antinvestor.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package file_v1

import (
	"encoding/json"
	"os"
)

// InlineObject struct for InlineObject
type InlineObject struct {
	GroupId    *string   `json:"group_id,omitempty"`
	AccessId   *string   `json:"access_id,omitempty"`
	Public     *bool     `json:"public,omitempty"`
	Name       *string   `json:"name,omitempty"`
	FileObject **os.File `json:"fileObject,omitempty"`
}

// NewInlineObject instantiates a new InlineObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject() *InlineObject {
	this := InlineObject{}
	var public bool = false
	this.Public = &public
	return &this
}

// NewInlineObjectWithDefaults instantiates a new InlineObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObjectWithDefaults() *InlineObject {
	this := InlineObject{}
	var public bool = false
	this.Public = &public
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *InlineObject) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *InlineObject) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *InlineObject) SetGroupId(v string) {
	o.GroupId = &v
}

// GetAccessId returns the AccessId field value if set, zero value otherwise.
func (o *InlineObject) GetAccessId() string {
	if o == nil || o.AccessId == nil {
		var ret string
		return ret
	}
	return *o.AccessId
}

// GetAccessIdOk returns a tuple with the AccessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetAccessIdOk() (*string, bool) {
	if o == nil || o.AccessId == nil {
		return nil, false
	}
	return o.AccessId, true
}

// HasAccessId returns a boolean if a field has been set.
func (o *InlineObject) HasAccessId() bool {
	if o != nil && o.AccessId != nil {
		return true
	}

	return false
}

// SetAccessId gets a reference to the given string and assigns it to the AccessId field.
func (o *InlineObject) SetAccessId(v string) {
	o.AccessId = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *InlineObject) GetPublic() bool {
	if o == nil || o.Public == nil {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetPublicOk() (*bool, bool) {
	if o == nil || o.Public == nil {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *InlineObject) HasPublic() bool {
	if o != nil && o.Public != nil {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *InlineObject) SetPublic(v bool) {
	o.Public = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineObject) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineObject) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineObject) SetName(v string) {
	o.Name = &v
}

// GetFileObject returns the FileObject field value if set, zero value otherwise.
func (o *InlineObject) GetFileObject() *os.File {
	if o == nil || o.FileObject == nil {
		var ret *os.File
		return ret
	}
	return *o.FileObject
}

// GetFileObjectOk returns a tuple with the FileObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetFileObjectOk() (**os.File, bool) {
	if o == nil || o.FileObject == nil {
		return nil, false
	}
	return o.FileObject, true
}

// HasFileObject returns a boolean if a field has been set.
func (o *InlineObject) HasFileObject() bool {
	if o != nil && o.FileObject != nil {
		return true
	}

	return false
}

// SetFileObject gets a reference to the given *os.File and assigns it to the FileObject field.
func (o *InlineObject) SetFileObject(v *os.File) {
	o.FileObject = &v
}

func (o InlineObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupId != nil {
		toSerialize["group_id"] = o.GroupId
	}
	if o.AccessId != nil {
		toSerialize["access_id"] = o.AccessId
	}
	if o.Public != nil {
		toSerialize["public"] = o.Public
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.FileObject != nil {
		toSerialize["fileObject"] = o.FileObject
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject struct {
	value *InlineObject
	isSet bool
}

func (v NullableInlineObject) Get() *InlineObject {
	return v.value
}

func (v *NullableInlineObject) Set(val *InlineObject) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject(val *InlineObject) *NullableInlineObject {
	return &NullableInlineObject{value: val, isSet: true}
}

func (v NullableInlineObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
