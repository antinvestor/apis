/*
Ant Investor Files

An openAPI 3.0 specification that defines how files are stored and accessed on ant investor products

API version: 1.0.0
Contact: info@antinvestor.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package file_v1

import (
	"encoding/json"
)

// checks if the MediaMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaMetadata{}

// MediaMetadata struct for MediaMetadata
type MediaMetadata struct {
	// The media ID of the file
	MediaId *string `json:"media_id,omitempty"`
	// The content type of the file
	ContentType *string `json:"content_type,omitempty"`
	// The size of the file in bytes
	FileSizeBytes *int32 `json:"file_size_bytes,omitempty"`
	// The timestamp when the file was uploaded
	CreationTimestamp *int32 `json:"creation_timestamp,omitempty"`
	// The name of the file when it was uploaded
	UploadName *string `json:"upload_name,omitempty"`
	// The base64 encoded hash of the file
	Base64Hash *string `json:"base64_hash,omitempty"`
	// The ID of the user who uploaded the file
	OwnerId *string `json:"owner_id,omitempty"`
}

// NewMediaMetadata instantiates a new MediaMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaMetadata() *MediaMetadata {
	this := MediaMetadata{}
	return &this
}

// NewMediaMetadataWithDefaults instantiates a new MediaMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaMetadataWithDefaults() *MediaMetadata {
	this := MediaMetadata{}
	return &this
}

// GetMediaId returns the MediaId field value if set, zero value otherwise.
func (o *MediaMetadata) GetMediaId() string {
	if o == nil || IsNil(o.MediaId) {
		var ret string
		return ret
	}
	return *o.MediaId
}

// GetMediaIdOk returns a tuple with the MediaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaMetadata) GetMediaIdOk() (*string, bool) {
	if o == nil || IsNil(o.MediaId) {
		return nil, false
	}
	return o.MediaId, true
}

// HasMediaId returns a boolean if a field has been set.
func (o *MediaMetadata) HasMediaId() bool {
	if o != nil && !IsNil(o.MediaId) {
		return true
	}

	return false
}

// SetMediaId gets a reference to the given string and assigns it to the MediaId field.
func (o *MediaMetadata) SetMediaId(v string) {
	o.MediaId = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *MediaMetadata) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaMetadata) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *MediaMetadata) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *MediaMetadata) SetContentType(v string) {
	o.ContentType = &v
}

// GetFileSizeBytes returns the FileSizeBytes field value if set, zero value otherwise.
func (o *MediaMetadata) GetFileSizeBytes() int32 {
	if o == nil || IsNil(o.FileSizeBytes) {
		var ret int32
		return ret
	}
	return *o.FileSizeBytes
}

// GetFileSizeBytesOk returns a tuple with the FileSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaMetadata) GetFileSizeBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.FileSizeBytes) {
		return nil, false
	}
	return o.FileSizeBytes, true
}

// HasFileSizeBytes returns a boolean if a field has been set.
func (o *MediaMetadata) HasFileSizeBytes() bool {
	if o != nil && !IsNil(o.FileSizeBytes) {
		return true
	}

	return false
}

// SetFileSizeBytes gets a reference to the given int32 and assigns it to the FileSizeBytes field.
func (o *MediaMetadata) SetFileSizeBytes(v int32) {
	o.FileSizeBytes = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *MediaMetadata) GetCreationTimestamp() int32 {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaMetadata) GetCreationTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *MediaMetadata) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given int32 and assigns it to the CreationTimestamp field.
func (o *MediaMetadata) SetCreationTimestamp(v int32) {
	o.CreationTimestamp = &v
}

// GetUploadName returns the UploadName field value if set, zero value otherwise.
func (o *MediaMetadata) GetUploadName() string {
	if o == nil || IsNil(o.UploadName) {
		var ret string
		return ret
	}
	return *o.UploadName
}

// GetUploadNameOk returns a tuple with the UploadName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaMetadata) GetUploadNameOk() (*string, bool) {
	if o == nil || IsNil(o.UploadName) {
		return nil, false
	}
	return o.UploadName, true
}

// HasUploadName returns a boolean if a field has been set.
func (o *MediaMetadata) HasUploadName() bool {
	if o != nil && !IsNil(o.UploadName) {
		return true
	}

	return false
}

// SetUploadName gets a reference to the given string and assigns it to the UploadName field.
func (o *MediaMetadata) SetUploadName(v string) {
	o.UploadName = &v
}

// GetBase64Hash returns the Base64Hash field value if set, zero value otherwise.
func (o *MediaMetadata) GetBase64Hash() string {
	if o == nil || IsNil(o.Base64Hash) {
		var ret string
		return ret
	}
	return *o.Base64Hash
}

// GetBase64HashOk returns a tuple with the Base64Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaMetadata) GetBase64HashOk() (*string, bool) {
	if o == nil || IsNil(o.Base64Hash) {
		return nil, false
	}
	return o.Base64Hash, true
}

// HasBase64Hash returns a boolean if a field has been set.
func (o *MediaMetadata) HasBase64Hash() bool {
	if o != nil && !IsNil(o.Base64Hash) {
		return true
	}

	return false
}

// SetBase64Hash gets a reference to the given string and assigns it to the Base64Hash field.
func (o *MediaMetadata) SetBase64Hash(v string) {
	o.Base64Hash = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *MediaMetadata) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId) {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaMetadata) GetOwnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *MediaMetadata) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *MediaMetadata) SetOwnerId(v string) {
	o.OwnerId = &v
}

func (o MediaMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaId) {
		toSerialize["media_id"] = o.MediaId
	}
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.FileSizeBytes) {
		toSerialize["file_size_bytes"] = o.FileSizeBytes
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creation_timestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.UploadName) {
		toSerialize["upload_name"] = o.UploadName
	}
	if !IsNil(o.Base64Hash) {
		toSerialize["base64_hash"] = o.Base64Hash
	}
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	return toSerialize, nil
}

type NullableMediaMetadata struct {
	value *MediaMetadata
	isSet bool
}

func (v NullableMediaMetadata) Get() *MediaMetadata {
	return v.value
}

func (v *NullableMediaMetadata) Set(val *MediaMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaMetadata(val *MediaMetadata) *NullableMediaMetadata {
	return &NullableMediaMetadata{value: val, isSet: true}
}

func (v NullableMediaMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
