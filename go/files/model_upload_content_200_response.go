/*
Ant Investor Files

An openAPI 3.0 specification that defines how files are stored and accessed on ant investor products

API version: 1.0.0
Contact: info@antinvestor.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package file_v1

import (
	"encoding/json"
	"fmt"
)

// checks if the UploadContent200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadContent200Response{}

// UploadContent200Response struct for UploadContent200Response
type UploadContent200Response struct {
	// The [`mxc://` URI](/client-server-api/#matrix-content-mxc-uris) to the uploaded content.
	ContentUri string `json:"content_uri"`
}

type _UploadContent200Response UploadContent200Response

// NewUploadContent200Response instantiates a new UploadContent200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadContent200Response(contentUri string) *UploadContent200Response {
	this := UploadContent200Response{}
	this.ContentUri = contentUri
	return &this
}

// NewUploadContent200ResponseWithDefaults instantiates a new UploadContent200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadContent200ResponseWithDefaults() *UploadContent200Response {
	this := UploadContent200Response{}
	return &this
}

// GetContentUri returns the ContentUri field value
func (o *UploadContent200Response) GetContentUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentUri
}

// GetContentUriOk returns a tuple with the ContentUri field value
// and a boolean to check if the value has been set.
func (o *UploadContent200Response) GetContentUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentUri, true
}

// SetContentUri sets field value
func (o *UploadContent200Response) SetContentUri(v string) {
	o.ContentUri = v
}

func (o UploadContent200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadContent200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content_uri"] = o.ContentUri
	return toSerialize, nil
}

func (o *UploadContent200Response) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content_uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadContent200Response := _UploadContent200Response{}

	err = json.Unmarshal(bytes, &varUploadContent200Response)

	if err != nil {
		return err
	}

	*o = UploadContent200Response(varUploadContent200Response)

	return err
}

type NullableUploadContent200Response struct {
	value *UploadContent200Response
	isSet bool
}

func (v NullableUploadContent200Response) Get() *UploadContent200Response {
	return v.value
}

func (v *NullableUploadContent200Response) Set(val *UploadContent200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadContent200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadContent200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadContent200Response(val *UploadContent200Response) *NullableUploadContent200Response {
	return &NullableUploadContent200Response{value: val, isSet: true}
}

func (v NullableUploadContent200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadContent200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


