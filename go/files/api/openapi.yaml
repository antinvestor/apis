openapi: 3.1.0
info:
  contact:
    email: info@antinvestor.com
    name: Ant Investor Team
    url: https://antinvestor.com
  description: An openAPI 3.0 specification that defines how files are stored and
    accessed on ant investor products
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://antinvestor/terms/
  title: Ant Investor Files
  version: 1.0.0
servers:
- url: "{protocol}://{hostname}{basePath}"
  variables:
    protocol:
      default: https
      enum:
      - http
      - https
    hostname:
      default: media.antinvestor.com
    basePath:
      default: /_matrix/client/v1
paths:
  /media/v3/upload:
    post:
      operationId: uploadContent
      parameters:
      - $ref: "#/components/parameters/contentType"
      - $ref: "#/components/parameters/filename"
      requestBody:
        $ref: "#/components/requestBodies/bytes"
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    content_uri: mxc://example.com/AQwafuaFswefuhsfAFAgsw
              schema:
                $ref: "#/components/schemas/uploadContent_200_response"
          description: "The [`mxc://` URI](/client-server-api/#matrix-content-mxc-uris)\
            \ for the uploaded content."
        "403":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: M_FORBIDDEN
                    error: Cannot upload this content
              schema:
                $ref: "#/components/schemas/Error_1"
          description: |-
            The user does not have permission to upload the content. Some reasons for this error include:

            - The server does not permit the file type.
            - The user has reached a quota for uploaded content.
        "413":
          $ref: "#/components/responses/uploadTooLarge"
        "429":
          $ref: "#/components/responses/rateLimited"
      security:
      - accessTokenBearer: []
      summary: Upload some content to the content repository.
      tags:
      - Media
  /media/v3/upload/{serverName}/{mediaId}:
    put:
      description: |-
        This endpoint permits uploading content to an `mxc://` URI that was created
        earlier via [POST /_matrix/media/v1/create](/client-server-api/#post_matrixmediav1create).
      operationId: uploadContentToMXC
      parameters:
      - $ref: "#/components/parameters/serverName"
        description: |
          The server name from the `mxc://` URI returned by `POST /_matrix/media/v1/create` (the authority component).
      - $ref: "#/components/parameters/mediaId"
        description: |
          The media ID from the `mxc://` URI returned by `POST /_matrix/media/v1/create` (the path component).
      - $ref: "#/components/parameters/contentType"
      - $ref: "#/components/parameters/filename"
      requestBody:
        $ref: "#/components/requestBodies/bytes"
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value: {}
              schema:
                type: object
          description: The upload was successful.
        "403":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: M_FORBIDDEN
                    error: Cannot upload this content
              schema:
                $ref: "#/components/schemas/Error_1"
          description: |-
            The user does not have permission to upload the content. Some reasons for this error include:

            - The server does not permit the file type.
            - The user has reached a quota for uploaded content.
            - The request comes from a different user than the one that called
              [POST /_matrix/media/v1/create](/client-server-api/#post_matrixmediav1create).

            A [standard error response](/client-server-api/#standard-error-response)
            will be returned with the `code` `M_FORBIDDEN`.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: M_NOT_FOUND
                    error: Unknown media ID
              schema:
                $ref: "#/components/schemas/Error_1"
          description: |-
            The user has provided an invalid MXC ID. Some reasons for this error include:

            - The MXC ID was not created with [POST /_matrix/media/v1/create](/client-server-api/#post_matrixmediav1create).
            - The MXC ID has expired.

            A [standard error response](/client-server-api/#standard-error-response)
            will be returned with the `code` `M_NOT_FOUND`.
        "409":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: M_CANNOT_OVERWRITE_MEDIA
                    error: Media already uploaded
              schema:
                $ref: "#/components/schemas/Error_1"
          description: |-
            The endpoint was called with a media ID that already has content. A
            [standard error response](/client-server-api/#standard-error-response)
            will be returned with the `code` `M_CANNOT_OVERWRITE_MEDIA`.
        "413":
          $ref: "#/components/responses/uploadTooLarge"
        "429":
          $ref: "#/components/responses/rateLimited"
      security:
      - accessTokenBearer: []
      summary: Upload content to an `mxc://` URI that was created earlier.
      tags:
      - Media
  /media/v1/create:
    post:
      description: |-
        Creates a new `mxc://` URI, independently of the content being uploaded. The content must be provided later
        via [`PUT /_matrix/media/v3/upload/{serverName}/{mediaId}`](/client-server-api/#put_matrixmediav3uploadservernamemediaid).

        The server may optionally enforce a maximum age for unused IDs,
        and delete media IDs when the client doesn't start the upload in time,
        or when the upload was interrupted and not resumed in time. The server
        should include the maximum POSIX millisecond timestamp to complete the
        upload in the `unused_expires_at` field in the response JSON. The
        recommended default expiration is 24 hours which should be enough time
        to accommodate users on poor connection who find a better connection to
        complete the upload.

        As well as limiting the rate of requests to create `mxc://` URIs, the server
        should limit the number of concurrent *pending media uploads* a given
        user can have. A pending media upload is a created `mxc://` URI where (a)
        the media has not yet been uploaded, and (b) has not yet expired (the
        `unused_expires_at` timestamp has not yet passed). In both cases, the
        server should respond with an HTTP 429 error with an code of
        `M_LIMIT_EXCEEDED`.
      operationId: createContent
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createContent_200_response"
          description: "The [`mxc://` URI](/client-server-api/#matrix-content-mxc-uris)\
            \ for the uploaded content."
        "403":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: M_FORBIDDEN
                    error: Cannot upload this content
              schema:
                $ref: "#/components/schemas/Error_1"
          description: The user does not have permission to upload the content.
        "429":
          $ref: "#/components/responses/rateLimited"
      security:
      - accessTokenBearer: []
      summary: Create a new `mxc://` URI without uploading the content.
      tags:
      - Media
  /media/download/{serverName}/{mediaId}:
    get:
      description: |-
        {{% boxes/note %}}
        Clients SHOULD NOT generate or use URLs which supply the access token in
        the query string. These URLs may be copied by users verbatim and provided
        in a chat message to another user, disclosing the sender's access token.
        {{% /boxes/note %}}

        Clients MAY be redirected using the 307/308 responses below to download
        the request object. This is typical when the homeserver uses a Content
        Delivery Network (CDN).
      operationId: getContentAuthed
      parameters:
      - $ref: "#/components/parameters/serverName"
      - $ref: "#/components/parameters/mediaId"
      - $ref: "#/components/parameters/timeout_ms"
      responses:
        "200":
          content:
            application/octet-stream:
              schema: {}
          description: The content that was previously uploaded.
          headers:
            Content-Type:
              $ref: "#/components/headers/downloadContentType"
            Content-Disposition:
              description: |
                The [disposition](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)
                of the returned content. MUST be one of `inline` or `attachment`,
                and SHOULD contain a file name.

                If the `Content-Type` is allowed in the [restrictions for serving
                inline content](/client-server-api/#serving-inline-content),
                servers SHOULD use `inline`, otherwise they SHOULD use
                `attachment`.

                If the upload was made with a `filename`, this header MUST
                contain the same `filename`. Otherwise, `filename` is excluded
                from the header. If the media being downloaded is remote, the
                remote server's `filename` in the `Content-Disposition` header
                is used as the `filename` instead. When the header is not
                supplied, or does not supply a `filename`, the local download
                response does not include a `filename`.
              explode: false
              required: true
              schema:
                example: inline; filename="filename.jpg"
                type: string
              style: simple
        "307":
          $ref: "#/components/responses/downloadRedirect"
        "308":
          $ref: "#/components/responses/downloadRedirect"
        "429":
          $ref: "#/components/responses/rateLimited"
        "502":
          $ref: "#/components/responses/downloadTooLarge"
        "504":
          $ref: "#/components/responses/notYetUploaded"
      security:
      - accessTokenBearer: []
      summary: Download content from the content repository.
      tags:
      - Media
  /media/download/{serverName}/{mediaId}/{fileName}:
    get:
      description: |-
        This will download content from the content repository (same as
        the previous endpoint) but replaces the target file name with the one
        provided by the caller.

        {{% boxes/note %}}
        Clients SHOULD NOT generate or use URLs which supply the access token in
        the query string. These URLs may be copied by users verbatim and provided
        in a chat message to another user, disclosing the sender's access token.
        {{% /boxes/note %}}

        Clients MAY be redirected using the 307/308 responses below to download
        the request object. This is typical when the homeserver uses a Content
        Delivery Network (CDN).
      operationId: getContentOverrideNameAuthed
      parameters:
      - $ref: "#/components/parameters/serverName"
      - $ref: "#/components/parameters/mediaId"
      - description: A filename to give in the `Content-Disposition` header.
        example: filename.jpg
        explode: false
        in: path
        name: fileName
        required: true
        schema:
          type: string
        style: simple
      - $ref: "#/components/parameters/timeout_ms"
      responses:
        "200":
          content:
            application/octet-stream:
              schema: {}
          description: The content that was previously uploaded.
          headers:
            Content-Type:
              $ref: "#/components/headers/downloadContentType"
            Content-Disposition:
              description: |
                The [disposition](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)
                of the returned content. MUST be one of `inline` or `attachment`,
                and MUST contain the file name requested in the path.

                If the `Content-Type` is allowed in the [restrictions for serving
                inline content](/client-server-api/#serving-inline-content),
                servers SHOULD use `inline`, otherwise they SHOULD use
                `attachment`.
              explode: false
              required: true
              schema:
                example: inline; filename="filename.jpg"
                type: string
              style: simple
        "307":
          $ref: "#/components/responses/downloadRedirect"
        "308":
          $ref: "#/components/responses/downloadRedirect"
        "429":
          $ref: "#/components/responses/rateLimited"
        "502":
          $ref: "#/components/responses/downloadTooLarge"
        "504":
          $ref: "#/components/responses/notYetUploaded"
      security:
      - accessTokenBearer: []
      summary: Download content from the content repository overriding the file name.
      tags:
      - Media
  /media/thumbnail/{serverName}/{mediaId}:
    get:
      description: |-
        Download a thumbnail of content from the content repository.
        See the [Thumbnails](/client-server-api/#thumbnails) section for more information.

        {{% boxes/note %}}
        Clients SHOULD NOT generate or use URLs which supply the access token in
        the query string. These URLs may be copied by users verbatim and provided
        in a chat message to another user, disclosing the sender's access token.
        {{% /boxes/note %}}

        Clients MAY be redirected using the 307/308 responses below to download
        the request object. This is typical when the homeserver uses a Content
        Delivery Network (CDN).
      operationId: getContentThumbnailAuthed
      parameters:
      - $ref: "#/components/parameters/serverName"
      - $ref: "#/components/parameters/mediaId"
      - description: |-
          The *desired* width of the thumbnail. The actual thumbnail may be
          larger than the size specified.
        example: 64
        explode: true
        in: query
        name: width
        required: true
        schema:
          type: integer
        style: form
      - description: |-
          The *desired* height of the thumbnail. The actual thumbnail may be
          larger than the size specified.
        example: 64
        explode: true
        in: query
        name: height
        required: true
        schema:
          type: integer
        style: form
      - description: |-
          The desired resizing method. See the [Thumbnails](/client-server-api/#thumbnails)
          section for more information.
        example: scale
        explode: true
        in: query
        name: method
        required: false
        schema:
          enum:
          - crop
          - scale
          type: string
        style: form
      - $ref: "#/components/parameters/timeout_ms"
      - description: |
          Indicates preference for an animated thumbnail from the server, if possible. Animated
          thumbnails typically use the content types `image/gif`, `image/png` (with APNG format),
          `image/apng`, and `image/webp` instead of the common static `image/png` or `image/jpeg`
          content types.

          When `true`, the server SHOULD return an animated thumbnail if possible and supported.
          When `false`, the server MUST NOT return an animated thumbnail. For example, returning a
          static `image/png` or `image/jpeg` thumbnail. When not provided, the server SHOULD NOT
          return an animated thumbnail.

          Servers SHOULD prefer to return `image/webp` thumbnails when supporting animation.

          When `true` and the media cannot be animated, such as in the case of a JPEG or PDF, the
          server SHOULD behave as though `animated` is `false`.
        example: false
        explode: true
        in: query
        name: animated
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            image/jpeg:
              schema: {}
            image/png:
              schema: {}
            image/apng:
              schema: {}
            image/gif:
              schema: {}
            image/webp:
              schema: {}
          description: A thumbnail of the requested content.
          headers:
            Content-Disposition:
              description: |
                The [disposition](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)
                of the returned content. MUST be `inline`, and SHOULD contain a file name (e.g. `thumbnail.png`).

                Servers should note the [Content-Type restrictions for serving inline content](/client-server-api/#serving-inline-content),
                as these limitations imply which formats should be used for thumbnail generation.
              explode: false
              required: true
              schema:
                example: inline; filename="thumbnail.png"
                type: string
              style: simple
            Content-Type:
              description: The content type of the thumbnail. This header became required
                in order to support `Content-Disposition`.
              explode: false
              required: true
              schema:
                enum:
                - image/jpeg
                - image/png
                - image/apng
                - image/gif
                - image/webp
                type: string
              style: simple
        "307":
          $ref: "#/components/responses/thumbnailRedirect"
        "308":
          $ref: "#/components/responses/thumbnailRedirect"
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: M_UNKNOWN
                    error: Cannot generate thumbnails for the requested content
              schema:
                $ref: "#/components/schemas/Error_1"
          description: |-
            The request does not make sense to the server, or the server cannot thumbnail
            the content. For example, the client requested non-integer dimensions or asked
            for negatively-sized images.
        "413":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: M_TOO_LARGE
                    error: Content is too large to thumbnail
              schema:
                $ref: "#/components/schemas/Error_1"
          description: The local content is too large for the server to thumbnail.
        "429":
          $ref: "#/components/responses/rateLimited"
        "502":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: M_TOO_LARGE
                    error: Content is too large to thumbnail
              schema:
                $ref: "#/components/schemas/Error_1"
          description: The remote content is too large for the server to thumbnail.
        "504":
          $ref: "#/components/responses/notYetUploaded"
      security:
      - accessTokenBearer: []
      summary: Download a thumbnail of content from the content repository
      tags:
      - Media
  /media/preview_url:
    get:
      description: |-
        Get information about a URL for the client. Typically this is called when a
        client sees a URL in a message and wants to render a preview for the user.

        {{% boxes/note %}}
        Clients should consider avoiding this endpoint for URLs posted in encrypted
        rooms. Encrypted rooms often contain more sensitive information the users
        do not want to share with the homeserver, and this can mean that the URLs
        being shared should also not be shared with the homeserver.
        {{% /boxes/note %}}
      operationId: getUrlPreviewAuthed
      parameters:
      - description: The URL to get a preview of.
        example: https://matrix.org
        explode: true
        in: query
        name: url
        required: true
        schema:
          format: uri
          type: string
        style: form
      - description: |-
          The preferred point in time to return a preview for. The server may
          return a newer version if it does not have the requested version
          available.
        example: 1510610716656
        explode: true
        in: query
        name: ts
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    og:title: Matrix Blog Post
                    og:description: This is a really cool blog post from matrix.org
                    og:image: mxc://example.com/ascERGshawAWawugaAcauga
                    og:image:type: image/png
                    og:image:height: 48
                    og:image:width: 48
                    matrix:image:size: 102400
              schema:
                $ref: "#/components/schemas/getUrlPreviewAuthed_200_response"
          description: |-
            The OpenGraph data for the URL, which may be empty. Some values are
            replaced with matrix equivalents if they are provided in the response.
            The differences from the OpenGraph protocol are described here.
        "429":
          $ref: "#/components/responses/rateLimited"
      security:
      - accessTokenBearer: []
      summary: Get information about a URL for a client
      tags:
      - Media
  /media/config:
    get:
      description: |-
        This endpoint allows clients to retrieve the configuration of the content
        repository, such as upload limitations.
        Clients SHOULD use this as a guide when using content repository endpoints.
        All values are intentionally left optional. Clients SHOULD follow
        the advice given in the field description when the field is not available.

        {{% boxes/note %}}
        Both clients and server administrators should be aware that proxies
        between the client and the server may affect the apparent behaviour of content
        repository APIs, for example, proxies may enforce a lower upload size limit
        than is advertised by the server on this endpoint.
        {{% /boxes/note %}}
      operationId: getConfigAuthed
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    m.upload.size: 50000000
              schema:
                $ref: "#/components/schemas/getConfigAuthed_200_response"
          description: The public content repository configuration for the matrix
            server.
        "429":
          $ref: "#/components/responses/rateLimited"
      security:
      - accessTokenBearer: []
      summary: Get the configuration for the content repository.
      tags:
      - Media
  /media/search:
    get:
      operationId: searchMedia
      parameters:
      - description: Search query string
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Page number for pagination (default 0)
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: "Number of results per page (default 20, max 100)"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Filter by owner ID
        explode: true
        in: query
        name: owner_id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by parent media ID
        explode: true
        in: query
        name: parent_id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by creation date (start range)
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by creation date (end range)
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    results:
                    - media_id: AQwafuaFswefuhsfAFAgsw
                      content_type: image/jpeg
                      file_size_bytes: 102400
                      creation_timestamp: 1640995200
                      upload_name: example.jpg
                      base64_hash: aGVsbG8gd29ybGQ
                      owner_id: '@user:example.com'
                    total: 1
                    page: 0
                    has_more: false
              schema:
                $ref: "#/components/schemas/searchMedia_200_response"
          description: Search results containing media metadata
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad request - invalid parameters
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized - missing or invalid access token
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      security:
      - accessTokenBearer: []
      summary: Search for media files
      tags:
      - Media
components:
  headers:
    downloadContentType:
      description: "The content type of the file that was previously uploaded.\n\n\
        The server MUST return a `Content-Type` which is either exactly the same\n\
        as the original upload, or reasonably close. The bounds of \"reasonable\"\n\
        are:\n\n* Adding a charset to `text/*` content types.\n* Detecting HTML and\
        \ using `text/html` instead of `text/plain`.\n* Using `application/octet-stream`\
        \ when the server determines the\n  content type is obviously wrong. For example,\
        \ an encrypted file being\n  claimed as `image/png`.\n* Returning `application/octet-stream`\
        \ when the media has an\n  unknown/unprovided `Content-Type`. For example,\
        \ being uploaded before\n  the server tracked content types or when the remote\
        \ server is\n  non-compliantly omitting the header entirely.\n\nActions not\
        \ in the spirit of the above are not considered \"reasonable\".\nThis header\
        \ became required in order to support `Content-Disposition` and the \nbehaviour\
        \ to compute its value was clarified.\n"
      explode: false
      required: true
      schema: {}
      style: simple
  parameters:
    contentType:
      description: |
        **Optional.** The content type of the file being uploaded.

        Clients SHOULD always supply this header.

        Defaults to `application/octet-stream` if it is not set.
        This header became explicitly optional with a default value.
      example: application/pdf
      explode: false
      in: header
      name: Content-Type
      required: false
      schema:
        type: string
      style: simple
    filename:
      description: The name of the file being uploaded
      example: War and Peace.pdf
      explode: true
      in: query
      name: filename
      required: false
      schema:
        type: string
      style: form
    serverName:
      description: |
        The server name from the `mxc://` URI (the authority component).
      example: matrix.org
      explode: false
      in: path
      name: serverName
      required: true
      schema:
        format: mx-server-name
        type: string
      style: simple
    mediaId:
      description: |
        The media ID from the `mxc://` URI (the path component).
      example: ascERGshawAWawugaAcauga
      explode: false
      in: path
      name: mediaId
      required: true
      schema:
        type: string
      style: simple
    timeout_ms:
      description: |
        The maximum number of milliseconds that the client is willing to wait to
        start receiving data, in the case that the content has not yet been
        uploaded. The default value is 20000 (20 seconds). The content
        repository SHOULD impose a maximum value for this parameter. The
        content repository MAY respond before the timeout.
      example: 5000
      explode: true
      in: query
      name: timeout_ms
      required: false
      schema:
        default: 20000
        format: int64
        type: integer
      style: form
  requestBodies:
    bytes:
      content:
        application/octet-stream:
          schema: {}
      required: true
  responses:
    uploadTooLarge:
      content:
        application/json:
          examples:
            response:
              value:
                code: M_TOO_LARGE
                error: Cannot upload files larger than 100mb
          schema:
            $ref: "#/components/schemas/Error_1"
      description: The uploaded content is too large for the server.
    rateLimited:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object"
      description: This request was rate-limited.
    notYetUploaded:
      content:
        application/json:
          examples:
            response:
              value:
                code: M_NOT_YET_UPLOADED
                error: Content has not yet been uploaded
          schema:
            $ref: "#/components/schemas/Error_1"
      description: |-
        The content is not yet available. A [standard error response](/client-server-api/#standard-error-response)
        will be returned with the `code` `M_NOT_YET_UPLOADED`.
    downloadRedirect:
      description: A redirect to the requested content.
      headers:
        Location:
          description: The URL of the content.
          explode: false
          schema:
            format: uri
            type: string
          style: simple
    downloadTooLarge:
      content:
        application/json:
          examples:
            response:
              value:
                code: M_TOO_LARGE
                error: Content is too large to serve
          schema:
            $ref: "#/components/schemas/Error_1"
      description: The content is too large for the server to serve.
    thumbnailRedirect:
      description: A redirect to the thumbnail of the requested content.
      headers:
        Location:
          description: The URL of the thumbnail content.
          explode: false
          schema:
            format: uri
            type: string
          style: simple
  schemas:
    MediaMetadata:
      example:
        base64_hash: base64_hash
        content_type: content_type
        owner_id: owner_id
        creation_timestamp: 6
        media_id: media_id
        file_size_bytes: 0
        upload_name: upload_name
      properties:
        media_id:
          description: The media ID of the file
          type: string
        content_type:
          description: The content type of the file
          type: string
        file_size_bytes:
          description: The size of the file in bytes
          type: integer
        creation_timestamp:
          description: The timestamp when the file was uploaded
          type: integer
        upload_name:
          description: The name of the file when it was uploaded
          type: string
        base64_hash:
          description: The base64 encoded hash of the file
          type: string
        owner_id:
          description: The ID of the user who uploaded the file
          type: string
    Error:
      example:
        code: code
        error: error
      properties:
        code:
          description: The error code
          type: string
        error:
          description: The error message
          type: string
    uploadContent_200_response:
      example:
        content_uri: content_uri
      properties:
        content_uri:
          description: "The [`mxc://` URI](/client-server-api/#matrix-content-mxc-uris)\
            \ to the uploaded content."
          format: mx-mxc-uri
          pattern: ^mxc:\/\/
          type: string
      required:
      - content_uri
    Error_1:
      description: A Service level Error
      example:
        errcode: M_UNKNOWN
        error: An unknown error occurred
      properties:
        errcode:
          description: An error code for the error.
          example: M_UNKNOWN
          type: string
        error:
          description: A human-readable error message.
          example: An unknown error occurred
          type: string
      required:
      - errcode
      title: Error
    createContent_200_response:
      example:
        content_uri: mxc://example.com/AQwafuaFswefuhsfAFAgsw
        unused_expires_at: 1647257217083
      properties:
        content_uri:
          description: |-
            The [`mxc://` URI](/client-server-api/#matrix-content-mxc-uris) at
            which the content will be available, once it is uploaded.
          example: mxc://example.com/AQwafuaFswefuhsfAFAgsw
          format: mx-mxc-uri
          pattern: ^mxc:\/\/
          type: string
        unused_expires_at:
          description: |-
            The timestamp (in milliseconds since the unix epoch) when the
            generated media id will expire, if media is not uploaded.
          example: 1647257217083
          format: int64
          type: integer
      required:
      - content_uri
    getUrlPreviewAuthed_200_response:
      example:
        og:image: https://openapi-generator.tech
        matrix:image:size: 0
      properties:
        matrix:image:size:
          description: The byte-size of the image. Omitted if there is no image attached.
          format: int64
          type: integer
        og:image:
          description: "An [`mxc://` URI](/client-server-api/#matrix-content-mxc-uris)\
            \ to the image. Omitted if there is no image."
          format: uri
          type: string
    getConfigAuthed_200_response:
      example:
        m.upload.size: 0
      properties:
        m.upload.size:
          description: |-
            The maximum size an upload can be in bytes.
            Clients SHOULD use this as a guide when uploading content.
            If not listed or null, the size limit should be treated as unknown.
          format: int64
          type: integer
    searchMedia_200_response:
      example:
        total: 1
        page: 5
        has_more: true
        results:
        - base64_hash: base64_hash
          content_type: content_type
          owner_id: owner_id
          creation_timestamp: 6
          media_id: media_id
          file_size_bytes: 0
          upload_name: upload_name
        - base64_hash: base64_hash
          content_type: content_type
          owner_id: owner_id
          creation_timestamp: 6
          media_id: media_id
          file_size_bytes: 0
          upload_name: upload_name
      properties:
        results:
          description: Array of media metadata objects matching the search criteria
          items:
            $ref: "#/components/schemas/MediaMetadata"
          type: array
        total:
          description: Total number of results returned in this page
          type: integer
        page:
          description: Current page number
          type: integer
        has_more:
          description: Whether there are more results available
          type: boolean
      required:
      - has_more
      - page
      - results
      - total
    inline_object:
      allOf:
      - description: A Service level Error
        properties:
          errcode:
            description: An error code for the error.
            example: M_UNKNOWN
            type: string
          error:
            description: A human-readable error message.
            example: An unknown error occurred
            type: string
        required:
        - errcode
        title: Error
      - description: The rate limit was reached for this request
        properties:
          errcode:
            description: The M_LIMIT_EXCEEDED error code
            example: M_LIMIT_EXCEEDED
            type: string
          error:
            description: A human-readable error message.
            example: Too many requests
            type: string
          retry_after_ms:
            description: |-
              The amount of time in milliseconds the client should wait
              before trying the request again.
            example: 2000
            type: integer
        required:
        - errcode
        title: RateLimitError
      example:
        errcode: M_LIMIT_EXCEEDED
        retry_after_ms: 2000
        error: Too many requests
  securitySchemes:
    accessTokenBearer:
      bearerFormat: JWT
      description: |-
        The `access_token` returned by a call to `/login` or `/register`, using the
        `Authorization: Bearer` header.

        It can also be the `as_token` of an application service.

        This is the preferred method.
      scheme: bearer
      type: http
