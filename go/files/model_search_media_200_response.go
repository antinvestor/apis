/*
Ant Investor Files

An openAPI 3.0 specification that defines how files are stored and accessed on ant investor products

API version: 1.0.0
Contact: info@antinvestor.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package file_v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchMedia200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchMedia200Response{}

// SearchMedia200Response struct for SearchMedia200Response
type SearchMedia200Response struct {
	// Array of media metadata objects matching the search criteria
	Results []MediaMetadata `json:"results"`
	// Total number of results returned in this page
	Total int32 `json:"total"`
	// Current page number
	Page int32 `json:"page"`
	// Whether there are more results available
	HasMore bool `json:"has_more"`
}

type _SearchMedia200Response SearchMedia200Response

// NewSearchMedia200Response instantiates a new SearchMedia200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchMedia200Response(results []MediaMetadata, total int32, page int32, hasMore bool) *SearchMedia200Response {
	this := SearchMedia200Response{}
	this.Results = results
	this.Total = total
	this.Page = page
	this.HasMore = hasMore
	return &this
}

// NewSearchMedia200ResponseWithDefaults instantiates a new SearchMedia200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchMedia200ResponseWithDefaults() *SearchMedia200Response {
	this := SearchMedia200Response{}
	return &this
}

// GetResults returns the Results field value
func (o *SearchMedia200Response) GetResults() []MediaMetadata {
	if o == nil {
		var ret []MediaMetadata
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *SearchMedia200Response) GetResultsOk() ([]MediaMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *SearchMedia200Response) SetResults(v []MediaMetadata) {
	o.Results = v
}

// GetTotal returns the Total field value
func (o *SearchMedia200Response) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *SearchMedia200Response) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *SearchMedia200Response) SetTotal(v int32) {
	o.Total = v
}

// GetPage returns the Page field value
func (o *SearchMedia200Response) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *SearchMedia200Response) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *SearchMedia200Response) SetPage(v int32) {
	o.Page = v
}

// GetHasMore returns the HasMore field value
func (o *SearchMedia200Response) GetHasMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value
// and a boolean to check if the value has been set.
func (o *SearchMedia200Response) GetHasMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasMore, true
}

// SetHasMore sets field value
func (o *SearchMedia200Response) SetHasMore(v bool) {
	o.HasMore = v
}

func (o SearchMedia200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchMedia200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["results"] = o.Results
	toSerialize["total"] = o.Total
	toSerialize["page"] = o.Page
	toSerialize["has_more"] = o.HasMore
	return toSerialize, nil
}

func (o *SearchMedia200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
		"total",
		"page",
		"has_more",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchMedia200Response := _SearchMedia200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchMedia200Response)

	if err != nil {
		return err
	}

	*o = SearchMedia200Response(varSearchMedia200Response)

	return err
}

type NullableSearchMedia200Response struct {
	value *SearchMedia200Response
	isSet bool
}

func (v NullableSearchMedia200Response) Get() *SearchMedia200Response {
	return v.value
}

func (v *NullableSearchMedia200Response) Set(val *SearchMedia200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchMedia200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchMedia200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchMedia200Response(val *SearchMedia200Response) *NullableSearchMedia200Response {
	return &NullableSearchMedia200Response{value: val, isSet: true}
}

func (v NullableSearchMedia200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchMedia200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
