// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: settings/v1/settings.proto

package settingsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/antinvestor/apis/go/common/v1"
	v1 "github.com/antinvestor/apis/go/settings/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SettingsServiceName is the fully-qualified name of the SettingsService service.
	SettingsServiceName = "settings.v1.SettingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SettingsServiceGetProcedure is the fully-qualified name of the SettingsService's Get RPC.
	SettingsServiceGetProcedure = "/settings.v1.SettingsService/Get"
	// SettingsServiceListProcedure is the fully-qualified name of the SettingsService's List RPC.
	SettingsServiceListProcedure = "/settings.v1.SettingsService/List"
	// SettingsServiceSearchProcedure is the fully-qualified name of the SettingsService's Search RPC.
	SettingsServiceSearchProcedure = "/settings.v1.SettingsService/Search"
	// SettingsServiceSetProcedure is the fully-qualified name of the SettingsService's Set RPC.
	SettingsServiceSetProcedure = "/settings.v1.SettingsService/Set"
)

// SettingsServiceClient is a client for the settings.v1.SettingsService service.
type SettingsServiceClient interface {
	// Get retrieves a single setting value by its hierarchical key.
	// Returns the most specific matching setting based on the key hierarchy.
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// List retrieves all settings matching a partial key.
	// Empty fields in the key act as wildcards.
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.ServerStreamForClient[v1.ListResponse], error)
	// Search finds settings matching specified criteria.
	// Supports full-text search and filtering.
	Search(context.Context, *connect.Request[v11.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error)
	// Set creates or updates a setting value.
	// Creates a new setting if it doesn't exist, updates if it does.
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
}

// NewSettingsServiceClient constructs a client for the settings.v1.SettingsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSettingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SettingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	settingsServiceMethods := v1.File_settings_v1_settings_proto.Services().ByName("SettingsService").Methods()
	return &settingsServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+SettingsServiceGetProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+SettingsServiceListProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v11.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+SettingsServiceSearchProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+SettingsServiceSetProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("Set")),
			connect.WithClientOptions(opts...),
		),
	}
}

// settingsServiceClient implements SettingsServiceClient.
type settingsServiceClient struct {
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
	search *connect.Client[v11.SearchRequest, v1.SearchResponse]
	set    *connect.Client[v1.SetRequest, v1.SetResponse]
}

// Get calls settings.v1.SettingsService.Get.
func (c *settingsServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls settings.v1.SettingsService.List.
func (c *settingsServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.ServerStreamForClient[v1.ListResponse], error) {
	return c.list.CallServerStream(ctx, req)
}

// Search calls settings.v1.SettingsService.Search.
func (c *settingsServiceClient) Search(ctx context.Context, req *connect.Request[v11.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error) {
	return c.search.CallServerStream(ctx, req)
}

// Set calls settings.v1.SettingsService.Set.
func (c *settingsServiceClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// SettingsServiceHandler is an implementation of the settings.v1.SettingsService service.
type SettingsServiceHandler interface {
	// Get retrieves a single setting value by its hierarchical key.
	// Returns the most specific matching setting based on the key hierarchy.
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// List retrieves all settings matching a partial key.
	// Empty fields in the key act as wildcards.
	List(context.Context, *connect.Request[v1.ListRequest], *connect.ServerStream[v1.ListResponse]) error
	// Search finds settings matching specified criteria.
	// Supports full-text search and filtering.
	Search(context.Context, *connect.Request[v11.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error
	// Set creates or updates a setting value.
	// Creates a new setting if it doesn't exist, updates if it does.
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
}

// NewSettingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSettingsServiceHandler(svc SettingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	settingsServiceMethods := v1.File_settings_v1_settings_proto.Services().ByName("SettingsService").Methods()
	settingsServiceGetHandler := connect.NewUnaryHandler(
		SettingsServiceGetProcedure,
		svc.Get,
		connect.WithSchema(settingsServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceListHandler := connect.NewServerStreamHandler(
		SettingsServiceListProcedure,
		svc.List,
		connect.WithSchema(settingsServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceSearchHandler := connect.NewServerStreamHandler(
		SettingsServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(settingsServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceSetHandler := connect.NewUnaryHandler(
		SettingsServiceSetProcedure,
		svc.Set,
		connect.WithSchema(settingsServiceMethods.ByName("Set")),
		connect.WithHandlerOptions(opts...),
	)
	return "/settings.v1.SettingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SettingsServiceGetProcedure:
			settingsServiceGetHandler.ServeHTTP(w, r)
		case SettingsServiceListProcedure:
			settingsServiceListHandler.ServeHTTP(w, r)
		case SettingsServiceSearchProcedure:
			settingsServiceSearchHandler.ServeHTTP(w, r)
		case SettingsServiceSetProcedure:
			settingsServiceSetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSettingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSettingsServiceHandler struct{}

func (UnimplementedSettingsServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.Get is not implemented"))
}

func (UnimplementedSettingsServiceHandler) List(context.Context, *connect.Request[v1.ListRequest], *connect.ServerStream[v1.ListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.List is not implemented"))
}

func (UnimplementedSettingsServiceHandler) Search(context.Context, *connect.Request[v11.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.Search is not implemented"))
}

func (UnimplementedSettingsServiceHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.Set is not implemented"))
}
