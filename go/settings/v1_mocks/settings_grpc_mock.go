// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/settings/v1/settings_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/settings/v1/settings_grpc.pb.go -package=settingsv1_mocks -destination=/home/j/code/antinvestor/apis/go/settings/v1_mocks/settings_grpc_mock.go
//

// Package settingsv1_mocks is a generated GoMock package.
package settingsv1_mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/antinvestor/apis/go/common/v1"
	v10 "github.com/antinvestor/apis/go/settings/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSettingsServiceClient is a mock of SettingsServiceClient interface.
type MockSettingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsServiceClientMockRecorder
	isgomock struct{}
}

// MockSettingsServiceClientMockRecorder is the mock recorder for MockSettingsServiceClient.
type MockSettingsServiceClientMockRecorder struct {
	mock *MockSettingsServiceClient
}

// NewMockSettingsServiceClient creates a new mock instance.
func NewMockSettingsServiceClient(ctrl *gomock.Controller) *MockSettingsServiceClient {
	mock := &MockSettingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockSettingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsServiceClient) EXPECT() *MockSettingsServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSettingsServiceClient) Get(ctx context.Context, in *v10.GetRequest, opts ...grpc.CallOption) (*v10.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSettingsServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSettingsServiceClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockSettingsServiceClient) List(ctx context.Context, in *v10.ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v10.ListResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v10.ListResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSettingsServiceClientMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSettingsServiceClient)(nil).List), varargs...)
}

// Search mocks base method.
func (m *MockSettingsServiceClient) Search(ctx context.Context, in *v1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v10.SearchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v10.SearchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSettingsServiceClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSettingsServiceClient)(nil).Search), varargs...)
}

// Set mocks base method.
func (m *MockSettingsServiceClient) Set(ctx context.Context, in *v10.SetRequest, opts ...grpc.CallOption) (*v10.SetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*v10.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockSettingsServiceClientMockRecorder) Set(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSettingsServiceClient)(nil).Set), varargs...)
}

// MockSettingsServiceServer is a mock of SettingsServiceServer interface.
type MockSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsServiceServerMockRecorder
	isgomock struct{}
}

// MockSettingsServiceServerMockRecorder is the mock recorder for MockSettingsServiceServer.
type MockSettingsServiceServerMockRecorder struct {
	mock *MockSettingsServiceServer
}

// NewMockSettingsServiceServer creates a new mock instance.
func NewMockSettingsServiceServer(ctrl *gomock.Controller) *MockSettingsServiceServer {
	mock := &MockSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsServiceServer) EXPECT() *MockSettingsServiceServerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSettingsServiceServer) Get(arg0 context.Context, arg1 *v10.GetRequest) (*v10.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v10.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSettingsServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSettingsServiceServer)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockSettingsServiceServer) List(arg0 *v10.ListRequest, arg1 grpc.ServerStreamingServer[v10.ListResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockSettingsServiceServerMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSettingsServiceServer)(nil).List), arg0, arg1)
}

// Search mocks base method.
func (m *MockSettingsServiceServer) Search(arg0 *v1.SearchRequest, arg1 grpc.ServerStreamingServer[v10.SearchResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockSettingsServiceServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSettingsServiceServer)(nil).Search), arg0, arg1)
}

// Set mocks base method.
func (m *MockSettingsServiceServer) Set(arg0 context.Context, arg1 *v10.SetRequest) (*v10.SetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*v10.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockSettingsServiceServerMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSettingsServiceServer)(nil).Set), arg0, arg1)
}

// mustEmbedUnimplementedSettingsServiceServer mocks base method.
func (m *MockSettingsServiceServer) mustEmbedUnimplementedSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSettingsServiceServer")
}

// mustEmbedUnimplementedSettingsServiceServer indicates an expected call of mustEmbedUnimplementedSettingsServiceServer.
func (mr *MockSettingsServiceServerMockRecorder) mustEmbedUnimplementedSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSettingsServiceServer", reflect.TypeOf((*MockSettingsServiceServer)(nil).mustEmbedUnimplementedSettingsServiceServer))
}

// MockUnsafeSettingsServiceServer is a mock of UnsafeSettingsServiceServer interface.
type MockUnsafeSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSettingsServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeSettingsServiceServerMockRecorder is the mock recorder for MockUnsafeSettingsServiceServer.
type MockUnsafeSettingsServiceServerMockRecorder struct {
	mock *MockUnsafeSettingsServiceServer
}

// NewMockUnsafeSettingsServiceServer creates a new mock instance.
func NewMockUnsafeSettingsServiceServer(ctrl *gomock.Controller) *MockUnsafeSettingsServiceServer {
	mock := &MockUnsafeSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSettingsServiceServer) EXPECT() *MockUnsafeSettingsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSettingsServiceServer mocks base method.
func (m *MockUnsafeSettingsServiceServer) mustEmbedUnimplementedSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSettingsServiceServer")
}

// mustEmbedUnimplementedSettingsServiceServer indicates an expected call of mustEmbedUnimplementedSettingsServiceServer.
func (mr *MockUnsafeSettingsServiceServerMockRecorder) mustEmbedUnimplementedSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSettingsServiceServer", reflect.TypeOf((*MockUnsafeSettingsServiceServer)(nil).mustEmbedUnimplementedSettingsServiceServer))
}
