// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/device/v1/device_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/device/v1/device_grpc.pb.go -package=devicev1_mocks -destination=/home/j/code/antinvestor/apis/go/device/v1_mocks/device_grpc_mock.go
//

// Package devicev1_mocks is a generated GoMock package.
package devicev1_mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/antinvestor/apis/go/device/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDeviceServiceClient is a mock of DeviceServiceClient interface.
type MockDeviceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceClientMockRecorder
	isgomock struct{}
}

// MockDeviceServiceClientMockRecorder is the mock recorder for MockDeviceServiceClient.
type MockDeviceServiceClientMockRecorder struct {
	mock *MockDeviceServiceClient
}

// NewMockDeviceServiceClient creates a new mock instance.
func NewMockDeviceServiceClient(ctrl *gomock.Controller) *MockDeviceServiceClient {
	mock := &MockDeviceServiceClient{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceServiceClient) EXPECT() *MockDeviceServiceClientMockRecorder {
	return m.recorder
}

// AddKey mocks base method.
func (m *MockDeviceServiceClient) AddKey(ctx context.Context, in *v1.AddKeyRequest, opts ...grpc.CallOption) (*v1.AddKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddKey", varargs...)
	ret0, _ := ret[0].(*v1.AddKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKey indicates an expected call of AddKey.
func (mr *MockDeviceServiceClientMockRecorder) AddKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKey", reflect.TypeOf((*MockDeviceServiceClient)(nil).AddKey), varargs...)
}

// Create mocks base method.
func (m *MockDeviceServiceClient) Create(ctx context.Context, in *v1.CreateRequest, opts ...grpc.CallOption) (*v1.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDeviceServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeviceServiceClient)(nil).Create), varargs...)
}

// GetById mocks base method.
func (m *MockDeviceServiceClient) GetById(ctx context.Context, in *v1.GetByIdRequest, opts ...grpc.CallOption) (*v1.GetByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetById", varargs...)
	ret0, _ := ret[0].(*v1.GetByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDeviceServiceClientMockRecorder) GetById(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDeviceServiceClient)(nil).GetById), varargs...)
}

// GetBySessionId mocks base method.
func (m *MockDeviceServiceClient) GetBySessionId(ctx context.Context, in *v1.GetBySessionIdRequest, opts ...grpc.CallOption) (*v1.GetBySessionIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBySessionId", varargs...)
	ret0, _ := ret[0].(*v1.GetBySessionIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySessionId indicates an expected call of GetBySessionId.
func (mr *MockDeviceServiceClientMockRecorder) GetBySessionId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySessionId", reflect.TypeOf((*MockDeviceServiceClient)(nil).GetBySessionId), varargs...)
}

// Link mocks base method.
func (m *MockDeviceServiceClient) Link(ctx context.Context, in *v1.LinkRequest, opts ...grpc.CallOption) (*v1.LinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Link", varargs...)
	ret0, _ := ret[0].(*v1.LinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Link indicates an expected call of Link.
func (mr *MockDeviceServiceClientMockRecorder) Link(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockDeviceServiceClient)(nil).Link), varargs...)
}

// ListLogs mocks base method.
func (m *MockDeviceServiceClient) ListLogs(ctx context.Context, in *v1.ListLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.ListLogsResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLogs", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v1.ListLogsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockDeviceServiceClientMockRecorder) ListLogs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockDeviceServiceClient)(nil).ListLogs), varargs...)
}

// Log mocks base method.
func (m *MockDeviceServiceClient) Log(ctx context.Context, in *v1.LogRequest, opts ...grpc.CallOption) (*v1.LogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Log", varargs...)
	ret0, _ := ret[0].(*v1.LogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Log indicates an expected call of Log.
func (mr *MockDeviceServiceClientMockRecorder) Log(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockDeviceServiceClient)(nil).Log), varargs...)
}

// Remove mocks base method.
func (m *MockDeviceServiceClient) Remove(ctx context.Context, in *v1.RemoveRequest, opts ...grpc.CallOption) (*v1.RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remove", varargs...)
	ret0, _ := ret[0].(*v1.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockDeviceServiceClientMockRecorder) Remove(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDeviceServiceClient)(nil).Remove), varargs...)
}

// RemoveKey mocks base method.
func (m *MockDeviceServiceClient) RemoveKey(ctx context.Context, in *v1.RemoveKeyRequest, opts ...grpc.CallOption) (*v1.RemoveKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveKey", varargs...)
	ret0, _ := ret[0].(*v1.RemoveKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKey indicates an expected call of RemoveKey.
func (mr *MockDeviceServiceClientMockRecorder) RemoveKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKey", reflect.TypeOf((*MockDeviceServiceClient)(nil).RemoveKey), varargs...)
}

// Search mocks base method.
func (m *MockDeviceServiceClient) Search(ctx context.Context, in *v1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.SearchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v1.SearchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDeviceServiceClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDeviceServiceClient)(nil).Search), varargs...)
}

// SearchKey mocks base method.
func (m *MockDeviceServiceClient) SearchKey(ctx context.Context, in *v1.SearchKeyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.SearchKeyResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchKey", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v1.SearchKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchKey indicates an expected call of SearchKey.
func (mr *MockDeviceServiceClientMockRecorder) SearchKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchKey", reflect.TypeOf((*MockDeviceServiceClient)(nil).SearchKey), varargs...)
}

// Update mocks base method.
func (m *MockDeviceServiceClient) Update(ctx context.Context, in *v1.UpdateRequest, opts ...grpc.CallOption) (*v1.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeviceServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceServiceClient)(nil).Update), varargs...)
}

// MockDeviceServiceServer is a mock of DeviceServiceServer interface.
type MockDeviceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceServerMockRecorder
	isgomock struct{}
}

// MockDeviceServiceServerMockRecorder is the mock recorder for MockDeviceServiceServer.
type MockDeviceServiceServerMockRecorder struct {
	mock *MockDeviceServiceServer
}

// NewMockDeviceServiceServer creates a new mock instance.
func NewMockDeviceServiceServer(ctrl *gomock.Controller) *MockDeviceServiceServer {
	mock := &MockDeviceServiceServer{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceServiceServer) EXPECT() *MockDeviceServiceServerMockRecorder {
	return m.recorder
}

// AddKey mocks base method.
func (m *MockDeviceServiceServer) AddKey(arg0 context.Context, arg1 *v1.AddKeyRequest) (*v1.AddKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKey", arg0, arg1)
	ret0, _ := ret[0].(*v1.AddKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKey indicates an expected call of AddKey.
func (mr *MockDeviceServiceServerMockRecorder) AddKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKey", reflect.TypeOf((*MockDeviceServiceServer)(nil).AddKey), arg0, arg1)
}

// Create mocks base method.
func (m *MockDeviceServiceServer) Create(arg0 context.Context, arg1 *v1.CreateRequest) (*v1.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDeviceServiceServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeviceServiceServer)(nil).Create), arg0, arg1)
}

// GetById mocks base method.
func (m *MockDeviceServiceServer) GetById(arg0 context.Context, arg1 *v1.GetByIdRequest) (*v1.GetByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDeviceServiceServerMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDeviceServiceServer)(nil).GetById), arg0, arg1)
}

// GetBySessionId mocks base method.
func (m *MockDeviceServiceServer) GetBySessionId(arg0 context.Context, arg1 *v1.GetBySessionIdRequest) (*v1.GetBySessionIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySessionId", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetBySessionIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySessionId indicates an expected call of GetBySessionId.
func (mr *MockDeviceServiceServerMockRecorder) GetBySessionId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySessionId", reflect.TypeOf((*MockDeviceServiceServer)(nil).GetBySessionId), arg0, arg1)
}

// Link mocks base method.
func (m *MockDeviceServiceServer) Link(arg0 context.Context, arg1 *v1.LinkRequest) (*v1.LinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", arg0, arg1)
	ret0, _ := ret[0].(*v1.LinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Link indicates an expected call of Link.
func (mr *MockDeviceServiceServerMockRecorder) Link(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockDeviceServiceServer)(nil).Link), arg0, arg1)
}

// ListLogs mocks base method.
func (m *MockDeviceServiceServer) ListLogs(arg0 *v1.ListLogsRequest, arg1 grpc.ServerStreamingServer[v1.ListLogsResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockDeviceServiceServerMockRecorder) ListLogs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockDeviceServiceServer)(nil).ListLogs), arg0, arg1)
}

// Log mocks base method.
func (m *MockDeviceServiceServer) Log(arg0 context.Context, arg1 *v1.LogRequest) (*v1.LogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0, arg1)
	ret0, _ := ret[0].(*v1.LogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Log indicates an expected call of Log.
func (mr *MockDeviceServiceServerMockRecorder) Log(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockDeviceServiceServer)(nil).Log), arg0, arg1)
}

// Remove mocks base method.
func (m *MockDeviceServiceServer) Remove(arg0 context.Context, arg1 *v1.RemoveRequest) (*v1.RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(*v1.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockDeviceServiceServerMockRecorder) Remove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDeviceServiceServer)(nil).Remove), arg0, arg1)
}

// RemoveKey mocks base method.
func (m *MockDeviceServiceServer) RemoveKey(arg0 context.Context, arg1 *v1.RemoveKeyRequest) (*v1.RemoveKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKey", arg0, arg1)
	ret0, _ := ret[0].(*v1.RemoveKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKey indicates an expected call of RemoveKey.
func (mr *MockDeviceServiceServerMockRecorder) RemoveKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKey", reflect.TypeOf((*MockDeviceServiceServer)(nil).RemoveKey), arg0, arg1)
}

// Search mocks base method.
func (m *MockDeviceServiceServer) Search(arg0 *v1.SearchRequest, arg1 grpc.ServerStreamingServer[v1.SearchResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockDeviceServiceServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDeviceServiceServer)(nil).Search), arg0, arg1)
}

// SearchKey mocks base method.
func (m *MockDeviceServiceServer) SearchKey(arg0 *v1.SearchKeyRequest, arg1 grpc.ServerStreamingServer[v1.SearchKeyResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchKey indicates an expected call of SearchKey.
func (mr *MockDeviceServiceServerMockRecorder) SearchKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchKey", reflect.TypeOf((*MockDeviceServiceServer)(nil).SearchKey), arg0, arg1)
}

// Update mocks base method.
func (m *MockDeviceServiceServer) Update(arg0 context.Context, arg1 *v1.UpdateRequest) (*v1.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeviceServiceServerMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedDeviceServiceServer mocks base method.
func (m *MockDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDeviceServiceServer")
}

// mustEmbedUnimplementedDeviceServiceServer indicates an expected call of mustEmbedUnimplementedDeviceServiceServer.
func (mr *MockDeviceServiceServerMockRecorder) mustEmbedUnimplementedDeviceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDeviceServiceServer", reflect.TypeOf((*MockDeviceServiceServer)(nil).mustEmbedUnimplementedDeviceServiceServer))
}

// MockUnsafeDeviceServiceServer is a mock of UnsafeDeviceServiceServer interface.
type MockUnsafeDeviceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDeviceServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeDeviceServiceServerMockRecorder is the mock recorder for MockUnsafeDeviceServiceServer.
type MockUnsafeDeviceServiceServerMockRecorder struct {
	mock *MockUnsafeDeviceServiceServer
}

// NewMockUnsafeDeviceServiceServer creates a new mock instance.
func NewMockUnsafeDeviceServiceServer(ctrl *gomock.Controller) *MockUnsafeDeviceServiceServer {
	mock := &MockUnsafeDeviceServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDeviceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDeviceServiceServer) EXPECT() *MockUnsafeDeviceServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDeviceServiceServer mocks base method.
func (m *MockUnsafeDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDeviceServiceServer")
}

// mustEmbedUnimplementedDeviceServiceServer indicates an expected call of mustEmbedUnimplementedDeviceServiceServer.
func (mr *MockUnsafeDeviceServiceServerMockRecorder) mustEmbedUnimplementedDeviceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDeviceServiceServer", reflect.TypeOf((*MockUnsafeDeviceServiceServer)(nil).mustEmbedUnimplementedDeviceServiceServer))
}
