// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: device/v1/device.proto

package devicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/antinvestor/apis/go/device/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeviceServiceName is the fully-qualified name of the DeviceService service.
	DeviceServiceName = "device.v1.DeviceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeviceServiceGetByIdProcedure is the fully-qualified name of the DeviceService's GetById RPC.
	DeviceServiceGetByIdProcedure = "/device.v1.DeviceService/GetById"
	// DeviceServiceGetBySessionIdProcedure is the fully-qualified name of the DeviceService's
	// GetBySessionId RPC.
	DeviceServiceGetBySessionIdProcedure = "/device.v1.DeviceService/GetBySessionId"
	// DeviceServiceSearchProcedure is the fully-qualified name of the DeviceService's Search RPC.
	DeviceServiceSearchProcedure = "/device.v1.DeviceService/Search"
	// DeviceServiceCreateProcedure is the fully-qualified name of the DeviceService's Create RPC.
	DeviceServiceCreateProcedure = "/device.v1.DeviceService/Create"
	// DeviceServiceUpdateProcedure is the fully-qualified name of the DeviceService's Update RPC.
	DeviceServiceUpdateProcedure = "/device.v1.DeviceService/Update"
	// DeviceServiceLinkProcedure is the fully-qualified name of the DeviceService's Link RPC.
	DeviceServiceLinkProcedure = "/device.v1.DeviceService/Link"
	// DeviceServiceRemoveProcedure is the fully-qualified name of the DeviceService's Remove RPC.
	DeviceServiceRemoveProcedure = "/device.v1.DeviceService/Remove"
	// DeviceServiceLogProcedure is the fully-qualified name of the DeviceService's Log RPC.
	DeviceServiceLogProcedure = "/device.v1.DeviceService/Log"
	// DeviceServiceListLogsProcedure is the fully-qualified name of the DeviceService's ListLogs RPC.
	DeviceServiceListLogsProcedure = "/device.v1.DeviceService/ListLogs"
	// DeviceServiceAddKeyProcedure is the fully-qualified name of the DeviceService's AddKey RPC.
	DeviceServiceAddKeyProcedure = "/device.v1.DeviceService/AddKey"
	// DeviceServiceRemoveKeyProcedure is the fully-qualified name of the DeviceService's RemoveKey RPC.
	DeviceServiceRemoveKeyProcedure = "/device.v1.DeviceService/RemoveKey"
	// DeviceServiceSearchKeyProcedure is the fully-qualified name of the DeviceService's SearchKey RPC.
	DeviceServiceSearchKeyProcedure = "/device.v1.DeviceService/SearchKey"
)

// DeviceServiceClient is a client for the device.v1.DeviceService service.
type DeviceServiceClient interface {
	// GetById retrieves one or more devices by their unique identifiers.
	// Supports batch retrieval for efficiency.
	GetById(context.Context, *connect.Request[v1.GetByIdRequest]) (*connect.Response[v1.GetByIdResponse], error)
	// GetBySessionId retrieves a device by its active session identifier.
	// Useful for resolving devices from session tokens.
	GetBySessionId(context.Context, *connect.Request[v1.GetBySessionIdRequest]) (*connect.Response[v1.GetBySessionIdResponse], error)
	// Search finds devices matching specified criteria.
	// Supports filtering by date range, properties, and full-text search.
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error)
	// Create registers a new device in the system.
	// Returns a unique device ID that should be stored by the client.
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Update modifies an existing device's information.
	// Only the device owner or administrators can update device information.
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	// Link associates a device with a user profile.
	// Required before the device can be used for authenticated operations.
	Link(context.Context, *connect.Request[v1.LinkRequest]) (*connect.Response[v1.LinkResponse], error)
	// Remove deletes a device from the system.
	// This operation cannot be undone.
	Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error)
	// Log creates a new activity log entry for a device.
	// Used for session tracking and security auditing.
	Log(context.Context, *connect.Request[v1.LogRequest]) (*connect.Response[v1.LogResponse], error)
	// ListLogs retrieves activity logs for a device.
	// Returns a stream of log entries for the specified device.
	ListLogs(context.Context, *connect.Request[v1.ListLogsRequest]) (*connect.ServerStreamForClient[v1.ListLogsResponse], error)
	// AddKey adds an encryption key to a device.
	// Keys are used for secure communications (Matrix E2EE, push notifications).
	AddKey(context.Context, *connect.Request[v1.AddKeyRequest]) (*connect.Response[v1.AddKeyResponse], error)
	// RemoveKey removes encryption keys from a device.
	// Used for key rotation or when removing a device.
	RemoveKey(context.Context, *connect.Request[v1.RemoveKeyRequest]) (*connect.Response[v1.RemoveKeyResponse], error)
	// SearchKey finds encryption keys associated with a device.
	// Supports filtering by key type and pagination.
	SearchKey(context.Context, *connect.Request[v1.SearchKeyRequest]) (*connect.ServerStreamForClient[v1.SearchKeyResponse], error)
}

// NewDeviceServiceClient constructs a client for the device.v1.DeviceService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeviceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeviceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deviceServiceMethods := v1.File_device_v1_device_proto.Services().ByName("DeviceService").Methods()
	return &deviceServiceClient{
		getById: connect.NewClient[v1.GetByIdRequest, v1.GetByIdResponse](
			httpClient,
			baseURL+DeviceServiceGetByIdProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("GetById")),
			connect.WithClientOptions(opts...),
		),
		getBySessionId: connect.NewClient[v1.GetBySessionIdRequest, v1.GetBySessionIdResponse](
			httpClient,
			baseURL+DeviceServiceGetBySessionIdProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("GetBySessionId")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+DeviceServiceSearchProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+DeviceServiceCreateProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+DeviceServiceUpdateProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		link: connect.NewClient[v1.LinkRequest, v1.LinkResponse](
			httpClient,
			baseURL+DeviceServiceLinkProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("Link")),
			connect.WithClientOptions(opts...),
		),
		remove: connect.NewClient[v1.RemoveRequest, v1.RemoveResponse](
			httpClient,
			baseURL+DeviceServiceRemoveProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("Remove")),
			connect.WithClientOptions(opts...),
		),
		log: connect.NewClient[v1.LogRequest, v1.LogResponse](
			httpClient,
			baseURL+DeviceServiceLogProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("Log")),
			connect.WithClientOptions(opts...),
		),
		listLogs: connect.NewClient[v1.ListLogsRequest, v1.ListLogsResponse](
			httpClient,
			baseURL+DeviceServiceListLogsProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("ListLogs")),
			connect.WithClientOptions(opts...),
		),
		addKey: connect.NewClient[v1.AddKeyRequest, v1.AddKeyResponse](
			httpClient,
			baseURL+DeviceServiceAddKeyProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("AddKey")),
			connect.WithClientOptions(opts...),
		),
		removeKey: connect.NewClient[v1.RemoveKeyRequest, v1.RemoveKeyResponse](
			httpClient,
			baseURL+DeviceServiceRemoveKeyProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("RemoveKey")),
			connect.WithClientOptions(opts...),
		),
		searchKey: connect.NewClient[v1.SearchKeyRequest, v1.SearchKeyResponse](
			httpClient,
			baseURL+DeviceServiceSearchKeyProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("SearchKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deviceServiceClient implements DeviceServiceClient.
type deviceServiceClient struct {
	getById        *connect.Client[v1.GetByIdRequest, v1.GetByIdResponse]
	getBySessionId *connect.Client[v1.GetBySessionIdRequest, v1.GetBySessionIdResponse]
	search         *connect.Client[v1.SearchRequest, v1.SearchResponse]
	create         *connect.Client[v1.CreateRequest, v1.CreateResponse]
	update         *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	link           *connect.Client[v1.LinkRequest, v1.LinkResponse]
	remove         *connect.Client[v1.RemoveRequest, v1.RemoveResponse]
	log            *connect.Client[v1.LogRequest, v1.LogResponse]
	listLogs       *connect.Client[v1.ListLogsRequest, v1.ListLogsResponse]
	addKey         *connect.Client[v1.AddKeyRequest, v1.AddKeyResponse]
	removeKey      *connect.Client[v1.RemoveKeyRequest, v1.RemoveKeyResponse]
	searchKey      *connect.Client[v1.SearchKeyRequest, v1.SearchKeyResponse]
}

// GetById calls device.v1.DeviceService.GetById.
func (c *deviceServiceClient) GetById(ctx context.Context, req *connect.Request[v1.GetByIdRequest]) (*connect.Response[v1.GetByIdResponse], error) {
	return c.getById.CallUnary(ctx, req)
}

// GetBySessionId calls device.v1.DeviceService.GetBySessionId.
func (c *deviceServiceClient) GetBySessionId(ctx context.Context, req *connect.Request[v1.GetBySessionIdRequest]) (*connect.Response[v1.GetBySessionIdResponse], error) {
	return c.getBySessionId.CallUnary(ctx, req)
}

// Search calls device.v1.DeviceService.Search.
func (c *deviceServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error) {
	return c.search.CallServerStream(ctx, req)
}

// Create calls device.v1.DeviceService.Create.
func (c *deviceServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls device.v1.DeviceService.Update.
func (c *deviceServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Link calls device.v1.DeviceService.Link.
func (c *deviceServiceClient) Link(ctx context.Context, req *connect.Request[v1.LinkRequest]) (*connect.Response[v1.LinkResponse], error) {
	return c.link.CallUnary(ctx, req)
}

// Remove calls device.v1.DeviceService.Remove.
func (c *deviceServiceClient) Remove(ctx context.Context, req *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// Log calls device.v1.DeviceService.Log.
func (c *deviceServiceClient) Log(ctx context.Context, req *connect.Request[v1.LogRequest]) (*connect.Response[v1.LogResponse], error) {
	return c.log.CallUnary(ctx, req)
}

// ListLogs calls device.v1.DeviceService.ListLogs.
func (c *deviceServiceClient) ListLogs(ctx context.Context, req *connect.Request[v1.ListLogsRequest]) (*connect.ServerStreamForClient[v1.ListLogsResponse], error) {
	return c.listLogs.CallServerStream(ctx, req)
}

// AddKey calls device.v1.DeviceService.AddKey.
func (c *deviceServiceClient) AddKey(ctx context.Context, req *connect.Request[v1.AddKeyRequest]) (*connect.Response[v1.AddKeyResponse], error) {
	return c.addKey.CallUnary(ctx, req)
}

// RemoveKey calls device.v1.DeviceService.RemoveKey.
func (c *deviceServiceClient) RemoveKey(ctx context.Context, req *connect.Request[v1.RemoveKeyRequest]) (*connect.Response[v1.RemoveKeyResponse], error) {
	return c.removeKey.CallUnary(ctx, req)
}

// SearchKey calls device.v1.DeviceService.SearchKey.
func (c *deviceServiceClient) SearchKey(ctx context.Context, req *connect.Request[v1.SearchKeyRequest]) (*connect.ServerStreamForClient[v1.SearchKeyResponse], error) {
	return c.searchKey.CallServerStream(ctx, req)
}

// DeviceServiceHandler is an implementation of the device.v1.DeviceService service.
type DeviceServiceHandler interface {
	// GetById retrieves one or more devices by their unique identifiers.
	// Supports batch retrieval for efficiency.
	GetById(context.Context, *connect.Request[v1.GetByIdRequest]) (*connect.Response[v1.GetByIdResponse], error)
	// GetBySessionId retrieves a device by its active session identifier.
	// Useful for resolving devices from session tokens.
	GetBySessionId(context.Context, *connect.Request[v1.GetBySessionIdRequest]) (*connect.Response[v1.GetBySessionIdResponse], error)
	// Search finds devices matching specified criteria.
	// Supports filtering by date range, properties, and full-text search.
	Search(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error
	// Create registers a new device in the system.
	// Returns a unique device ID that should be stored by the client.
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Update modifies an existing device's information.
	// Only the device owner or administrators can update device information.
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	// Link associates a device with a user profile.
	// Required before the device can be used for authenticated operations.
	Link(context.Context, *connect.Request[v1.LinkRequest]) (*connect.Response[v1.LinkResponse], error)
	// Remove deletes a device from the system.
	// This operation cannot be undone.
	Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error)
	// Log creates a new activity log entry for a device.
	// Used for session tracking and security auditing.
	Log(context.Context, *connect.Request[v1.LogRequest]) (*connect.Response[v1.LogResponse], error)
	// ListLogs retrieves activity logs for a device.
	// Returns a stream of log entries for the specified device.
	ListLogs(context.Context, *connect.Request[v1.ListLogsRequest], *connect.ServerStream[v1.ListLogsResponse]) error
	// AddKey adds an encryption key to a device.
	// Keys are used for secure communications (Matrix E2EE, push notifications).
	AddKey(context.Context, *connect.Request[v1.AddKeyRequest]) (*connect.Response[v1.AddKeyResponse], error)
	// RemoveKey removes encryption keys from a device.
	// Used for key rotation or when removing a device.
	RemoveKey(context.Context, *connect.Request[v1.RemoveKeyRequest]) (*connect.Response[v1.RemoveKeyResponse], error)
	// SearchKey finds encryption keys associated with a device.
	// Supports filtering by key type and pagination.
	SearchKey(context.Context, *connect.Request[v1.SearchKeyRequest], *connect.ServerStream[v1.SearchKeyResponse]) error
}

// NewDeviceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeviceServiceHandler(svc DeviceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deviceServiceMethods := v1.File_device_v1_device_proto.Services().ByName("DeviceService").Methods()
	deviceServiceGetByIdHandler := connect.NewUnaryHandler(
		DeviceServiceGetByIdProcedure,
		svc.GetById,
		connect.WithSchema(deviceServiceMethods.ByName("GetById")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceGetBySessionIdHandler := connect.NewUnaryHandler(
		DeviceServiceGetBySessionIdProcedure,
		svc.GetBySessionId,
		connect.WithSchema(deviceServiceMethods.ByName("GetBySessionId")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceSearchHandler := connect.NewServerStreamHandler(
		DeviceServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(deviceServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceCreateHandler := connect.NewUnaryHandler(
		DeviceServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(deviceServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceUpdateHandler := connect.NewUnaryHandler(
		DeviceServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(deviceServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceLinkHandler := connect.NewUnaryHandler(
		DeviceServiceLinkProcedure,
		svc.Link,
		connect.WithSchema(deviceServiceMethods.ByName("Link")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceRemoveHandler := connect.NewUnaryHandler(
		DeviceServiceRemoveProcedure,
		svc.Remove,
		connect.WithSchema(deviceServiceMethods.ByName("Remove")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceLogHandler := connect.NewUnaryHandler(
		DeviceServiceLogProcedure,
		svc.Log,
		connect.WithSchema(deviceServiceMethods.ByName("Log")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceListLogsHandler := connect.NewServerStreamHandler(
		DeviceServiceListLogsProcedure,
		svc.ListLogs,
		connect.WithSchema(deviceServiceMethods.ByName("ListLogs")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceAddKeyHandler := connect.NewUnaryHandler(
		DeviceServiceAddKeyProcedure,
		svc.AddKey,
		connect.WithSchema(deviceServiceMethods.ByName("AddKey")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceRemoveKeyHandler := connect.NewUnaryHandler(
		DeviceServiceRemoveKeyProcedure,
		svc.RemoveKey,
		connect.WithSchema(deviceServiceMethods.ByName("RemoveKey")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceSearchKeyHandler := connect.NewServerStreamHandler(
		DeviceServiceSearchKeyProcedure,
		svc.SearchKey,
		connect.WithSchema(deviceServiceMethods.ByName("SearchKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/device.v1.DeviceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeviceServiceGetByIdProcedure:
			deviceServiceGetByIdHandler.ServeHTTP(w, r)
		case DeviceServiceGetBySessionIdProcedure:
			deviceServiceGetBySessionIdHandler.ServeHTTP(w, r)
		case DeviceServiceSearchProcedure:
			deviceServiceSearchHandler.ServeHTTP(w, r)
		case DeviceServiceCreateProcedure:
			deviceServiceCreateHandler.ServeHTTP(w, r)
		case DeviceServiceUpdateProcedure:
			deviceServiceUpdateHandler.ServeHTTP(w, r)
		case DeviceServiceLinkProcedure:
			deviceServiceLinkHandler.ServeHTTP(w, r)
		case DeviceServiceRemoveProcedure:
			deviceServiceRemoveHandler.ServeHTTP(w, r)
		case DeviceServiceLogProcedure:
			deviceServiceLogHandler.ServeHTTP(w, r)
		case DeviceServiceListLogsProcedure:
			deviceServiceListLogsHandler.ServeHTTP(w, r)
		case DeviceServiceAddKeyProcedure:
			deviceServiceAddKeyHandler.ServeHTTP(w, r)
		case DeviceServiceRemoveKeyProcedure:
			deviceServiceRemoveKeyHandler.ServeHTTP(w, r)
		case DeviceServiceSearchKeyProcedure:
			deviceServiceSearchKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeviceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeviceServiceHandler struct{}

func (UnimplementedDeviceServiceHandler) GetById(context.Context, *connect.Request[v1.GetByIdRequest]) (*connect.Response[v1.GetByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.GetById is not implemented"))
}

func (UnimplementedDeviceServiceHandler) GetBySessionId(context.Context, *connect.Request[v1.GetBySessionIdRequest]) (*connect.Response[v1.GetBySessionIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.GetBySessionId is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.Search is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.Create is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.Update is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Link(context.Context, *connect.Request[v1.LinkRequest]) (*connect.Response[v1.LinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.Link is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.Remove is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Log(context.Context, *connect.Request[v1.LogRequest]) (*connect.Response[v1.LogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.Log is not implemented"))
}

func (UnimplementedDeviceServiceHandler) ListLogs(context.Context, *connect.Request[v1.ListLogsRequest], *connect.ServerStream[v1.ListLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.ListLogs is not implemented"))
}

func (UnimplementedDeviceServiceHandler) AddKey(context.Context, *connect.Request[v1.AddKeyRequest]) (*connect.Response[v1.AddKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.AddKey is not implemented"))
}

func (UnimplementedDeviceServiceHandler) RemoveKey(context.Context, *connect.Request[v1.RemoveKeyRequest]) (*connect.Response[v1.RemoveKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.RemoveKey is not implemented"))
}

func (UnimplementedDeviceServiceHandler) SearchKey(context.Context, *connect.Request[v1.SearchKeyRequest], *connect.ServerStream[v1.SearchKeyResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("device.v1.DeviceService.SearchKey is not implemented"))
}
