// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: device/v1/device.proto

package devicev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/google/gnostic/openapiv3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyType defines the types of encryption keys that can be stored for a device.
// Different key types serve different purposes in the security infrastructure.
// buf:lint:ignore ENUM_VALUE_PREFIX
type KeyType int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	KeyType_MATRIX_KEY       KeyType = 0 // Encryption key for Matrix protocol end-to-end encryption
	KeyType_NOTIFICATION_KEY KeyType = 1 // Key for secure push notification delivery
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "MATRIX_KEY",
		1: "NOTIFICATION_KEY",
	}
	KeyType_value = map[string]int32{
		"MATRIX_KEY":       0,
		"NOTIFICATION_KEY": 1,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_device_v1_device_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_device_v1_device_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{0}
}

// Locale represents the localization settings for a device.
// Used to provide localized content and format data appropriately for the user.
type Locale struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      []string               `protobuf:"bytes,1,rep,name=language,proto3" json:"language,omitempty"`                             // Preferred languages in priority order (e.g., ["en-US", "en"])
	Timezone      string                 `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`                             // IANA timezone identifier (e.g., "America/New_York")
	UtcOffset     string                 `protobuf:"bytes,6,opt,name=utc_offset,json=utcOffset,proto3" json:"utc_offset,omitempty"`          // UTC offset in format "+HH:MM" or "-HH:MM"
	Currency      string                 `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`                             // ISO 4217 currency code (e.g., "USD", "EUR")
	CurrencyName  string                 `protobuf:"bytes,9,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"` // Human-readable currency name
	Code          string                 `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`                                    // ISO 3166-1 alpha-2 country code (e.g., "US", "GB")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Locale) Reset() {
	*x = Locale{}
	mi := &file_device_v1_device_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Locale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locale) ProtoMessage() {}

func (x *Locale) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locale.ProtoReflect.Descriptor instead.
func (*Locale) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{0}
}

func (x *Locale) GetLanguage() []string {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Locale) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Locale) GetUtcOffset() string {
	if x != nil {
		return x.UtcOffset
	}
	return ""
}

func (x *Locale) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Locale) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *Locale) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// KeyObject represents an encryption key associated with a device.
// Keys are used for secure communications and must be properly managed.
type KeyObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // Unique identifier for the key
	DeviceId      string                 `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // Device this key belongs to
	Key           []byte                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`                           // The actual encryption key material (encrypted at rest)
	Extra         *structpb.Struct       `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`                       // Additional key metadata (algorithm, expiry, etc.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyObject) Reset() {
	*x = KeyObject{}
	mi := &file_device_v1_device_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyObject) ProtoMessage() {}

func (x *KeyObject) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyObject.ProtoReflect.Descriptor instead.
func (*KeyObject) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{1}
}

func (x *KeyObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyObject) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *KeyObject) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyObject) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

// DeviceLog represents an activity log entry for a device.
// Logs track device sessions, locations, and activity for security auditing.
type DeviceLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // Unique identifier for this log entry
	DeviceId      string                 `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`    // Device this log entry belongs to
	SessionId     string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Session identifier for this activity
	Ip            string                 `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`                                // IP address of the device during this session
	Locale        *Locale                `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`                        // Locale settings during this session
	UserAgent     string                 `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"` // User agent string (browser/app info)
	Os            string                 `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`                                // Operating system and version
	LastSeen      string                 `protobuf:"bytes,8,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`    // Last activity timestamp (RFC3339)
	Location      *structpb.Struct       `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`                    // Geographic location data (lat/long, city, country)
	Extra         *structpb.Struct       `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`                         // Additional log metadata
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceLog) Reset() {
	*x = DeviceLog{}
	mi := &file_device_v1_device_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceLog) ProtoMessage() {}

func (x *DeviceLog) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceLog.ProtoReflect.Descriptor instead.
func (*DeviceLog) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceLog) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceLog) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeviceLog) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceLog) GetLocale() *Locale {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *DeviceLog) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *DeviceLog) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *DeviceLog) GetLastSeen() string {
	if x != nil {
		return x.LastSeen
	}
	return ""
}

func (x *DeviceLog) GetLocation() *structpb.Struct {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DeviceLog) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

// DeviceObject represents a registered device in the system.
// Devices must be registered and linked to a profile before use.
type DeviceObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // Unique identifier for the device
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            // User-friendly device name (e.g., "John's iPhone")
	SessionId     string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Current active session identifier
	Ip            string                 `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`                                // Last known IP address
	UserAgent     string                 `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"` // User agent string
	Os            string                 `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`                                // Operating system and version
	LastSeen      string                 `protobuf:"bytes,7,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`    // Last activity timestamp (RFC3339)
	ProfileId     string                 `protobuf:"bytes,8,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"` // Profile this device is linked to
	Locale        *Locale                `protobuf:"bytes,9,opt,name=locale,proto3" json:"locale,omitempty"`                        // Device locale settings
	Location      *structpb.Struct       `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`                   // Last known geographic location
	Properties    *structpb.Struct       `protobuf:"bytes,15,opt,name=properties,proto3" json:"properties,omitempty"`               // Additional device properties (model, manufacturer, etc.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceObject) Reset() {
	*x = DeviceObject{}
	mi := &file_device_v1_device_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceObject) ProtoMessage() {}

func (x *DeviceObject) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceObject.ProtoReflect.Descriptor instead.
func (*DeviceObject) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceObject) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeviceObject) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceObject) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *DeviceObject) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *DeviceObject) GetLastSeen() string {
	if x != nil {
		return x.LastSeen
	}
	return ""
}

func (x *DeviceObject) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *DeviceObject) GetLocale() *Locale {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *DeviceObject) GetLocation() *structpb.Struct {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DeviceObject) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

// GetByIdRequest retrieves one or more devices by their unique identifiers.
type GetByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []string               `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`                // List of device IDs to retrieve
	Extensive     bool                   `protobuf:"varint,2,opt,name=extensive,proto3" json:"extensive,omitempty"` // If true, include additional details (logs, keys count, etc.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByIdRequest) Reset() {
	*x = GetByIdRequest{}
	mi := &file_device_v1_device_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIdRequest) ProtoMessage() {}

func (x *GetByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIdRequest.ProtoReflect.Descriptor instead.
func (*GetByIdRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{4}
}

func (x *GetByIdRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetByIdRequest) GetExtensive() bool {
	if x != nil {
		return x.Extensive
	}
	return false
}

// GetByIdResponse returns the requested devices.
type GetByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*DeviceObject        `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // List of devices matching the request
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByIdResponse) Reset() {
	*x = GetByIdResponse{}
	mi := &file_device_v1_device_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIdResponse) ProtoMessage() {}

func (x *GetByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIdResponse.ProtoReflect.Descriptor instead.
func (*GetByIdResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{5}
}

func (x *GetByIdResponse) GetData() []*DeviceObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetBySessionIdRequest retrieves a device by its active session identifier.
type GetBySessionIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Session ID to look up
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBySessionIdRequest) Reset() {
	*x = GetBySessionIdRequest{}
	mi := &file_device_v1_device_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBySessionIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBySessionIdRequest) ProtoMessage() {}

func (x *GetBySessionIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBySessionIdRequest.ProtoReflect.Descriptor instead.
func (*GetBySessionIdRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{6}
}

func (x *GetBySessionIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetBySessionIdResponse returns the device associated with the session.
type GetBySessionIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *DeviceObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // Device object for the session
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBySessionIdResponse) Reset() {
	*x = GetBySessionIdResponse{}
	mi := &file_device_v1_device_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBySessionIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBySessionIdResponse) ProtoMessage() {}

func (x *GetBySessionIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBySessionIdResponse.ProtoReflect.Descriptor instead.
func (*GetBySessionIdResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{7}
}

func (x *GetBySessionIdResponse) GetData() *DeviceObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// SearchRequest searches for devices matching specified criteria.
type SearchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`                          // Search query (device name, OS, etc.)
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                           // Page number for pagination
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                         // Number of results per page
	StartDate     string                 `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // Filter devices created after this date (RFC3339)
	EndDate       string                 `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // Filter devices created before this date (RFC3339)
	Properties    []string               `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty"`                // Specific properties to include in results
	Extras        *structpb.Struct       `protobuf:"bytes,7,opt,name=extras,proto3" json:"extras,omitempty"`                        // Additional search filters
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_device_v1_device_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{8}
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SearchRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SearchRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SearchRequest) GetExtras() *structpb.Struct {
	if x != nil {
		return x.Extras
	}
	return nil
}

// SearchResponse returns devices matching the search criteria.
type SearchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*DeviceObject        `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // List of matching devices
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_device_v1_device_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{9}
}

func (x *SearchResponse) GetData() []*DeviceObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// CreateRequest registers a new device in the system.
type CreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`             // User-friendly name for the device
	Properties    *structpb.Struct       `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"` // Device properties (model, manufacturer, OS version, etc.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	mi := &file_device_v1_device_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

// CreateResponse returns the newly created device.
type CreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *DeviceObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // The created device object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	mi := &file_device_v1_device_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{11}
}

func (x *CreateResponse) GetData() *DeviceObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateRequest updates an existing device's information.
type UpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // Device ID to update
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`             // New device name (if changing)
	Properties    *structpb.Struct       `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"` // Updated device properties
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	mi := &file_device_v1_device_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

// UpdateResponse returns the updated device.
type UpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *DeviceObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // The updated device object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	mi := &file_device_v1_device_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateResponse) GetData() *DeviceObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// LinkRequest links a device to a user profile.
// Devices must be linked before they can be used for authenticated operations.
type LinkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // Device ID to link
	ProfileId     string                 `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"` // Profile ID to link the device to
	Properties    *structpb.Struct       `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`                // Additional linking properties
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkRequest) Reset() {
	*x = LinkRequest{}
	mi := &file_device_v1_device_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkRequest) ProtoMessage() {}

func (x *LinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkRequest.ProtoReflect.Descriptor instead.
func (*LinkRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{14}
}

func (x *LinkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LinkRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *LinkRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

// LinkResponse returns the linked device.
type LinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *DeviceObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // The linked device object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkResponse) Reset() {
	*x = LinkResponse{}
	mi := &file_device_v1_device_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkResponse) ProtoMessage() {}

func (x *LinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkResponse.ProtoReflect.Descriptor instead.
func (*LinkResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{15}
}

func (x *LinkResponse) GetData() *DeviceObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// RemoveRequest removes a device from the system.
// This is typically used when a user logs out or removes a device from their account.
type RemoveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Device ID to remove
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	mi := &file_device_v1_device_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// RemoveResponse returns the removed device.
type RemoveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *DeviceObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // The removed device object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveResponse) Reset() {
	*x = RemoveResponse{}
	mi := &file_device_v1_device_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResponse) ProtoMessage() {}

func (x *RemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResponse.ProtoReflect.Descriptor instead.
func (*RemoveResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveResponse) GetData() *DeviceObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// LogRequest creates a new activity log entry for a device.
// Used for tracking device sessions and security auditing.
type LogRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`    // Device ID (optional if session_id is provided)
	SessionId     string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Session identifier for this activity
	Ip            string                 `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`                                // IP address of the device
	Locale        string                 `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`                        // Locale settings (JSON string)
	UserAgent     string                 `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"` // User agent string
	Os            string                 `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`                                // Operating system and version
	LastSeen      string                 `protobuf:"bytes,8,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`    // Timestamp of this activity (RFC3339)
	Extras        *structpb.Struct       `protobuf:"bytes,9,opt,name=extras,proto3" json:"extras,omitempty"`                        // Additional log data (location, app version, etc.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_device_v1_device_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{18}
}

func (x *LogRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *LogRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LogRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LogRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *LogRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *LogRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *LogRequest) GetLastSeen() string {
	if x != nil {
		return x.LastSeen
	}
	return ""
}

func (x *LogRequest) GetExtras() *structpb.Struct {
	if x != nil {
		return x.Extras
	}
	return nil
}

// LogResponse returns the created log entry.
type LogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *DeviceLog             `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // The created log entry
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_device_v1_device_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{19}
}

func (x *LogResponse) GetData() *DeviceLog {
	if x != nil {
		return x.Data
	}
	return nil
}

// ListLogsRequest retrieves activity logs for a device.
// Useful for security auditing and tracking device usage patterns.
type ListLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // Device ID to retrieve logs for
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`                      // Maximum number of log entries to return
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLogsRequest) Reset() {
	*x = ListLogsRequest{}
	mi := &file_device_v1_device_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsRequest) ProtoMessage() {}

func (x *ListLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsRequest.ProtoReflect.Descriptor instead.
func (*ListLogsRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{20}
}

func (x *ListLogsRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ListLogsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// ListLogsResponse returns device activity logs.
type ListLogsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*DeviceLog           `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // List of log entries
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLogsResponse) Reset() {
	*x = ListLogsResponse{}
	mi := &file_device_v1_device_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsResponse) ProtoMessage() {}

func (x *ListLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsResponse.ProtoReflect.Descriptor instead.
func (*ListLogsResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{21}
}

func (x *ListLogsResponse) GetData() []*DeviceLog {
	if x != nil {
		return x.Data
	}
	return nil
}

// AddKeyRequest adds an encryption key to a device.
// Keys are used for secure communications (Matrix E2EE, push notifications, etc.).
type AddKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                  // Unique identifier for the key
	DeviceId      string                 `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                      // Device this key belongs to
	KeyType       KeyType                `protobuf:"varint,3,opt,name=key_type,json=keyType,proto3,enum=device.v1.KeyType" json:"key_type,omitempty"` // Type of key (Matrix, Notification, etc.)
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                              // The key material (will be encrypted at rest)
	Extras        *structpb.Struct       `protobuf:"bytes,5,opt,name=extras,proto3" json:"extras,omitempty"`                                          // Additional key metadata (algorithm, expiry, etc.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddKeyRequest) Reset() {
	*x = AddKeyRequest{}
	mi := &file_device_v1_device_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyRequest) ProtoMessage() {}

func (x *AddKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyRequest.ProtoReflect.Descriptor instead.
func (*AddKeyRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{22}
}

func (x *AddKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddKeyRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AddKeyRequest) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_MATRIX_KEY
}

func (x *AddKeyRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AddKeyRequest) GetExtras() *structpb.Struct {
	if x != nil {
		return x.Extras
	}
	return nil
}

// AddKeyResponse returns the created key.
type AddKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *KeyObject             `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // The created key object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddKeyResponse) Reset() {
	*x = AddKeyResponse{}
	mi := &file_device_v1_device_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyResponse) ProtoMessage() {}

func (x *AddKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyResponse.ProtoReflect.Descriptor instead.
func (*AddKeyResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{23}
}

func (x *AddKeyResponse) GetData() *KeyObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// RemoveKeyRequest removes one or more encryption keys from a device.
// Used when rotating keys or removing a device.
type RemoveKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []string               `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"` // List of key IDs to remove
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveKeyRequest) Reset() {
	*x = RemoveKeyRequest{}
	mi := &file_device_v1_device_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveKeyRequest) ProtoMessage() {}

func (x *RemoveKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveKeyRequest.ProtoReflect.Descriptor instead.
func (*RemoveKeyRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{24}
}

func (x *RemoveKeyRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

// RemoveKeyResponse returns the IDs of removed keys.
type RemoveKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []string               `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"` // List of removed key IDs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveKeyResponse) Reset() {
	*x = RemoveKeyResponse{}
	mi := &file_device_v1_device_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveKeyResponse) ProtoMessage() {}

func (x *RemoveKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveKeyResponse.ProtoReflect.Descriptor instead.
func (*RemoveKeyResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{25}
}

func (x *RemoveKeyResponse) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

// SearchKeyRequest searches for encryption keys associated with a device.
type SearchKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`                                            // Search query (key ID pattern, etc.)
	DeviceId      string                 `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                      // Device ID to search keys for
	KeyType       KeyType                `protobuf:"varint,3,opt,name=key_type,json=keyType,proto3,enum=device.v1.KeyType" json:"key_type,omitempty"` // Filter by key type
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`                                             // Page number for pagination
	Count         int32                  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                           // Number of results per page
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchKeyRequest) Reset() {
	*x = SearchKeyRequest{}
	mi := &file_device_v1_device_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKeyRequest) ProtoMessage() {}

func (x *SearchKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKeyRequest.ProtoReflect.Descriptor instead.
func (*SearchKeyRequest) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{26}
}

func (x *SearchKeyRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchKeyRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SearchKeyRequest) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_MATRIX_KEY
}

func (x *SearchKeyRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchKeyRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// SearchKeyResponse returns matching encryption keys.
type SearchKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*KeyObject           `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // List of matching keys
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchKeyResponse) Reset() {
	*x = SearchKeyResponse{}
	mi := &file_device_v1_device_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKeyResponse) ProtoMessage() {}

func (x *SearchKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_v1_device_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKeyResponse.ProtoReflect.Descriptor instead.
func (*SearchKeyResponse) Descriptor() ([]byte, []int) {
	return file_device_v1_device_proto_rawDescGZIP(), []int{27}
}

func (x *SearchKeyResponse) GetData() []*KeyObject {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_device_v1_device_proto protoreflect.FileDescriptor

const file_device_v1_device_proto_rawDesc = "" +
	"\n" +
	"\x16device/v1/device.proto\x12\tdevice.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a$gnostic/openapi/v3/annotations.proto\"\xb4\x01\n" +
	"\x06Locale\x12\x1a\n" +
	"\blanguage\x18\x01 \x03(\tR\blanguage\x12\x1a\n" +
	"\btimezone\x18\x05 \x01(\tR\btimezone\x12\x1d\n" +
	"\n" +
	"utc_offset\x18\x06 \x01(\tR\tutcOffset\x12\x1a\n" +
	"\bcurrency\x18\b \x01(\tR\bcurrency\x12#\n" +
	"\rcurrency_name\x18\t \x01(\tR\fcurrencyName\x12\x12\n" +
	"\x04code\x18\n" +
	" \x01(\tR\x04code\"\xb3\x01\n" +
	"\tKeyObject\x12+\n" +
	"\x02id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\x128\n" +
	"\tdevice_id\x18\x02 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\bdeviceId\x12\x10\n" +
	"\x03key\x18\x03 \x01(\fR\x03key\x12-\n" +
	"\x05extra\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x05extra\"\xfc\x02\n" +
	"\tDeviceLog\x12+\n" +
	"\x02id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\x128\n" +
	"\tdevice_id\x18\x02 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\bdeviceId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x03 \x01(\tR\tsessionId\x12\x0e\n" +
	"\x02ip\x18\x04 \x01(\tR\x02ip\x12)\n" +
	"\x06locale\x18\x05 \x01(\v2\x11.device.v1.LocaleR\x06locale\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x06 \x01(\tR\tuserAgent\x12\x0e\n" +
	"\x02os\x18\a \x01(\tR\x02os\x12\x1b\n" +
	"\tlast_seen\x18\b \x01(\tR\blastSeen\x123\n" +
	"\blocation\x18\t \x01(\v2\x17.google.protobuf.StructR\blocation\x12-\n" +
	"\x05extra\x18\n" +
	" \x01(\v2\x17.google.protobuf.StructR\x05extra\"\x82\x03\n" +
	"\fDeviceObject\x12+\n" +
	"\x02id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"session_id\x18\x03 \x01(\tR\tsessionId\x12\x0e\n" +
	"\x02ip\x18\x04 \x01(\tR\x02ip\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x05 \x01(\tR\tuserAgent\x12\x0e\n" +
	"\x02os\x18\x06 \x01(\tR\x02os\x12\x1b\n" +
	"\tlast_seen\x18\a \x01(\tR\blastSeen\x12\x1d\n" +
	"\n" +
	"profile_id\x18\b \x01(\tR\tprofileId\x12)\n" +
	"\x06locale\x18\t \x01(\v2\x11.device.v1.LocaleR\x06locale\x123\n" +
	"\blocation\x18\v \x01(\v2\x17.google.protobuf.StructR\blocation\x127\n" +
	"\n" +
	"properties\x18\x0f \x01(\v2\x17.google.protobuf.StructR\n" +
	"properties\"`\n" +
	"\x0eGetByIdRequest\x120\n" +
	"\x02id\x18\x01 \x03(\tB \xbaH\x1d\x92\x01\x1a\"\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\x12\x1c\n" +
	"\textensive\x18\x02 \x01(\bR\textensive\">\n" +
	"\x0fGetByIdResponse\x12+\n" +
	"\x04data\x18\x01 \x03(\v2\x17.device.v1.DeviceObjectR\x04data\"D\n" +
	"\x15GetBySessionIdRequest\x12+\n" +
	"\x02id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\"E\n" +
	"\x16GetBySessionIdResponse\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.device.v1.DeviceObjectR\x04data\"\xda\x01\n" +
	"\rSearchRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x05R\x05count\x12\x1d\n" +
	"\n" +
	"start_date\x18\x04 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x05 \x01(\tR\aendDate\x12\x1e\n" +
	"\n" +
	"properties\x18\x06 \x03(\tR\n" +
	"properties\x12/\n" +
	"\x06extras\x18\a \x01(\v2\x17.google.protobuf.StructR\x06extras\"=\n" +
	"\x0eSearchResponse\x12+\n" +
	"\x04data\x18\x01 \x03(\v2\x17.device.v1.DeviceObjectR\x04data\"\\\n" +
	"\rCreateRequest\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x127\n" +
	"\n" +
	"properties\x18\x03 \x01(\v2\x17.google.protobuf.StructR\n" +
	"properties\"=\n" +
	"\x0eCreateResponse\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.device.v1.DeviceObjectR\x04data\"\x89\x01\n" +
	"\rUpdateRequest\x12+\n" +
	"\x02id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x127\n" +
	"\n" +
	"properties\x18\x03 \x01(\v2\x17.google.protobuf.StructR\n" +
	"properties\"=\n" +
	"\x0eUpdateResponse\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.device.v1.DeviceObjectR\x04data\"\xaf\x01\n" +
	"\vLinkRequest\x12+\n" +
	"\x02id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\x12:\n" +
	"\n" +
	"profile_id\x18\x02 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\tprofileId\x127\n" +
	"\n" +
	"properties\x18\x03 \x01(\v2\x17.google.protobuf.StructR\n" +
	"properties\";\n" +
	"\fLinkResponse\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.device.v1.DeviceObjectR\x04data\"<\n" +
	"\rRemoveRequest\x12+\n" +
	"\x02id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\"=\n" +
	"\x0eRemoveResponse\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.device.v1.DeviceObjectR\x04data\"\xaa\x02\n" +
	"\n" +
	"LogRequest\x12;\n" +
	"\tdevice_id\x18\x01 \x01(\tB\x1e\xbaH\x1b\xd8\x01\x01r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\bdeviceId\x12:\n" +
	"\n" +
	"session_id\x18\x03 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\tsessionId\x12\x0e\n" +
	"\x02ip\x18\x04 \x01(\tR\x02ip\x12\x16\n" +
	"\x06locale\x18\x05 \x01(\tR\x06locale\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x06 \x01(\tR\tuserAgent\x12\x0e\n" +
	"\x02os\x18\a \x01(\tR\x02os\x12\x1b\n" +
	"\tlast_seen\x18\b \x01(\tR\blastSeen\x12/\n" +
	"\x06extras\x18\t \x01(\v2\x17.google.protobuf.StructR\x06extras\"7\n" +
	"\vLogResponse\x12(\n" +
	"\x04data\x18\x01 \x01(\v2\x14.device.v1.DeviceLogR\x04data\"a\n" +
	"\x0fListLogsRequest\x128\n" +
	"\tdevice_id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\bdeviceId\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\"<\n" +
	"\x10ListLogsResponse\x12(\n" +
	"\x04data\x18\x01 \x03(\v2\x14.device.v1.DeviceLogR\x04data\"\xea\x01\n" +
	"\rAddKeyRequest\x12+\n" +
	"\x02id\x18\x01 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\x128\n" +
	"\tdevice_id\x18\x02 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\bdeviceId\x12-\n" +
	"\bkey_type\x18\x03 \x01(\x0e2\x12.device.v1.KeyTypeR\akeyType\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12/\n" +
	"\x06extras\x18\x05 \x01(\v2\x17.google.protobuf.StructR\x06extras\":\n" +
	"\x0eAddKeyResponse\x12(\n" +
	"\x04data\x18\x01 \x01(\v2\x14.device.v1.KeyObjectR\x04data\"D\n" +
	"\x10RemoveKeyRequest\x120\n" +
	"\x02id\x18\x01 \x03(\tB \xbaH\x1d\x92\x01\x1a\"\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\x02id\"#\n" +
	"\x11RemoveKeyResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x03(\tR\x02id\"\xbb\x01\n" +
	"\x10SearchKeyRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x128\n" +
	"\tdevice_id\x18\x02 \x01(\tB\x1b\xbaH\x18r\x16\x10\x03\x18(2\x10[0-9a-z_-]{3,20}R\bdeviceId\x12-\n" +
	"\bkey_type\x18\x03 \x01(\x0e2\x12.device.v1.KeyTypeR\akeyType\x12\x12\n" +
	"\x04page\x18\x04 \x01(\x05R\x04page\x12\x14\n" +
	"\x05count\x18\x05 \x01(\x05R\x05count\"=\n" +
	"\x11SearchKeyResponse\x12(\n" +
	"\x04data\x18\x01 \x03(\v2\x14.device.v1.KeyObjectR\x04data*/\n" +
	"\aKeyType\x12\x0e\n" +
	"\n" +
	"MATRIX_KEY\x10\x00\x12\x14\n" +
	"\x10NOTIFICATION_KEY\x10\x012\xab\x18\n" +
	"\rDeviceService\x12\x86\x02\n" +
	"\aGetById\x12\x19.device.v1.GetByIdRequest\x1a\x1a.device.v1.GetByIdResponse\"\xc3\x01\xbaG\xbf\x01\n" +
	"\aDevices\x12\x11Get devices by ID\x1a\x91\x01Retrieves one or more devices by their unique identifiers. Supports batch retrieval and optional extensive details including logs and key counts.*\rgetDeviceById\x12\x83\x02\n" +
	"\x0eGetBySessionId\x12 .device.v1.GetBySessionIdRequest\x1a!.device.v1.GetBySessionIdResponse\"\xab\x01\xbaG\xa7\x01\n" +
	"\aDevices\x12\x18Get device by session ID\x1alRetrieves a device by its active session identifier. Used to resolve device information from session tokens.*\x14getDeviceBySessionId\x12\x85\x02\n" +
	"\x06Search\x12\x18.device.v1.SearchRequest\x1a\x19.device.v1.SearchResponse\"\xc3\x01\xbaG\xbf\x01\n" +
	"\aDevices\x12\x0eSearch devices\x1a\x94\x01Searches for devices matching specified criteria including device name, OS, date range, and custom properties. Returns a stream of matching devices.*\rsearchDevices0\x01\x12\xf5\x01\n" +
	"\x06Create\x12\x18.device.v1.CreateRequest\x1a\x19.device.v1.CreateResponse\"\xb5\x01\xbaG\xb1\x01\n" +
	"\aDevices\x12\x15Register a new device\x1a\x80\x01Registers a new device in the system. The device must be linked to a profile before it can be used for authenticated operations.*\fcreateDevice\x12\xed\x01\n" +
	"\x06Update\x12\x18.device.v1.UpdateRequest\x1a\x19.device.v1.UpdateResponse\"\xad\x01\xbaG\xa9\x01\n" +
	"\aDevices\x12\x19Update device information\x1auUpdates an existing device's name and properties. Only the device owner or administrators can perform this operation.*\fupdateDevice\x12\xe5\x01\n" +
	"\x04Link\x12\x16.device.v1.LinkRequest\x1a\x17.device.v1.LinkResponse\"\xab\x01\xbaG\xa7\x01\n" +
	"\aDevices\x12\x16Link device to profile\x1axLinks a device to a user profile. This operation is required before the device can be used for authenticated operations.*\n" +
	"linkDevice\x12\x8c\x02\n" +
	"\x06Remove\x12\x18.device.v1.RemoveRequest\x1a\x19.device.v1.RemoveResponse\"\xcc\x01\xbaG\xc8\x01\n" +
	"\aDevices\x12\x0fRemove a device\x1a\x9d\x01Removes a device from the system. This operation is typically used when a user logs out or removes a device from their account. This action cannot be undone.*\fremoveDevice\x12\x82\x02\n" +
	"\x03Log\x12\x15.device.v1.LogRequest\x1a\x16.device.v1.LogResponse\"\xcb\x01\xbaG\xc7\x01\n" +
	"\vDevice Logs\x12\x13Log device activity\x1a\x8f\x01Creates a new activity log entry for a device. Used for tracking device sessions, locations, and activity for security auditing and compliance.*\x11logDeviceActivity\x12\x83\x02\n" +
	"\bListLogs\x12\x1a.device.v1.ListLogsRequest\x1a\x1b.device.v1.ListLogsResponse\"\xbb\x01\xbaG\xb7\x01\n" +
	"\vDevice Logs\x12\x19List device activity logs\x1a}Retrieves activity logs for a device. Useful for security auditing, tracking device usage patterns, and compliance reporting.*\x0elistDeviceLogs0\x01\x12\x8f\x02\n" +
	"\x06AddKey\x12\x18.device.v1.AddKeyRequest\x1a\x19.device.v1.AddKeyResponse\"\xcf\x01\xbaG\xcb\x01\n" +
	"\vDevice Keys\x12\x12Add encryption key\x1a\x99\x01Adds an encryption key to a device. Keys are used for secure communications including Matrix end-to-end encryption and secure push notification delivery.*\faddDeviceKey\x12\xf8\x01\n" +
	"\tRemoveKey\x12\x1b.device.v1.RemoveKeyRequest\x1a\x1c.device.v1.RemoveKeyResponse\"\xaf\x01\xbaG\xab\x01\n" +
	"\vDevice Keys\x12\x16Remove encryption keys\x1asRemoves one or more encryption keys from a device. Used for key rotation or when removing a device from the system.*\x0fremoveDeviceKey\x12\x8b\x02\n" +
	"\tSearchKey\x12\x1b.device.v1.SearchKeyRequest\x1a\x1c.device.v1.SearchKeyResponse\"\xc0\x01\xbaG\xbc\x01\n" +
	"\vDevice Keys\x12\x1dSearch device encryption keys\x1a|Searches for encryption keys associated with a device. Supports filtering by key type (Matrix, Notification) and pagination.*\x10searchDeviceKeys0\x01B\x87\a\xbaG\xde\x05\x12\xb2\x05\n" +
	"\x0eDevice Service\x12\xf3\x03The Device Service provides comprehensive device management capabilities including device registration, session tracking, key management, and security auditing. It enables applications to register and track user devices across platforms (mobile, web, desktop), manage encryption keys for secure communications, and maintain detailed logs of device activity for security and compliance purposes. The service supports multi-device scenarios where users can have multiple active devices simultaneously.\"W\n" +
	"\x10Ant Investor Ltd\x12-https://github.com/antinvestor/service-device\x1a\x14info@antinvestor.com*I\n" +
	"\x0eApache License\x127https://github.com/antinvestor/apis/blob/master/LICENSE2\x06v1.0.0*':%\n" +
	"#\n" +
	"\n" +
	"BearerAuth\x12\x15\n" +
	"\x13\n" +
	"\x04http*\x06bearer2\x03JWT\n" +
	"\x1ecom.antinvestor.apis.device.v1B\vDeviceProtoP\x01Z1github.com/antinvestor/apis/go/device/v1;devicev1\xa2\x02\x03DXX\xaa\x02\tDevice.V1\xca\x02\tDevice\\V1\xe2\x02\x15Device\\V1\\GPBMetadata\xea\x02\n" +
	"Device::V1b\x06proto3"

var (
	file_device_v1_device_proto_rawDescOnce sync.Once
	file_device_v1_device_proto_rawDescData []byte
)

func file_device_v1_device_proto_rawDescGZIP() []byte {
	file_device_v1_device_proto_rawDescOnce.Do(func() {
		file_device_v1_device_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_device_v1_device_proto_rawDesc), len(file_device_v1_device_proto_rawDesc)))
	})
	return file_device_v1_device_proto_rawDescData
}

var file_device_v1_device_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_device_v1_device_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_device_v1_device_proto_goTypes = []any{
	(KeyType)(0),                   // 0: device.v1.KeyType
	(*Locale)(nil),                 // 1: device.v1.Locale
	(*KeyObject)(nil),              // 2: device.v1.KeyObject
	(*DeviceLog)(nil),              // 3: device.v1.DeviceLog
	(*DeviceObject)(nil),           // 4: device.v1.DeviceObject
	(*GetByIdRequest)(nil),         // 5: device.v1.GetByIdRequest
	(*GetByIdResponse)(nil),        // 6: device.v1.GetByIdResponse
	(*GetBySessionIdRequest)(nil),  // 7: device.v1.GetBySessionIdRequest
	(*GetBySessionIdResponse)(nil), // 8: device.v1.GetBySessionIdResponse
	(*SearchRequest)(nil),          // 9: device.v1.SearchRequest
	(*SearchResponse)(nil),         // 10: device.v1.SearchResponse
	(*CreateRequest)(nil),          // 11: device.v1.CreateRequest
	(*CreateResponse)(nil),         // 12: device.v1.CreateResponse
	(*UpdateRequest)(nil),          // 13: device.v1.UpdateRequest
	(*UpdateResponse)(nil),         // 14: device.v1.UpdateResponse
	(*LinkRequest)(nil),            // 15: device.v1.LinkRequest
	(*LinkResponse)(nil),           // 16: device.v1.LinkResponse
	(*RemoveRequest)(nil),          // 17: device.v1.RemoveRequest
	(*RemoveResponse)(nil),         // 18: device.v1.RemoveResponse
	(*LogRequest)(nil),             // 19: device.v1.LogRequest
	(*LogResponse)(nil),            // 20: device.v1.LogResponse
	(*ListLogsRequest)(nil),        // 21: device.v1.ListLogsRequest
	(*ListLogsResponse)(nil),       // 22: device.v1.ListLogsResponse
	(*AddKeyRequest)(nil),          // 23: device.v1.AddKeyRequest
	(*AddKeyResponse)(nil),         // 24: device.v1.AddKeyResponse
	(*RemoveKeyRequest)(nil),       // 25: device.v1.RemoveKeyRequest
	(*RemoveKeyResponse)(nil),      // 26: device.v1.RemoveKeyResponse
	(*SearchKeyRequest)(nil),       // 27: device.v1.SearchKeyRequest
	(*SearchKeyResponse)(nil),      // 28: device.v1.SearchKeyResponse
	(*structpb.Struct)(nil),        // 29: google.protobuf.Struct
}
var file_device_v1_device_proto_depIdxs = []int32{
	29, // 0: device.v1.KeyObject.extra:type_name -> google.protobuf.Struct
	1,  // 1: device.v1.DeviceLog.locale:type_name -> device.v1.Locale
	29, // 2: device.v1.DeviceLog.location:type_name -> google.protobuf.Struct
	29, // 3: device.v1.DeviceLog.extra:type_name -> google.protobuf.Struct
	1,  // 4: device.v1.DeviceObject.locale:type_name -> device.v1.Locale
	29, // 5: device.v1.DeviceObject.location:type_name -> google.protobuf.Struct
	29, // 6: device.v1.DeviceObject.properties:type_name -> google.protobuf.Struct
	4,  // 7: device.v1.GetByIdResponse.data:type_name -> device.v1.DeviceObject
	4,  // 8: device.v1.GetBySessionIdResponse.data:type_name -> device.v1.DeviceObject
	29, // 9: device.v1.SearchRequest.extras:type_name -> google.protobuf.Struct
	4,  // 10: device.v1.SearchResponse.data:type_name -> device.v1.DeviceObject
	29, // 11: device.v1.CreateRequest.properties:type_name -> google.protobuf.Struct
	4,  // 12: device.v1.CreateResponse.data:type_name -> device.v1.DeviceObject
	29, // 13: device.v1.UpdateRequest.properties:type_name -> google.protobuf.Struct
	4,  // 14: device.v1.UpdateResponse.data:type_name -> device.v1.DeviceObject
	29, // 15: device.v1.LinkRequest.properties:type_name -> google.protobuf.Struct
	4,  // 16: device.v1.LinkResponse.data:type_name -> device.v1.DeviceObject
	4,  // 17: device.v1.RemoveResponse.data:type_name -> device.v1.DeviceObject
	29, // 18: device.v1.LogRequest.extras:type_name -> google.protobuf.Struct
	3,  // 19: device.v1.LogResponse.data:type_name -> device.v1.DeviceLog
	3,  // 20: device.v1.ListLogsResponse.data:type_name -> device.v1.DeviceLog
	0,  // 21: device.v1.AddKeyRequest.key_type:type_name -> device.v1.KeyType
	29, // 22: device.v1.AddKeyRequest.extras:type_name -> google.protobuf.Struct
	2,  // 23: device.v1.AddKeyResponse.data:type_name -> device.v1.KeyObject
	0,  // 24: device.v1.SearchKeyRequest.key_type:type_name -> device.v1.KeyType
	2,  // 25: device.v1.SearchKeyResponse.data:type_name -> device.v1.KeyObject
	5,  // 26: device.v1.DeviceService.GetById:input_type -> device.v1.GetByIdRequest
	7,  // 27: device.v1.DeviceService.GetBySessionId:input_type -> device.v1.GetBySessionIdRequest
	9,  // 28: device.v1.DeviceService.Search:input_type -> device.v1.SearchRequest
	11, // 29: device.v1.DeviceService.Create:input_type -> device.v1.CreateRequest
	13, // 30: device.v1.DeviceService.Update:input_type -> device.v1.UpdateRequest
	15, // 31: device.v1.DeviceService.Link:input_type -> device.v1.LinkRequest
	17, // 32: device.v1.DeviceService.Remove:input_type -> device.v1.RemoveRequest
	19, // 33: device.v1.DeviceService.Log:input_type -> device.v1.LogRequest
	21, // 34: device.v1.DeviceService.ListLogs:input_type -> device.v1.ListLogsRequest
	23, // 35: device.v1.DeviceService.AddKey:input_type -> device.v1.AddKeyRequest
	25, // 36: device.v1.DeviceService.RemoveKey:input_type -> device.v1.RemoveKeyRequest
	27, // 37: device.v1.DeviceService.SearchKey:input_type -> device.v1.SearchKeyRequest
	6,  // 38: device.v1.DeviceService.GetById:output_type -> device.v1.GetByIdResponse
	8,  // 39: device.v1.DeviceService.GetBySessionId:output_type -> device.v1.GetBySessionIdResponse
	10, // 40: device.v1.DeviceService.Search:output_type -> device.v1.SearchResponse
	12, // 41: device.v1.DeviceService.Create:output_type -> device.v1.CreateResponse
	14, // 42: device.v1.DeviceService.Update:output_type -> device.v1.UpdateResponse
	16, // 43: device.v1.DeviceService.Link:output_type -> device.v1.LinkResponse
	18, // 44: device.v1.DeviceService.Remove:output_type -> device.v1.RemoveResponse
	20, // 45: device.v1.DeviceService.Log:output_type -> device.v1.LogResponse
	22, // 46: device.v1.DeviceService.ListLogs:output_type -> device.v1.ListLogsResponse
	24, // 47: device.v1.DeviceService.AddKey:output_type -> device.v1.AddKeyResponse
	26, // 48: device.v1.DeviceService.RemoveKey:output_type -> device.v1.RemoveKeyResponse
	28, // 49: device.v1.DeviceService.SearchKey:output_type -> device.v1.SearchKeyResponse
	38, // [38:50] is the sub-list for method output_type
	26, // [26:38] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_device_v1_device_proto_init() }
func file_device_v1_device_proto_init() {
	if File_device_v1_device_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_device_v1_device_proto_rawDesc), len(file_device_v1_device_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_device_v1_device_proto_goTypes,
		DependencyIndexes: file_device_v1_device_proto_depIdxs,
		EnumInfos:         file_device_v1_device_proto_enumTypes,
		MessageInfos:      file_device_v1_device_proto_msgTypes,
	}.Build()
	File_device_v1_device_proto = out.File
	file_device_v1_device_proto_goTypes = nil
	file_device_v1_device_proto_depIdxs = nil
}
