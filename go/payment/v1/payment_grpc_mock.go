// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/payment/v1/payment_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/payment/v1/payment_grpc.pb.go -package=paymentv1 -destination=/home/j/code/antinvestor/apis/go/payment/v1/payment_grpc_mock.go
//

// Package paymentv1 is a generated GoMock package.
package paymentv1

import (
	context "context"
	reflect "reflect"

	commonv1 "github.com/antinvestor/apis/go/common/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPaymentServiceClient is a mock of PaymentServiceClient interface.
type MockPaymentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceClientMockRecorder
	isgomock struct{}
}

// MockPaymentServiceClientMockRecorder is the mock recorder for MockPaymentServiceClient.
type MockPaymentServiceClientMockRecorder struct {
	mock *MockPaymentServiceClient
}

// NewMockPaymentServiceClient creates a new mock instance.
func NewMockPaymentServiceClient(ctrl *gomock.Controller) *MockPaymentServiceClient {
	mock := &MockPaymentServiceClient{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceClient) EXPECT() *MockPaymentServiceClientMockRecorder {
	return m.recorder
}

// CreatePaymentLink mocks base method.
func (m *MockPaymentServiceClient) CreatePaymentLink(ctx context.Context, in *CreatePaymentLinkRequest, opts ...grpc.CallOption) (*CreatePaymentLinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePaymentLink", varargs...)
	ret0, _ := ret[0].(*CreatePaymentLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentLink indicates an expected call of CreatePaymentLink.
func (mr *MockPaymentServiceClientMockRecorder) CreatePaymentLink(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentLink", reflect.TypeOf((*MockPaymentServiceClient)(nil).CreatePaymentLink), varargs...)
}

// InitiatePrompt mocks base method.
func (m *MockPaymentServiceClient) InitiatePrompt(ctx context.Context, in *InitiatePromptRequest, opts ...grpc.CallOption) (*InitiatePromptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiatePrompt", varargs...)
	ret0, _ := ret[0].(*InitiatePromptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePrompt indicates an expected call of InitiatePrompt.
func (mr *MockPaymentServiceClientMockRecorder) InitiatePrompt(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePrompt", reflect.TypeOf((*MockPaymentServiceClient)(nil).InitiatePrompt), varargs...)
}

// Receive mocks base method.
func (m *MockPaymentServiceClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Receive", varargs...)
	ret0, _ := ret[0].(*ReceiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockPaymentServiceClientMockRecorder) Receive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockPaymentServiceClient)(nil).Receive), varargs...)
}

// Reconcile mocks base method.
func (m *MockPaymentServiceClient) Reconcile(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*ReconcileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reconcile", varargs...)
	ret0, _ := ret[0].(*ReconcileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockPaymentServiceClientMockRecorder) Reconcile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockPaymentServiceClient)(nil).Reconcile), varargs...)
}

// Release mocks base method.
func (m *MockPaymentServiceClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Release", varargs...)
	ret0, _ := ret[0].(*ReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockPaymentServiceClientMockRecorder) Release(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockPaymentServiceClient)(nil).Release), varargs...)
}

// Search mocks base method.
func (m *MockPaymentServiceClient) Search(ctx context.Context, in *commonv1.SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[SearchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPaymentServiceClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPaymentServiceClient)(nil).Search), varargs...)
}

// Send mocks base method.
func (m *MockPaymentServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockPaymentServiceClientMockRecorder) Send(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPaymentServiceClient)(nil).Send), varargs...)
}

// Status mocks base method.
func (m *MockPaymentServiceClient) Status(ctx context.Context, in *commonv1.StatusRequest, opts ...grpc.CallOption) (*commonv1.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*commonv1.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockPaymentServiceClientMockRecorder) Status(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockPaymentServiceClient)(nil).Status), varargs...)
}

// StatusUpdate mocks base method.
func (m *MockPaymentServiceClient) StatusUpdate(ctx context.Context, in *commonv1.StatusUpdateRequest, opts ...grpc.CallOption) (*commonv1.StatusUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatusUpdate", varargs...)
	ret0, _ := ret[0].(*commonv1.StatusUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusUpdate indicates an expected call of StatusUpdate.
func (mr *MockPaymentServiceClientMockRecorder) StatusUpdate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockPaymentServiceClient)(nil).StatusUpdate), varargs...)
}

// MockPaymentServiceServer is a mock of PaymentServiceServer interface.
type MockPaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceServerMockRecorder
	isgomock struct{}
}

// MockPaymentServiceServerMockRecorder is the mock recorder for MockPaymentServiceServer.
type MockPaymentServiceServerMockRecorder struct {
	mock *MockPaymentServiceServer
}

// NewMockPaymentServiceServer creates a new mock instance.
func NewMockPaymentServiceServer(ctrl *gomock.Controller) *MockPaymentServiceServer {
	mock := &MockPaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceServer) EXPECT() *MockPaymentServiceServerMockRecorder {
	return m.recorder
}

// CreatePaymentLink mocks base method.
func (m *MockPaymentServiceServer) CreatePaymentLink(arg0 context.Context, arg1 *CreatePaymentLinkRequest) (*CreatePaymentLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentLink", arg0, arg1)
	ret0, _ := ret[0].(*CreatePaymentLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentLink indicates an expected call of CreatePaymentLink.
func (mr *MockPaymentServiceServerMockRecorder) CreatePaymentLink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentLink", reflect.TypeOf((*MockPaymentServiceServer)(nil).CreatePaymentLink), arg0, arg1)
}

// InitiatePrompt mocks base method.
func (m *MockPaymentServiceServer) InitiatePrompt(arg0 context.Context, arg1 *InitiatePromptRequest) (*InitiatePromptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePrompt", arg0, arg1)
	ret0, _ := ret[0].(*InitiatePromptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePrompt indicates an expected call of InitiatePrompt.
func (mr *MockPaymentServiceServerMockRecorder) InitiatePrompt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePrompt", reflect.TypeOf((*MockPaymentServiceServer)(nil).InitiatePrompt), arg0, arg1)
}

// Receive mocks base method.
func (m *MockPaymentServiceServer) Receive(arg0 context.Context, arg1 *ReceiveRequest) (*ReceiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].(*ReceiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockPaymentServiceServerMockRecorder) Receive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockPaymentServiceServer)(nil).Receive), arg0, arg1)
}

// Reconcile mocks base method.
func (m *MockPaymentServiceServer) Reconcile(arg0 context.Context, arg1 *ReconcileRequest) (*ReconcileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0, arg1)
	ret0, _ := ret[0].(*ReconcileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockPaymentServiceServerMockRecorder) Reconcile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockPaymentServiceServer)(nil).Reconcile), arg0, arg1)
}

// Release mocks base method.
func (m *MockPaymentServiceServer) Release(arg0 context.Context, arg1 *ReleaseRequest) (*ReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1)
	ret0, _ := ret[0].(*ReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockPaymentServiceServerMockRecorder) Release(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockPaymentServiceServer)(nil).Release), arg0, arg1)
}

// Search mocks base method.
func (m *MockPaymentServiceServer) Search(arg0 *commonv1.SearchRequest, arg1 grpc.ServerStreamingServer[SearchResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockPaymentServiceServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPaymentServiceServer)(nil).Search), arg0, arg1)
}

// Send mocks base method.
func (m *MockPaymentServiceServer) Send(arg0 context.Context, arg1 *SendRequest) (*SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockPaymentServiceServerMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPaymentServiceServer)(nil).Send), arg0, arg1)
}

// Status mocks base method.
func (m *MockPaymentServiceServer) Status(arg0 context.Context, arg1 *commonv1.StatusRequest) (*commonv1.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*commonv1.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockPaymentServiceServerMockRecorder) Status(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockPaymentServiceServer)(nil).Status), arg0, arg1)
}

// StatusUpdate mocks base method.
func (m *MockPaymentServiceServer) StatusUpdate(arg0 context.Context, arg1 *commonv1.StatusUpdateRequest) (*commonv1.StatusUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusUpdate", arg0, arg1)
	ret0, _ := ret[0].(*commonv1.StatusUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusUpdate indicates an expected call of StatusUpdate.
func (mr *MockPaymentServiceServerMockRecorder) StatusUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockPaymentServiceServer)(nil).StatusUpdate), arg0, arg1)
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockPaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockPaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}

// MockUnsafePaymentServiceServer is a mock of UnsafePaymentServiceServer interface.
type MockUnsafePaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePaymentServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafePaymentServiceServerMockRecorder is the mock recorder for MockUnsafePaymentServiceServer.
type MockUnsafePaymentServiceServerMockRecorder struct {
	mock *MockUnsafePaymentServiceServer
}

// NewMockUnsafePaymentServiceServer creates a new mock instance.
func NewMockUnsafePaymentServiceServer(ctrl *gomock.Controller) *MockUnsafePaymentServiceServer {
	mock := &MockUnsafePaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePaymentServiceServer) EXPECT() *MockUnsafePaymentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockUnsafePaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockUnsafePaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockUnsafePaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}
