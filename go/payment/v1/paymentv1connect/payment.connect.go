// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payment/v1/payment.proto

package paymentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/antinvestor/apis/go/common/v1"
	v1 "github.com/antinvestor/apis/go/payment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "payment.v1.PaymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentServiceSendProcedure is the fully-qualified name of the PaymentService's Send RPC.
	PaymentServiceSendProcedure = "/payment.v1.PaymentService/Send"
	// PaymentServiceReceiveProcedure is the fully-qualified name of the PaymentService's Receive RPC.
	PaymentServiceReceiveProcedure = "/payment.v1.PaymentService/Receive"
	// PaymentServiceInitiatePromptProcedure is the fully-qualified name of the PaymentService's
	// InitiatePrompt RPC.
	PaymentServiceInitiatePromptProcedure = "/payment.v1.PaymentService/InitiatePrompt"
	// PaymentServiceCreatePaymentLinkProcedure is the fully-qualified name of the PaymentService's
	// CreatePaymentLink RPC.
	PaymentServiceCreatePaymentLinkProcedure = "/payment.v1.PaymentService/CreatePaymentLink"
	// PaymentServiceStatusProcedure is the fully-qualified name of the PaymentService's Status RPC.
	PaymentServiceStatusProcedure = "/payment.v1.PaymentService/Status"
	// PaymentServiceStatusUpdateProcedure is the fully-qualified name of the PaymentService's
	// StatusUpdate RPC.
	PaymentServiceStatusUpdateProcedure = "/payment.v1.PaymentService/StatusUpdate"
	// PaymentServiceReleaseProcedure is the fully-qualified name of the PaymentService's Release RPC.
	PaymentServiceReleaseProcedure = "/payment.v1.PaymentService/Release"
	// PaymentServiceSearchProcedure is the fully-qualified name of the PaymentService's Search RPC.
	PaymentServiceSearchProcedure = "/payment.v1.PaymentService/Search"
	// PaymentServiceReconcileProcedure is the fully-qualified name of the PaymentService's Reconcile
	// RPC.
	PaymentServiceReconcileProcedure = "/payment.v1.PaymentService/Reconcile"
)

// PaymentServiceClient is a client for the payment.v1.PaymentService service.
type PaymentServiceClient interface {
	// Send queues an outbound payment for processing.
	// Payments are queued and require Release to process.
	Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error)
	// Receive queues an inbound payment for processing.
	// Used for recording expected incoming payments.
	Receive(context.Context, *connect.Request[v1.ReceiveRequest]) (*connect.Response[v1.ReceiveResponse], error)
	// InitiatePrompt initiates a payment prompt to the customer.
	// Triggers payment prompts like M-PESA STK push.
	InitiatePrompt(context.Context, *connect.Request[v1.InitiatePromptRequest]) (*connect.Response[v1.InitiatePromptResponse], error)
	// CreatePaymentLink generates a shareable payment link.
	// Customers can use the link to make payments via web interface.
	CreatePaymentLink(context.Context, *connect.Request[v1.CreatePaymentLinkRequest]) (*connect.Response[v1.CreatePaymentLinkResponse], error)
	// Status retrieves the current status of a payment.
	// Returns processing state and status details.
	Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v11.StatusResponse], error)
	// StatusUpdate updates the status of a payment.
	// Used for manual status corrections or workflow progression.
	StatusUpdate(context.Context, *connect.Request[v11.StatusUpdateRequest]) (*connect.Response[v11.StatusUpdateResponse], error)
	// Release releases a queued payment for processing.
	// Queued payments must be released to initiate actual transfer.
	Release(context.Context, *connect.Request[v1.ReleaseRequest]) (*connect.Response[v1.ReleaseResponse], error)
	// Search finds payments matching specified criteria.
	// Supports filtering by date, amount, status, route, and more.
	Search(context.Context, *connect.Request[v11.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error)
	// Reconcile matches external transactions with internal payments.
	// Used for payment reconciliation with provider statements.
	Reconcile(context.Context, *connect.Request[v1.ReconcileRequest]) (*connect.Response[v1.ReconcileResponse], error)
}

// NewPaymentServiceClient constructs a client for the payment.v1.PaymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	paymentServiceMethods := v1.File_payment_v1_payment_proto.Services().ByName("PaymentService").Methods()
	return &paymentServiceClient{
		send: connect.NewClient[v1.SendRequest, v1.SendResponse](
			httpClient,
			baseURL+PaymentServiceSendProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("Send")),
			connect.WithClientOptions(opts...),
		),
		receive: connect.NewClient[v1.ReceiveRequest, v1.ReceiveResponse](
			httpClient,
			baseURL+PaymentServiceReceiveProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("Receive")),
			connect.WithClientOptions(opts...),
		),
		initiatePrompt: connect.NewClient[v1.InitiatePromptRequest, v1.InitiatePromptResponse](
			httpClient,
			baseURL+PaymentServiceInitiatePromptProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("InitiatePrompt")),
			connect.WithClientOptions(opts...),
		),
		createPaymentLink: connect.NewClient[v1.CreatePaymentLinkRequest, v1.CreatePaymentLinkResponse](
			httpClient,
			baseURL+PaymentServiceCreatePaymentLinkProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreatePaymentLink")),
			connect.WithClientOptions(opts...),
		),
		status: connect.NewClient[v11.StatusRequest, v11.StatusResponse](
			httpClient,
			baseURL+PaymentServiceStatusProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("Status")),
			connect.WithClientOptions(opts...),
		),
		statusUpdate: connect.NewClient[v11.StatusUpdateRequest, v11.StatusUpdateResponse](
			httpClient,
			baseURL+PaymentServiceStatusUpdateProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("StatusUpdate")),
			connect.WithClientOptions(opts...),
		),
		release: connect.NewClient[v1.ReleaseRequest, v1.ReleaseResponse](
			httpClient,
			baseURL+PaymentServiceReleaseProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("Release")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v11.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+PaymentServiceSearchProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		reconcile: connect.NewClient[v1.ReconcileRequest, v1.ReconcileResponse](
			httpClient,
			baseURL+PaymentServiceReconcileProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("Reconcile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	send              *connect.Client[v1.SendRequest, v1.SendResponse]
	receive           *connect.Client[v1.ReceiveRequest, v1.ReceiveResponse]
	initiatePrompt    *connect.Client[v1.InitiatePromptRequest, v1.InitiatePromptResponse]
	createPaymentLink *connect.Client[v1.CreatePaymentLinkRequest, v1.CreatePaymentLinkResponse]
	status            *connect.Client[v11.StatusRequest, v11.StatusResponse]
	statusUpdate      *connect.Client[v11.StatusUpdateRequest, v11.StatusUpdateResponse]
	release           *connect.Client[v1.ReleaseRequest, v1.ReleaseResponse]
	search            *connect.Client[v11.SearchRequest, v1.SearchResponse]
	reconcile         *connect.Client[v1.ReconcileRequest, v1.ReconcileResponse]
}

// Send calls payment.v1.PaymentService.Send.
func (c *paymentServiceClient) Send(ctx context.Context, req *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error) {
	return c.send.CallUnary(ctx, req)
}

// Receive calls payment.v1.PaymentService.Receive.
func (c *paymentServiceClient) Receive(ctx context.Context, req *connect.Request[v1.ReceiveRequest]) (*connect.Response[v1.ReceiveResponse], error) {
	return c.receive.CallUnary(ctx, req)
}

// InitiatePrompt calls payment.v1.PaymentService.InitiatePrompt.
func (c *paymentServiceClient) InitiatePrompt(ctx context.Context, req *connect.Request[v1.InitiatePromptRequest]) (*connect.Response[v1.InitiatePromptResponse], error) {
	return c.initiatePrompt.CallUnary(ctx, req)
}

// CreatePaymentLink calls payment.v1.PaymentService.CreatePaymentLink.
func (c *paymentServiceClient) CreatePaymentLink(ctx context.Context, req *connect.Request[v1.CreatePaymentLinkRequest]) (*connect.Response[v1.CreatePaymentLinkResponse], error) {
	return c.createPaymentLink.CallUnary(ctx, req)
}

// Status calls payment.v1.PaymentService.Status.
func (c *paymentServiceClient) Status(ctx context.Context, req *connect.Request[v11.StatusRequest]) (*connect.Response[v11.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// StatusUpdate calls payment.v1.PaymentService.StatusUpdate.
func (c *paymentServiceClient) StatusUpdate(ctx context.Context, req *connect.Request[v11.StatusUpdateRequest]) (*connect.Response[v11.StatusUpdateResponse], error) {
	return c.statusUpdate.CallUnary(ctx, req)
}

// Release calls payment.v1.PaymentService.Release.
func (c *paymentServiceClient) Release(ctx context.Context, req *connect.Request[v1.ReleaseRequest]) (*connect.Response[v1.ReleaseResponse], error) {
	return c.release.CallUnary(ctx, req)
}

// Search calls payment.v1.PaymentService.Search.
func (c *paymentServiceClient) Search(ctx context.Context, req *connect.Request[v11.SearchRequest]) (*connect.ServerStreamForClient[v1.SearchResponse], error) {
	return c.search.CallServerStream(ctx, req)
}

// Reconcile calls payment.v1.PaymentService.Reconcile.
func (c *paymentServiceClient) Reconcile(ctx context.Context, req *connect.Request[v1.ReconcileRequest]) (*connect.Response[v1.ReconcileResponse], error) {
	return c.reconcile.CallUnary(ctx, req)
}

// PaymentServiceHandler is an implementation of the payment.v1.PaymentService service.
type PaymentServiceHandler interface {
	// Send queues an outbound payment for processing.
	// Payments are queued and require Release to process.
	Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error)
	// Receive queues an inbound payment for processing.
	// Used for recording expected incoming payments.
	Receive(context.Context, *connect.Request[v1.ReceiveRequest]) (*connect.Response[v1.ReceiveResponse], error)
	// InitiatePrompt initiates a payment prompt to the customer.
	// Triggers payment prompts like M-PESA STK push.
	InitiatePrompt(context.Context, *connect.Request[v1.InitiatePromptRequest]) (*connect.Response[v1.InitiatePromptResponse], error)
	// CreatePaymentLink generates a shareable payment link.
	// Customers can use the link to make payments via web interface.
	CreatePaymentLink(context.Context, *connect.Request[v1.CreatePaymentLinkRequest]) (*connect.Response[v1.CreatePaymentLinkResponse], error)
	// Status retrieves the current status of a payment.
	// Returns processing state and status details.
	Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v11.StatusResponse], error)
	// StatusUpdate updates the status of a payment.
	// Used for manual status corrections or workflow progression.
	StatusUpdate(context.Context, *connect.Request[v11.StatusUpdateRequest]) (*connect.Response[v11.StatusUpdateResponse], error)
	// Release releases a queued payment for processing.
	// Queued payments must be released to initiate actual transfer.
	Release(context.Context, *connect.Request[v1.ReleaseRequest]) (*connect.Response[v1.ReleaseResponse], error)
	// Search finds payments matching specified criteria.
	// Supports filtering by date, amount, status, route, and more.
	Search(context.Context, *connect.Request[v11.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error
	// Reconcile matches external transactions with internal payments.
	// Used for payment reconciliation with provider statements.
	Reconcile(context.Context, *connect.Request[v1.ReconcileRequest]) (*connect.Response[v1.ReconcileResponse], error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentServiceMethods := v1.File_payment_v1_payment_proto.Services().ByName("PaymentService").Methods()
	paymentServiceSendHandler := connect.NewUnaryHandler(
		PaymentServiceSendProcedure,
		svc.Send,
		connect.WithSchema(paymentServiceMethods.ByName("Send")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceReceiveHandler := connect.NewUnaryHandler(
		PaymentServiceReceiveProcedure,
		svc.Receive,
		connect.WithSchema(paymentServiceMethods.ByName("Receive")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceInitiatePromptHandler := connect.NewUnaryHandler(
		PaymentServiceInitiatePromptProcedure,
		svc.InitiatePrompt,
		connect.WithSchema(paymentServiceMethods.ByName("InitiatePrompt")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceCreatePaymentLinkHandler := connect.NewUnaryHandler(
		PaymentServiceCreatePaymentLinkProcedure,
		svc.CreatePaymentLink,
		connect.WithSchema(paymentServiceMethods.ByName("CreatePaymentLink")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceStatusHandler := connect.NewUnaryHandler(
		PaymentServiceStatusProcedure,
		svc.Status,
		connect.WithSchema(paymentServiceMethods.ByName("Status")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceStatusUpdateHandler := connect.NewUnaryHandler(
		PaymentServiceStatusUpdateProcedure,
		svc.StatusUpdate,
		connect.WithSchema(paymentServiceMethods.ByName("StatusUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceReleaseHandler := connect.NewUnaryHandler(
		PaymentServiceReleaseProcedure,
		svc.Release,
		connect.WithSchema(paymentServiceMethods.ByName("Release")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceSearchHandler := connect.NewServerStreamHandler(
		PaymentServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(paymentServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceReconcileHandler := connect.NewUnaryHandler(
		PaymentServiceReconcileProcedure,
		svc.Reconcile,
		connect.WithSchema(paymentServiceMethods.ByName("Reconcile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/payment.v1.PaymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentServiceSendProcedure:
			paymentServiceSendHandler.ServeHTTP(w, r)
		case PaymentServiceReceiveProcedure:
			paymentServiceReceiveHandler.ServeHTTP(w, r)
		case PaymentServiceInitiatePromptProcedure:
			paymentServiceInitiatePromptHandler.ServeHTTP(w, r)
		case PaymentServiceCreatePaymentLinkProcedure:
			paymentServiceCreatePaymentLinkHandler.ServeHTTP(w, r)
		case PaymentServiceStatusProcedure:
			paymentServiceStatusHandler.ServeHTTP(w, r)
		case PaymentServiceStatusUpdateProcedure:
			paymentServiceStatusUpdateHandler.ServeHTTP(w, r)
		case PaymentServiceReleaseProcedure:
			paymentServiceReleaseHandler.ServeHTTP(w, r)
		case PaymentServiceSearchProcedure:
			paymentServiceSearchHandler.ServeHTTP(w, r)
		case PaymentServiceReconcileProcedure:
			paymentServiceReconcileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.Send is not implemented"))
}

func (UnimplementedPaymentServiceHandler) Receive(context.Context, *connect.Request[v1.ReceiveRequest]) (*connect.Response[v1.ReceiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.Receive is not implemented"))
}

func (UnimplementedPaymentServiceHandler) InitiatePrompt(context.Context, *connect.Request[v1.InitiatePromptRequest]) (*connect.Response[v1.InitiatePromptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.InitiatePrompt is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreatePaymentLink(context.Context, *connect.Request[v1.CreatePaymentLinkRequest]) (*connect.Response[v1.CreatePaymentLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.CreatePaymentLink is not implemented"))
}

func (UnimplementedPaymentServiceHandler) Status(context.Context, *connect.Request[v11.StatusRequest]) (*connect.Response[v11.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.Status is not implemented"))
}

func (UnimplementedPaymentServiceHandler) StatusUpdate(context.Context, *connect.Request[v11.StatusUpdateRequest]) (*connect.Response[v11.StatusUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.StatusUpdate is not implemented"))
}

func (UnimplementedPaymentServiceHandler) Release(context.Context, *connect.Request[v1.ReleaseRequest]) (*connect.Response[v1.ReleaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.Release is not implemented"))
}

func (UnimplementedPaymentServiceHandler) Search(context.Context, *connect.Request[v11.SearchRequest], *connect.ServerStream[v1.SearchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.Search is not implemented"))
}

func (UnimplementedPaymentServiceHandler) Reconcile(context.Context, *connect.Request[v1.ReconcileRequest]) (*connect.Response[v1.ReconcileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.Reconcile is not implemented"))
}
