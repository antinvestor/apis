// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/partition/v1/partition_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/partition/v1/partition_grpc.pb.go -package=partitionv1 -destination=/home/j/code/antinvestor/apis/go/partition/v1/partition_grpc_mock.go
//

// Package partitionv1 is a generated GoMock package.
package partitionv1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPartitionServiceClient is a mock of PartitionServiceClient interface.
type MockPartitionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionServiceClientMockRecorder
}

// MockPartitionServiceClientMockRecorder is the mock recorder for MockPartitionServiceClient.
type MockPartitionServiceClientMockRecorder struct {
	mock *MockPartitionServiceClient
}

// NewMockPartitionServiceClient creates a new mock instance.
func NewMockPartitionServiceClient(ctrl *gomock.Controller) *MockPartitionServiceClient {
	mock := &MockPartitionServiceClient{ctrl: ctrl}
	mock.recorder = &MockPartitionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionServiceClient) EXPECT() *MockPartitionServiceClientMockRecorder {
	return m.recorder
}

// CreateAccess mocks base method.
func (m *MockPartitionServiceClient) CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*CreateAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccess", varargs...)
	ret0, _ := ret[0].(*CreateAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccess indicates an expected call of CreateAccess.
func (mr *MockPartitionServiceClientMockRecorder) CreateAccess(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateAccess), varargs...)
}

// CreateAccessRole mocks base method.
func (m *MockPartitionServiceClient) CreateAccessRole(ctx context.Context, in *CreateAccessRoleRequest, opts ...grpc.CallOption) (*CreateAccessRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessRole", varargs...)
	ret0, _ := ret[0].(*CreateAccessRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessRole indicates an expected call of CreateAccessRole.
func (mr *MockPartitionServiceClientMockRecorder) CreateAccessRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateAccessRole), varargs...)
}

// CreatePage mocks base method.
func (m *MockPartitionServiceClient) CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePage", varargs...)
	ret0, _ := ret[0].(*CreatePageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockPartitionServiceClientMockRecorder) CreatePage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePage), varargs...)
}

// CreatePartition mocks base method.
func (m *MockPartitionServiceClient) CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartition", varargs...)
	ret0, _ := ret[0].(*CreatePartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockPartitionServiceClientMockRecorder) CreatePartition(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePartition), varargs...)
}

// CreatePartitionRole mocks base method.
func (m *MockPartitionServiceClient) CreatePartitionRole(ctx context.Context, in *CreatePartitionRoleRequest, opts ...grpc.CallOption) (*CreatePartitionRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartitionRole", varargs...)
	ret0, _ := ret[0].(*CreatePartitionRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionRole indicates an expected call of CreatePartitionRole.
func (mr *MockPartitionServiceClientMockRecorder) CreatePartitionRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePartitionRole), varargs...)
}

// CreateTenant mocks base method.
func (m *MockPartitionServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTenant", varargs...)
	ret0, _ := ret[0].(*CreateTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockPartitionServiceClientMockRecorder) CreateTenant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateTenant), varargs...)
}

// GetAccess mocks base method.
func (m *MockPartitionServiceClient) GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*GetAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccess", varargs...)
	ret0, _ := ret[0].(*GetAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccess indicates an expected call of GetAccess.
func (mr *MockPartitionServiceClientMockRecorder) GetAccess(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetAccess), varargs...)
}

// GetPage mocks base method.
func (m *MockPartitionServiceClient) GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPage", varargs...)
	ret0, _ := ret[0].(*GetPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockPartitionServiceClientMockRecorder) GetPage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetPage), varargs...)
}

// GetPartition mocks base method.
func (m *MockPartitionServiceClient) GetPartition(ctx context.Context, in *GetPartitionRequest, opts ...grpc.CallOption) (*GetPartitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartition", varargs...)
	ret0, _ := ret[0].(*GetPartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartition indicates an expected call of GetPartition.
func (mr *MockPartitionServiceClientMockRecorder) GetPartition(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetPartition), varargs...)
}

// GetTenant mocks base method.
func (m *MockPartitionServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTenant", varargs...)
	ret0, _ := ret[0].(*GetTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockPartitionServiceClientMockRecorder) GetTenant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetTenant), varargs...)
}

// ListAccessRole mocks base method.
func (m *MockPartitionServiceClient) ListAccessRole(ctx context.Context, in *ListAccessRoleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAccessRoleResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessRole", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[ListAccessRoleResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessRole indicates an expected call of ListAccessRole.
func (mr *MockPartitionServiceClientMockRecorder) ListAccessRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListAccessRole), varargs...)
}

// ListPartition mocks base method.
func (m *MockPartitionServiceClient) ListPartition(ctx context.Context, in *ListPartitionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListPartitionResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartition", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[ListPartitionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartition indicates an expected call of ListPartition.
func (mr *MockPartitionServiceClientMockRecorder) ListPartition(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListPartition), varargs...)
}

// ListPartitionRole mocks base method.
func (m *MockPartitionServiceClient) ListPartitionRole(ctx context.Context, in *ListPartitionRoleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListPartitionRoleResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartitionRole", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[ListPartitionRoleResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartitionRole indicates an expected call of ListPartitionRole.
func (mr *MockPartitionServiceClientMockRecorder) ListPartitionRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartitionRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListPartitionRole), varargs...)
}

// ListTenant mocks base method.
func (m *MockPartitionServiceClient) ListTenant(ctx context.Context, in *ListTenantRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListTenantResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTenant", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[ListTenantResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTenant indicates an expected call of ListTenant.
func (mr *MockPartitionServiceClientMockRecorder) ListTenant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTenant", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListTenant), varargs...)
}

// RemoveAccess mocks base method.
func (m *MockPartitionServiceClient) RemoveAccess(ctx context.Context, in *RemoveAccessRequest, opts ...grpc.CallOption) (*RemoveAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccess", varargs...)
	ret0, _ := ret[0].(*RemoveAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockPartitionServiceClientMockRecorder) RemoveAccess(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemoveAccess), varargs...)
}

// RemoveAccessRole mocks base method.
func (m *MockPartitionServiceClient) RemoveAccessRole(ctx context.Context, in *RemoveAccessRoleRequest, opts ...grpc.CallOption) (*RemoveAccessRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccessRole", varargs...)
	ret0, _ := ret[0].(*RemoveAccessRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccessRole indicates an expected call of RemoveAccessRole.
func (mr *MockPartitionServiceClientMockRecorder) RemoveAccessRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccessRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemoveAccessRole), varargs...)
}

// RemovePage mocks base method.
func (m *MockPartitionServiceClient) RemovePage(ctx context.Context, in *RemovePageRequest, opts ...grpc.CallOption) (*RemovePageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePage", varargs...)
	ret0, _ := ret[0].(*RemovePageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePage indicates an expected call of RemovePage.
func (mr *MockPartitionServiceClientMockRecorder) RemovePage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemovePage), varargs...)
}

// RemovePartitionRole mocks base method.
func (m *MockPartitionServiceClient) RemovePartitionRole(ctx context.Context, in *RemovePartitionRoleRequest, opts ...grpc.CallOption) (*RemovePartitionRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePartitionRole", varargs...)
	ret0, _ := ret[0].(*RemovePartitionRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePartitionRole indicates an expected call of RemovePartitionRole.
func (mr *MockPartitionServiceClientMockRecorder) RemovePartitionRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePartitionRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemovePartitionRole), varargs...)
}

// UpdatePartition mocks base method.
func (m *MockPartitionServiceClient) UpdatePartition(ctx context.Context, in *UpdatePartitionRequest, opts ...grpc.CallOption) (*UpdatePartitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePartition", varargs...)
	ret0, _ := ret[0].(*UpdatePartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockPartitionServiceClientMockRecorder) UpdatePartition(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).UpdatePartition), varargs...)
}

// MockPartitionServiceServer is a mock of PartitionServiceServer interface.
type MockPartitionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionServiceServerMockRecorder
}

// MockPartitionServiceServerMockRecorder is the mock recorder for MockPartitionServiceServer.
type MockPartitionServiceServerMockRecorder struct {
	mock *MockPartitionServiceServer
}

// NewMockPartitionServiceServer creates a new mock instance.
func NewMockPartitionServiceServer(ctrl *gomock.Controller) *MockPartitionServiceServer {
	mock := &MockPartitionServiceServer{ctrl: ctrl}
	mock.recorder = &MockPartitionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionServiceServer) EXPECT() *MockPartitionServiceServerMockRecorder {
	return m.recorder
}

// CreateAccess mocks base method.
func (m *MockPartitionServiceServer) CreateAccess(arg0 context.Context, arg1 *CreateAccessRequest) (*CreateAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccess", arg0, arg1)
	ret0, _ := ret[0].(*CreateAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccess indicates an expected call of CreateAccess.
func (mr *MockPartitionServiceServerMockRecorder) CreateAccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateAccess), arg0, arg1)
}

// CreateAccessRole mocks base method.
func (m *MockPartitionServiceServer) CreateAccessRole(arg0 context.Context, arg1 *CreateAccessRoleRequest) (*CreateAccessRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessRole", arg0, arg1)
	ret0, _ := ret[0].(*CreateAccessRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessRole indicates an expected call of CreateAccessRole.
func (mr *MockPartitionServiceServerMockRecorder) CreateAccessRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateAccessRole), arg0, arg1)
}

// CreatePage mocks base method.
func (m *MockPartitionServiceServer) CreatePage(arg0 context.Context, arg1 *CreatePageRequest) (*CreatePageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", arg0, arg1)
	ret0, _ := ret[0].(*CreatePageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockPartitionServiceServerMockRecorder) CreatePage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePage), arg0, arg1)
}

// CreatePartition mocks base method.
func (m *MockPartitionServiceServer) CreatePartition(arg0 context.Context, arg1 *CreatePartitionRequest) (*CreatePartitionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartition", arg0, arg1)
	ret0, _ := ret[0].(*CreatePartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockPartitionServiceServerMockRecorder) CreatePartition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePartition), arg0, arg1)
}

// CreatePartitionRole mocks base method.
func (m *MockPartitionServiceServer) CreatePartitionRole(arg0 context.Context, arg1 *CreatePartitionRoleRequest) (*CreatePartitionRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartitionRole", arg0, arg1)
	ret0, _ := ret[0].(*CreatePartitionRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionRole indicates an expected call of CreatePartitionRole.
func (mr *MockPartitionServiceServerMockRecorder) CreatePartitionRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePartitionRole), arg0, arg1)
}

// CreateTenant mocks base method.
func (m *MockPartitionServiceServer) CreateTenant(arg0 context.Context, arg1 *CreateTenantRequest) (*CreateTenantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", arg0, arg1)
	ret0, _ := ret[0].(*CreateTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockPartitionServiceServerMockRecorder) CreateTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateTenant), arg0, arg1)
}

// GetAccess mocks base method.
func (m *MockPartitionServiceServer) GetAccess(arg0 context.Context, arg1 *GetAccessRequest) (*GetAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccess", arg0, arg1)
	ret0, _ := ret[0].(*GetAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccess indicates an expected call of GetAccess.
func (mr *MockPartitionServiceServerMockRecorder) GetAccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetAccess), arg0, arg1)
}

// GetPage mocks base method.
func (m *MockPartitionServiceServer) GetPage(arg0 context.Context, arg1 *GetPageRequest) (*GetPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", arg0, arg1)
	ret0, _ := ret[0].(*GetPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockPartitionServiceServerMockRecorder) GetPage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetPage), arg0, arg1)
}

// GetPartition mocks base method.
func (m *MockPartitionServiceServer) GetPartition(arg0 context.Context, arg1 *GetPartitionRequest) (*GetPartitionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartition", arg0, arg1)
	ret0, _ := ret[0].(*GetPartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartition indicates an expected call of GetPartition.
func (mr *MockPartitionServiceServerMockRecorder) GetPartition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetPartition), arg0, arg1)
}

// GetTenant mocks base method.
func (m *MockPartitionServiceServer) GetTenant(arg0 context.Context, arg1 *GetTenantRequest) (*GetTenantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenant", arg0, arg1)
	ret0, _ := ret[0].(*GetTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockPartitionServiceServerMockRecorder) GetTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetTenant), arg0, arg1)
}

// ListAccessRole mocks base method.
func (m *MockPartitionServiceServer) ListAccessRole(arg0 *ListAccessRoleRequest, arg1 grpc.ServerStreamingServer[ListAccessRoleResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessRole indicates an expected call of ListAccessRole.
func (mr *MockPartitionServiceServerMockRecorder) ListAccessRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListAccessRole), arg0, arg1)
}

// ListPartition mocks base method.
func (m *MockPartitionServiceServer) ListPartition(arg0 *ListPartitionRequest, arg1 grpc.ServerStreamingServer[ListPartitionResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPartition indicates an expected call of ListPartition.
func (mr *MockPartitionServiceServerMockRecorder) ListPartition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListPartition), arg0, arg1)
}

// ListPartitionRole mocks base method.
func (m *MockPartitionServiceServer) ListPartitionRole(arg0 *ListPartitionRoleRequest, arg1 grpc.ServerStreamingServer[ListPartitionRoleResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartitionRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPartitionRole indicates an expected call of ListPartitionRole.
func (mr *MockPartitionServiceServerMockRecorder) ListPartitionRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartitionRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListPartitionRole), arg0, arg1)
}

// ListTenant mocks base method.
func (m *MockPartitionServiceServer) ListTenant(arg0 *ListTenantRequest, arg1 grpc.ServerStreamingServer[ListTenantResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTenant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTenant indicates an expected call of ListTenant.
func (mr *MockPartitionServiceServerMockRecorder) ListTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTenant", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListTenant), arg0, arg1)
}

// RemoveAccess mocks base method.
func (m *MockPartitionServiceServer) RemoveAccess(arg0 context.Context, arg1 *RemoveAccessRequest) (*RemoveAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccess", arg0, arg1)
	ret0, _ := ret[0].(*RemoveAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockPartitionServiceServerMockRecorder) RemoveAccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemoveAccess), arg0, arg1)
}

// RemoveAccessRole mocks base method.
func (m *MockPartitionServiceServer) RemoveAccessRole(arg0 context.Context, arg1 *RemoveAccessRoleRequest) (*RemoveAccessRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccessRole", arg0, arg1)
	ret0, _ := ret[0].(*RemoveAccessRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccessRole indicates an expected call of RemoveAccessRole.
func (mr *MockPartitionServiceServerMockRecorder) RemoveAccessRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccessRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemoveAccessRole), arg0, arg1)
}

// RemovePage mocks base method.
func (m *MockPartitionServiceServer) RemovePage(arg0 context.Context, arg1 *RemovePageRequest) (*RemovePageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePage", arg0, arg1)
	ret0, _ := ret[0].(*RemovePageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePage indicates an expected call of RemovePage.
func (mr *MockPartitionServiceServerMockRecorder) RemovePage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemovePage), arg0, arg1)
}

// RemovePartitionRole mocks base method.
func (m *MockPartitionServiceServer) RemovePartitionRole(arg0 context.Context, arg1 *RemovePartitionRoleRequest) (*RemovePartitionRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePartitionRole", arg0, arg1)
	ret0, _ := ret[0].(*RemovePartitionRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePartitionRole indicates an expected call of RemovePartitionRole.
func (mr *MockPartitionServiceServerMockRecorder) RemovePartitionRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePartitionRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemovePartitionRole), arg0, arg1)
}

// UpdatePartition mocks base method.
func (m *MockPartitionServiceServer) UpdatePartition(arg0 context.Context, arg1 *UpdatePartitionRequest) (*UpdatePartitionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartition", arg0, arg1)
	ret0, _ := ret[0].(*UpdatePartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockPartitionServiceServerMockRecorder) UpdatePartition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).UpdatePartition), arg0, arg1)
}

// mustEmbedUnimplementedPartitionServiceServer mocks base method.
func (m *MockPartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPartitionServiceServer")
}

// mustEmbedUnimplementedPartitionServiceServer indicates an expected call of mustEmbedUnimplementedPartitionServiceServer.
func (mr *MockPartitionServiceServerMockRecorder) mustEmbedUnimplementedPartitionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPartitionServiceServer", reflect.TypeOf((*MockPartitionServiceServer)(nil).mustEmbedUnimplementedPartitionServiceServer))
}

// MockUnsafePartitionServiceServer is a mock of UnsafePartitionServiceServer interface.
type MockUnsafePartitionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePartitionServiceServerMockRecorder
}

// MockUnsafePartitionServiceServerMockRecorder is the mock recorder for MockUnsafePartitionServiceServer.
type MockUnsafePartitionServiceServerMockRecorder struct {
	mock *MockUnsafePartitionServiceServer
}

// NewMockUnsafePartitionServiceServer creates a new mock instance.
func NewMockUnsafePartitionServiceServer(ctrl *gomock.Controller) *MockUnsafePartitionServiceServer {
	mock := &MockUnsafePartitionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePartitionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePartitionServiceServer) EXPECT() *MockUnsafePartitionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPartitionServiceServer mocks base method.
func (m *MockUnsafePartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPartitionServiceServer")
}

// mustEmbedUnimplementedPartitionServiceServer indicates an expected call of mustEmbedUnimplementedPartitionServiceServer.
func (mr *MockUnsafePartitionServiceServerMockRecorder) mustEmbedUnimplementedPartitionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPartitionServiceServer", reflect.TypeOf((*MockUnsafePartitionServiceServer)(nil).mustEmbedUnimplementedPartitionServiceServer))
}
