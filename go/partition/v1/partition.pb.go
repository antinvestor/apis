// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: partition/v1/partition.proto

package partitionv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/antinvestor/apis/go/common/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TenantObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TenantObject) Reset() {
	*x = TenantObject{}
	mi := &file_partition_v1_partition_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantObject) ProtoMessage() {}

func (x *TenantObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantObject.ProtoReflect.Descriptor instead.
func (*TenantObject) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{0}
}

func (x *TenantObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TenantObject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TenantObject) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Request to create a new partition
type PartitionCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ParentId      string                 `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionCreateRequest) Reset() {
	*x = PartitionCreateRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionCreateRequest) ProtoMessage() {}

func (x *PartitionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionCreateRequest.ProtoReflect.Descriptor instead.
func (*PartitionCreateRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{1}
}

func (x *PartitionCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionCreateRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *PartitionCreateRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *PartitionCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PartitionCreateRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type GetTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTenantRequest) Reset() {
	*x = GetTenantRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantRequest) ProtoMessage() {}

func (x *GetTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantRequest.ProtoReflect.Descriptor instead.
func (*GetTenantRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{2}
}

func (x *GetTenantRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *TenantObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTenantResponse) Reset() {
	*x = GetTenantResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantResponse) ProtoMessage() {}

func (x *GetTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantResponse.ProtoReflect.Descriptor instead.
func (*GetTenantResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{3}
}

func (x *GetTenantResponse) GetData() *TenantObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page          int64                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	StartDate     string                 `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string                 `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Properties    []string               `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty"`
	Extras        map[string]string      `protobuf:"bytes,7,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTenantRequest) Reset() {
	*x = ListTenantRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantRequest) ProtoMessage() {}

func (x *ListTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantRequest.ProtoReflect.Descriptor instead.
func (*ListTenantRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{4}
}

func (x *ListTenantRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListTenantRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTenantRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListTenantRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ListTenantRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ListTenantRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ListTenantRequest) GetExtras() map[string]string {
	if x != nil {
		return x.Extras
	}
	return nil
}

type ListTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*TenantObject        `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTenantResponse) Reset() {
	*x = ListTenantResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantResponse) ProtoMessage() {}

func (x *ListTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantResponse.ProtoReflect.Descriptor instead.
func (*ListTenantResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{5}
}

func (x *ListTenantResponse) GetData() []*TenantObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to create new tenancy
type CreateTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTenantRequest) Reset() {
	*x = CreateTenantRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantRequest) ProtoMessage() {}

func (x *CreateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantRequest.ProtoReflect.Descriptor instead.
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTenantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTenantRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTenantRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreateTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *TenantObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTenantResponse) Reset() {
	*x = CreateTenantResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantResponse) ProtoMessage() {}

func (x *CreateTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantResponse.ProtoReflect.Descriptor instead.
func (*CreateTenantResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTenantResponse) GetData() *TenantObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPartitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPartitionRequest) Reset() {
	*x = GetPartitionRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionRequest) ProtoMessage() {}

func (x *GetPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionRequest.ProtoReflect.Descriptor instead.
func (*GetPartitionRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{8}
}

func (x *GetPartitionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPartitionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *PartitionObject       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPartitionResponse) Reset() {
	*x = GetPartitionResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionResponse) ProtoMessage() {}

func (x *GetPartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionResponse.ProtoReflect.Descriptor instead.
func (*GetPartitionResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{9}
}

func (x *GetPartitionResponse) GetData() *PartitionObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListPartitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page          int64                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	StartDate     string                 `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string                 `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Properties    []string               `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty"`
	Extras        map[string]string      `protobuf:"bytes,7,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPartitionRequest) Reset() {
	*x = ListPartitionRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartitionRequest) ProtoMessage() {}

func (x *ListPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartitionRequest.ProtoReflect.Descriptor instead.
func (*ListPartitionRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{10}
}

func (x *ListPartitionRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListPartitionRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPartitionRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListPartitionRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ListPartitionRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ListPartitionRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ListPartitionRequest) GetExtras() map[string]string {
	if x != nil {
		return x.Extras
	}
	return nil
}

type ListPartitionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*PartitionObject     `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPartitionResponse) Reset() {
	*x = ListPartitionResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartitionResponse) ProtoMessage() {}

func (x *ListPartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartitionResponse.ProtoReflect.Descriptor instead.
func (*ListPartitionResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{11}
}

func (x *ListPartitionResponse) GetData() []*PartitionObject {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to create new partition
type CreatePartitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ParentId      string                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePartitionRequest) Reset() {
	*x = CreatePartitionRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartitionRequest) ProtoMessage() {}

func (x *CreatePartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartitionRequest.ProtoReflect.Descriptor instead.
func (*CreatePartitionRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{12}
}

func (x *CreatePartitionRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreatePartitionRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreatePartitionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePartitionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePartitionRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreatePartitionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *PartitionObject       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePartitionResponse) Reset() {
	*x = CreatePartitionResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartitionResponse) ProtoMessage() {}

func (x *CreatePartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartitionResponse.ProtoReflect.Descriptor instead.
func (*CreatePartitionResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePartitionResponse) GetData() *PartitionObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdatePartitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State         v1.STATE               `protobuf:"varint,4,opt,name=state,proto3,enum=common.v1.STATE" json:"state,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePartitionRequest) Reset() {
	*x = UpdatePartitionRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartitionRequest) ProtoMessage() {}

func (x *UpdatePartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartitionRequest.ProtoReflect.Descriptor instead.
func (*UpdatePartitionRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{14}
}

func (x *UpdatePartitionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePartitionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePartitionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdatePartitionRequest) GetState() v1.STATE {
	if x != nil {
		return x.State
	}
	return v1.STATE(0)
}

func (x *UpdatePartitionRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type UpdatePartitionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *PartitionObject       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePartitionResponse) Reset() {
	*x = UpdatePartitionResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartitionResponse) ProtoMessage() {}

func (x *UpdatePartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartitionResponse.ProtoReflect.Descriptor instead.
func (*UpdatePartitionResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{15}
}

func (x *UpdatePartitionResponse) GetData() *PartitionObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type PartitionObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TenantId      string                 `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ParentId      string                 `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	State         v1.STATE               `protobuf:"varint,6,opt,name=state,proto3,enum=common.v1.STATE" json:"state,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionObject) Reset() {
	*x = PartitionObject{}
	mi := &file_partition_v1_partition_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionObject) ProtoMessage() {}

func (x *PartitionObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionObject.ProtoReflect.Descriptor instead.
func (*PartitionObject) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{16}
}

func (x *PartitionObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PartitionObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionObject) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *PartitionObject) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *PartitionObject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PartitionObject) GetState() v1.STATE {
	if x != nil {
		return x.State
	}
	return v1.STATE(0)
}

func (x *PartitionObject) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Partition Roles
type CreatePartitionRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartitionId   string                 `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePartitionRoleRequest) Reset() {
	*x = CreatePartitionRoleRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartitionRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartitionRoleRequest) ProtoMessage() {}

func (x *CreatePartitionRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartitionRoleRequest.ProtoReflect.Descriptor instead.
func (*CreatePartitionRoleRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{17}
}

func (x *CreatePartitionRoleRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *CreatePartitionRoleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePartitionRoleRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreatePartitionRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *PartitionRoleObject   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePartitionRoleResponse) Reset() {
	*x = CreatePartitionRoleResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartitionRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartitionRoleResponse) ProtoMessage() {}

func (x *CreatePartitionRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartitionRoleResponse.ProtoReflect.Descriptor instead.
func (*CreatePartitionRoleResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{18}
}

func (x *CreatePartitionRoleResponse) GetData() *PartitionRoleObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type PartitionRoleObject struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PartitionRoleId string                 `protobuf:"bytes,1,opt,name=partition_role_id,json=partitionRoleId,proto3" json:"partition_role_id,omitempty"`
	PartitionId     string                 `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name            string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Properties      map[string]string      `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PartitionRoleObject) Reset() {
	*x = PartitionRoleObject{}
	mi := &file_partition_v1_partition_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionRoleObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRoleObject) ProtoMessage() {}

func (x *PartitionRoleObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRoleObject.ProtoReflect.Descriptor instead.
func (*PartitionRoleObject) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{19}
}

func (x *PartitionRoleObject) GetPartitionRoleId() string {
	if x != nil {
		return x.PartitionRoleId
	}
	return ""
}

func (x *PartitionRoleObject) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *PartitionRoleObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionRoleObject) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type RemovePartitionRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePartitionRoleRequest) Reset() {
	*x = RemovePartitionRoleRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePartitionRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePartitionRoleRequest) ProtoMessage() {}

func (x *RemovePartitionRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePartitionRoleRequest.ProtoReflect.Descriptor instead.
func (*RemovePartitionRoleRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{20}
}

func (x *RemovePartitionRoleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemovePartitionRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Succeeded     bool                   `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePartitionRoleResponse) Reset() {
	*x = RemovePartitionRoleResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePartitionRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePartitionRoleResponse) ProtoMessage() {}

func (x *RemovePartitionRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePartitionRoleResponse.ProtoReflect.Descriptor instead.
func (*RemovePartitionRoleResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{21}
}

func (x *RemovePartitionRoleResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

type ListPartitionRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartitionId   string                 `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPartitionRoleRequest) Reset() {
	*x = ListPartitionRoleRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartitionRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartitionRoleRequest) ProtoMessage() {}

func (x *ListPartitionRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartitionRoleRequest.ProtoReflect.Descriptor instead.
func (*ListPartitionRoleRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{22}
}

func (x *ListPartitionRoleRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

type ListPartitionRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          []*PartitionRoleObject `protobuf:"bytes,1,rep,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPartitionRoleResponse) Reset() {
	*x = ListPartitionRoleResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartitionRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartitionRoleResponse) ProtoMessage() {}

func (x *ListPartitionRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartitionRoleResponse.ProtoReflect.Descriptor instead.
func (*ListPartitionRoleResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{23}
}

func (x *ListPartitionRoleResponse) GetRole() []*PartitionRoleObject {
	if x != nil {
		return x.Role
	}
	return nil
}

type PageObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageId        string                 `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Html          string                 `protobuf:"bytes,3,opt,name=html,proto3" json:"html,omitempty"`
	State         v1.STATE               `protobuf:"varint,4,opt,name=state,proto3,enum=common.v1.STATE" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageObject) Reset() {
	*x = PageObject{}
	mi := &file_partition_v1_partition_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageObject) ProtoMessage() {}

func (x *PageObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageObject.ProtoReflect.Descriptor instead.
func (*PageObject) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{24}
}

func (x *PageObject) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *PageObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PageObject) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *PageObject) GetState() v1.STATE {
	if x != nil {
		return x.State
	}
	return v1.STATE(0)
}

type CreatePageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartitionId   string                 `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Html          string                 `protobuf:"bytes,3,opt,name=html,proto3" json:"html,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePageRequest) Reset() {
	*x = CreatePageRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePageRequest) ProtoMessage() {}

func (x *CreatePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePageRequest.ProtoReflect.Descriptor instead.
func (*CreatePageRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{25}
}

func (x *CreatePageRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *CreatePageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePageRequest) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

type CreatePageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *PageObject            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePageResponse) Reset() {
	*x = CreatePageResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePageResponse) ProtoMessage() {}

func (x *CreatePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePageResponse.ProtoReflect.Descriptor instead.
func (*CreatePageResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{26}
}

func (x *CreatePageResponse) GetData() *PageObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageId        string                 `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	PartitionId   string                 `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPageRequest) Reset() {
	*x = GetPageRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageRequest) ProtoMessage() {}

func (x *GetPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageRequest.ProtoReflect.Descriptor instead.
func (*GetPageRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{27}
}

func (x *GetPageRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *GetPageRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *GetPageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *PageObject            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPageResponse) Reset() {
	*x = GetPageResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageResponse) ProtoMessage() {}

func (x *GetPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageResponse.ProtoReflect.Descriptor instead.
func (*GetPageResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{28}
}

func (x *GetPageResponse) GetData() *PageObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type RemovePageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePageRequest) Reset() {
	*x = RemovePageRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePageRequest) ProtoMessage() {}

func (x *RemovePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePageRequest.ProtoReflect.Descriptor instead.
func (*RemovePageRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{29}
}

func (x *RemovePageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemovePageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Succeeded     bool                   `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePageResponse) Reset() {
	*x = RemovePageResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePageResponse) ProtoMessage() {}

func (x *RemovePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePageResponse.ProtoReflect.Descriptor instead.
func (*RemovePageResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{30}
}

func (x *RemovePageResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

type AccessObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessId      string                 `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	ProfileId     string                 `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	Partition     *PartitionObject       `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty"`
	State         v1.STATE               `protobuf:"varint,4,opt,name=state,proto3,enum=common.v1.STATE" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessObject) Reset() {
	*x = AccessObject{}
	mi := &file_partition_v1_partition_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessObject) ProtoMessage() {}

func (x *AccessObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessObject.ProtoReflect.Descriptor instead.
func (*AccessObject) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{31}
}

func (x *AccessObject) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *AccessObject) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *AccessObject) GetPartition() *PartitionObject {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *AccessObject) GetState() v1.STATE {
	if x != nil {
		return x.State
	}
	return v1.STATE(0)
}

type CreateAccessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Partition:
	//
	//	*CreateAccessRequest_PartitionId
	//	*CreateAccessRequest_ClientId
	Partition     isCreateAccessRequest_Partition `protobuf_oneof:"partition"`
	ProfileId     string                          `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAccessRequest) Reset() {
	*x = CreateAccessRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessRequest) ProtoMessage() {}

func (x *CreateAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessRequest.ProtoReflect.Descriptor instead.
func (*CreateAccessRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{32}
}

func (x *CreateAccessRequest) GetPartition() isCreateAccessRequest_Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *CreateAccessRequest) GetPartitionId() string {
	if x != nil {
		if x, ok := x.Partition.(*CreateAccessRequest_PartitionId); ok {
			return x.PartitionId
		}
	}
	return ""
}

func (x *CreateAccessRequest) GetClientId() string {
	if x != nil {
		if x, ok := x.Partition.(*CreateAccessRequest_ClientId); ok {
			return x.ClientId
		}
	}
	return ""
}

func (x *CreateAccessRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type isCreateAccessRequest_Partition interface {
	isCreateAccessRequest_Partition()
}

type CreateAccessRequest_PartitionId struct {
	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3,oneof"`
}

type CreateAccessRequest_ClientId struct {
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3,oneof"`
}

func (*CreateAccessRequest_PartitionId) isCreateAccessRequest_Partition() {}

func (*CreateAccessRequest_ClientId) isCreateAccessRequest_Partition() {}

type CreateAccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *AccessObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAccessResponse) Reset() {
	*x = CreateAccessResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessResponse) ProtoMessage() {}

func (x *CreateAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessResponse.ProtoReflect.Descriptor instead.
func (*CreateAccessResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{33}
}

func (x *CreateAccessResponse) GetData() *AccessObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAccessRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	AccessId string                 `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	// Types that are valid to be assigned to Partition:
	//
	//	*GetAccessRequest_PartitionId
	//	*GetAccessRequest_ClientId
	Partition     isGetAccessRequest_Partition `protobuf_oneof:"partition"`
	ProfileId     string                       `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccessRequest) Reset() {
	*x = GetAccessRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessRequest) ProtoMessage() {}

func (x *GetAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessRequest.ProtoReflect.Descriptor instead.
func (*GetAccessRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{34}
}

func (x *GetAccessRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *GetAccessRequest) GetPartition() isGetAccessRequest_Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *GetAccessRequest) GetPartitionId() string {
	if x != nil {
		if x, ok := x.Partition.(*GetAccessRequest_PartitionId); ok {
			return x.PartitionId
		}
	}
	return ""
}

func (x *GetAccessRequest) GetClientId() string {
	if x != nil {
		if x, ok := x.Partition.(*GetAccessRequest_ClientId); ok {
			return x.ClientId
		}
	}
	return ""
}

func (x *GetAccessRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type isGetAccessRequest_Partition interface {
	isGetAccessRequest_Partition()
}

type GetAccessRequest_PartitionId struct {
	PartitionId string `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3,oneof"`
}

type GetAccessRequest_ClientId struct {
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3,oneof"`
}

func (*GetAccessRequest_PartitionId) isGetAccessRequest_Partition() {}

func (*GetAccessRequest_ClientId) isGetAccessRequest_Partition() {}

type GetAccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *AccessObject          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccessResponse) Reset() {
	*x = GetAccessResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessResponse) ProtoMessage() {}

func (x *GetAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessResponse.ProtoReflect.Descriptor instead.
func (*GetAccessResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{35}
}

func (x *GetAccessResponse) GetData() *AccessObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type RemoveAccessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAccessRequest) Reset() {
	*x = RemoveAccessRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccessRequest) ProtoMessage() {}

func (x *RemoveAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccessRequest.ProtoReflect.Descriptor instead.
func (*RemoveAccessRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{36}
}

func (x *RemoveAccessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveAccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Succeeded     bool                   `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAccessResponse) Reset() {
	*x = RemoveAccessResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccessResponse) ProtoMessage() {}

func (x *RemoveAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccessResponse.ProtoReflect.Descriptor instead.
func (*RemoveAccessResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{37}
}

func (x *RemoveAccessResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

// Access Roles
type CreateAccessRoleRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccessId        string                 `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	PartitionRoleId string                 `protobuf:"bytes,2,opt,name=partition_role_id,json=partitionRoleId,proto3" json:"partition_role_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateAccessRoleRequest) Reset() {
	*x = CreateAccessRoleRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccessRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessRoleRequest) ProtoMessage() {}

func (x *CreateAccessRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessRoleRequest.ProtoReflect.Descriptor instead.
func (*CreateAccessRoleRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{38}
}

func (x *CreateAccessRoleRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *CreateAccessRoleRequest) GetPartitionRoleId() string {
	if x != nil {
		return x.PartitionRoleId
	}
	return ""
}

type CreateAccessRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *AccessRoleObject      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAccessRoleResponse) Reset() {
	*x = CreateAccessRoleResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccessRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessRoleResponse) ProtoMessage() {}

func (x *CreateAccessRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessRoleResponse.ProtoReflect.Descriptor instead.
func (*CreateAccessRoleResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{39}
}

func (x *CreateAccessRoleResponse) GetData() *AccessRoleObject {
	if x != nil {
		return x.Data
	}
	return nil
}

type AccessRoleObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessRoleId  string                 `protobuf:"bytes,1,opt,name=access_role_id,json=accessRoleId,proto3" json:"access_role_id,omitempty"`
	AccessId      string                 `protobuf:"bytes,2,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	Role          *PartitionRoleObject   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRoleObject) Reset() {
	*x = AccessRoleObject{}
	mi := &file_partition_v1_partition_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRoleObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRoleObject) ProtoMessage() {}

func (x *AccessRoleObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRoleObject.ProtoReflect.Descriptor instead.
func (*AccessRoleObject) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{40}
}

func (x *AccessRoleObject) GetAccessRoleId() string {
	if x != nil {
		return x.AccessRoleId
	}
	return ""
}

func (x *AccessRoleObject) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *AccessRoleObject) GetRole() *PartitionRoleObject {
	if x != nil {
		return x.Role
	}
	return nil
}

type RemoveAccessRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAccessRoleRequest) Reset() {
	*x = RemoveAccessRoleRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAccessRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccessRoleRequest) ProtoMessage() {}

func (x *RemoveAccessRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccessRoleRequest.ProtoReflect.Descriptor instead.
func (*RemoveAccessRoleRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{41}
}

func (x *RemoveAccessRoleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveAccessRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Succeeded     bool                   `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAccessRoleResponse) Reset() {
	*x = RemoveAccessRoleResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAccessRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccessRoleResponse) ProtoMessage() {}

func (x *RemoveAccessRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccessRoleResponse.ProtoReflect.Descriptor instead.
func (*RemoveAccessRoleResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{42}
}

func (x *RemoveAccessRoleResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

type ListAccessRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessId      string                 `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccessRoleRequest) Reset() {
	*x = ListAccessRoleRequest{}
	mi := &file_partition_v1_partition_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccessRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessRoleRequest) ProtoMessage() {}

func (x *ListAccessRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessRoleRequest.ProtoReflect.Descriptor instead.
func (*ListAccessRoleRequest) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{43}
}

func (x *ListAccessRoleRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

type ListAccessRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          []*AccessRoleObject    `protobuf:"bytes,1,rep,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccessRoleResponse) Reset() {
	*x = ListAccessRoleResponse{}
	mi := &file_partition_v1_partition_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccessRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessRoleResponse) ProtoMessage() {}

func (x *ListAccessRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_v1_partition_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessRoleResponse.ProtoReflect.Descriptor instead.
func (*ListAccessRoleResponse) Descriptor() ([]byte, []int) {
	return file_partition_v1_partition_proto_rawDescGZIP(), []int{44}
}

func (x *ListAccessRoleResponse) GetRole() []*AccessRoleObject {
	if x != nil {
		return x.Role
	}
	return nil
}

var File_partition_v1_partition_proto protoreflect.FileDescriptor

var file_partition_v1_partition_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf4, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x0a, 0x18, 0xf4, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x02, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba,
	0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05,
	0x10, 0x0a, 0x18, 0xfa, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03,
	0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33,
	0x2c, 0x32, 0x30, 0x7d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x02,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04,
	0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x0a, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x42, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xb3, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xee, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18,
	0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x0a, 0x18,
	0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xcf, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16,
	0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d,
	0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x0a, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x54, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xb5, 0x03, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x72, 0x05, 0x10, 0x0a, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03,
	0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x54, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x47, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72,
	0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d,
	0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18,
	0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x1a, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x22, 0x5a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x52, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x04, 0x18, 0x88, 0x27, 0x52,
	0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x92, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16,
	0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d,
	0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x04, 0x18, 0x88, 0x27, 0x52, 0x04, 0x68, 0x74,
	0x6d, 0x6c, 0x22, 0x42, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0xd0,
	0x01, 0x01, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0xd0, 0x01, 0x01,
	0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xd0, 0x01, 0x01, 0x72, 0x04, 0x10, 0x03, 0x18,
	0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16,
	0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d,
	0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x12, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0xe9,
	0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba,
	0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0xd0, 0x01, 0x01,
	0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0xd0,
	0x01, 0x01, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72,
	0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d,
	0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x42, 0x12, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x00, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa6,
	0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0xd0, 0x01, 0x01, 0x72, 0x16,
	0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d,
	0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0xd0, 0x01, 0x01, 0x72, 0x16,
	0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d,
	0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0xd0, 0x01, 0x01,
	0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0xd0, 0x01, 0x01,
	0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x00, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x13,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x34, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03,
	0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33,
	0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x46,
	0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x22, 0x51, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x32, 0xf2, 0x10, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x62, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x69,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x21,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x3a, 0x01, 0x2a,
	0x22, 0x07, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12,
	0x0f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x7a, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x32, 0x0f, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x7f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x30, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x28,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x61, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0c, 0x2a, 0x0a, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x69, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x3a,
	0x01, 0x2a, 0x22, 0x07, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x2a, 0x0c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xcf, 0x03, 0x92, 0x41, 0x84, 0x02, 0x12, 0x71, 0x0a,
	0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x41, 0x6e, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x20, 0x4c, 0x74, 0x64, 0x12, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x74, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c,
	0x6f, 0x73, 0x74, 0x69, 0x64, 0x1a, 0x14, 0x69, 0x6e, 0x66, 0x6f, 0x40, 0x61, 0x6e, 0x74, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x03, 0x31, 0x2e, 0x30,
	0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12,
	0x00, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa,
	0x02, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_partition_v1_partition_proto_rawDescOnce sync.Once
	file_partition_v1_partition_proto_rawDescData = file_partition_v1_partition_proto_rawDesc
)

func file_partition_v1_partition_proto_rawDescGZIP() []byte {
	file_partition_v1_partition_proto_rawDescOnce.Do(func() {
		file_partition_v1_partition_proto_rawDescData = protoimpl.X.CompressGZIP(file_partition_v1_partition_proto_rawDescData)
	})
	return file_partition_v1_partition_proto_rawDescData
}

var file_partition_v1_partition_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_partition_v1_partition_proto_goTypes = []any{
	(*TenantObject)(nil),                // 0: partition.v1.TenantObject
	(*PartitionCreateRequest)(nil),      // 1: partition.v1.PartitionCreateRequest
	(*GetTenantRequest)(nil),            // 2: partition.v1.GetTenantRequest
	(*GetTenantResponse)(nil),           // 3: partition.v1.GetTenantResponse
	(*ListTenantRequest)(nil),           // 4: partition.v1.ListTenantRequest
	(*ListTenantResponse)(nil),          // 5: partition.v1.ListTenantResponse
	(*CreateTenantRequest)(nil),         // 6: partition.v1.CreateTenantRequest
	(*CreateTenantResponse)(nil),        // 7: partition.v1.CreateTenantResponse
	(*GetPartitionRequest)(nil),         // 8: partition.v1.GetPartitionRequest
	(*GetPartitionResponse)(nil),        // 9: partition.v1.GetPartitionResponse
	(*ListPartitionRequest)(nil),        // 10: partition.v1.ListPartitionRequest
	(*ListPartitionResponse)(nil),       // 11: partition.v1.ListPartitionResponse
	(*CreatePartitionRequest)(nil),      // 12: partition.v1.CreatePartitionRequest
	(*CreatePartitionResponse)(nil),     // 13: partition.v1.CreatePartitionResponse
	(*UpdatePartitionRequest)(nil),      // 14: partition.v1.UpdatePartitionRequest
	(*UpdatePartitionResponse)(nil),     // 15: partition.v1.UpdatePartitionResponse
	(*PartitionObject)(nil),             // 16: partition.v1.PartitionObject
	(*CreatePartitionRoleRequest)(nil),  // 17: partition.v1.CreatePartitionRoleRequest
	(*CreatePartitionRoleResponse)(nil), // 18: partition.v1.CreatePartitionRoleResponse
	(*PartitionRoleObject)(nil),         // 19: partition.v1.PartitionRoleObject
	(*RemovePartitionRoleRequest)(nil),  // 20: partition.v1.RemovePartitionRoleRequest
	(*RemovePartitionRoleResponse)(nil), // 21: partition.v1.RemovePartitionRoleResponse
	(*ListPartitionRoleRequest)(nil),    // 22: partition.v1.ListPartitionRoleRequest
	(*ListPartitionRoleResponse)(nil),   // 23: partition.v1.ListPartitionRoleResponse
	(*PageObject)(nil),                  // 24: partition.v1.PageObject
	(*CreatePageRequest)(nil),           // 25: partition.v1.CreatePageRequest
	(*CreatePageResponse)(nil),          // 26: partition.v1.CreatePageResponse
	(*GetPageRequest)(nil),              // 27: partition.v1.GetPageRequest
	(*GetPageResponse)(nil),             // 28: partition.v1.GetPageResponse
	(*RemovePageRequest)(nil),           // 29: partition.v1.RemovePageRequest
	(*RemovePageResponse)(nil),          // 30: partition.v1.RemovePageResponse
	(*AccessObject)(nil),                // 31: partition.v1.AccessObject
	(*CreateAccessRequest)(nil),         // 32: partition.v1.CreateAccessRequest
	(*CreateAccessResponse)(nil),        // 33: partition.v1.CreateAccessResponse
	(*GetAccessRequest)(nil),            // 34: partition.v1.GetAccessRequest
	(*GetAccessResponse)(nil),           // 35: partition.v1.GetAccessResponse
	(*RemoveAccessRequest)(nil),         // 36: partition.v1.RemoveAccessRequest
	(*RemoveAccessResponse)(nil),        // 37: partition.v1.RemoveAccessResponse
	(*CreateAccessRoleRequest)(nil),     // 38: partition.v1.CreateAccessRoleRequest
	(*CreateAccessRoleResponse)(nil),    // 39: partition.v1.CreateAccessRoleResponse
	(*AccessRoleObject)(nil),            // 40: partition.v1.AccessRoleObject
	(*RemoveAccessRoleRequest)(nil),     // 41: partition.v1.RemoveAccessRoleRequest
	(*RemoveAccessRoleResponse)(nil),    // 42: partition.v1.RemoveAccessRoleResponse
	(*ListAccessRoleRequest)(nil),       // 43: partition.v1.ListAccessRoleRequest
	(*ListAccessRoleResponse)(nil),      // 44: partition.v1.ListAccessRoleResponse
	nil,                                 // 45: partition.v1.TenantObject.PropertiesEntry
	nil,                                 // 46: partition.v1.PartitionCreateRequest.PropertiesEntry
	nil,                                 // 47: partition.v1.ListTenantRequest.ExtrasEntry
	nil,                                 // 48: partition.v1.CreateTenantRequest.PropertiesEntry
	nil,                                 // 49: partition.v1.ListPartitionRequest.ExtrasEntry
	nil,                                 // 50: partition.v1.CreatePartitionRequest.PropertiesEntry
	nil,                                 // 51: partition.v1.UpdatePartitionRequest.PropertiesEntry
	nil,                                 // 52: partition.v1.PartitionObject.PropertiesEntry
	nil,                                 // 53: partition.v1.CreatePartitionRoleRequest.PropertiesEntry
	nil,                                 // 54: partition.v1.PartitionRoleObject.PropertiesEntry
	(v1.STATE)(0),                       // 55: common.v1.STATE
}
var file_partition_v1_partition_proto_depIdxs = []int32{
	45, // 0: partition.v1.TenantObject.properties:type_name -> partition.v1.TenantObject.PropertiesEntry
	46, // 1: partition.v1.PartitionCreateRequest.properties:type_name -> partition.v1.PartitionCreateRequest.PropertiesEntry
	0,  // 2: partition.v1.GetTenantResponse.data:type_name -> partition.v1.TenantObject
	47, // 3: partition.v1.ListTenantRequest.extras:type_name -> partition.v1.ListTenantRequest.ExtrasEntry
	0,  // 4: partition.v1.ListTenantResponse.data:type_name -> partition.v1.TenantObject
	48, // 5: partition.v1.CreateTenantRequest.properties:type_name -> partition.v1.CreateTenantRequest.PropertiesEntry
	0,  // 6: partition.v1.CreateTenantResponse.data:type_name -> partition.v1.TenantObject
	16, // 7: partition.v1.GetPartitionResponse.data:type_name -> partition.v1.PartitionObject
	49, // 8: partition.v1.ListPartitionRequest.extras:type_name -> partition.v1.ListPartitionRequest.ExtrasEntry
	16, // 9: partition.v1.ListPartitionResponse.data:type_name -> partition.v1.PartitionObject
	50, // 10: partition.v1.CreatePartitionRequest.properties:type_name -> partition.v1.CreatePartitionRequest.PropertiesEntry
	16, // 11: partition.v1.CreatePartitionResponse.data:type_name -> partition.v1.PartitionObject
	55, // 12: partition.v1.UpdatePartitionRequest.state:type_name -> common.v1.STATE
	51, // 13: partition.v1.UpdatePartitionRequest.properties:type_name -> partition.v1.UpdatePartitionRequest.PropertiesEntry
	16, // 14: partition.v1.UpdatePartitionResponse.data:type_name -> partition.v1.PartitionObject
	55, // 15: partition.v1.PartitionObject.state:type_name -> common.v1.STATE
	52, // 16: partition.v1.PartitionObject.properties:type_name -> partition.v1.PartitionObject.PropertiesEntry
	53, // 17: partition.v1.CreatePartitionRoleRequest.properties:type_name -> partition.v1.CreatePartitionRoleRequest.PropertiesEntry
	19, // 18: partition.v1.CreatePartitionRoleResponse.data:type_name -> partition.v1.PartitionRoleObject
	54, // 19: partition.v1.PartitionRoleObject.properties:type_name -> partition.v1.PartitionRoleObject.PropertiesEntry
	19, // 20: partition.v1.ListPartitionRoleResponse.role:type_name -> partition.v1.PartitionRoleObject
	55, // 21: partition.v1.PageObject.state:type_name -> common.v1.STATE
	24, // 22: partition.v1.CreatePageResponse.data:type_name -> partition.v1.PageObject
	24, // 23: partition.v1.GetPageResponse.data:type_name -> partition.v1.PageObject
	16, // 24: partition.v1.AccessObject.partition:type_name -> partition.v1.PartitionObject
	55, // 25: partition.v1.AccessObject.state:type_name -> common.v1.STATE
	31, // 26: partition.v1.CreateAccessResponse.data:type_name -> partition.v1.AccessObject
	31, // 27: partition.v1.GetAccessResponse.data:type_name -> partition.v1.AccessObject
	40, // 28: partition.v1.CreateAccessRoleResponse.data:type_name -> partition.v1.AccessRoleObject
	19, // 29: partition.v1.AccessRoleObject.role:type_name -> partition.v1.PartitionRoleObject
	40, // 30: partition.v1.ListAccessRoleResponse.role:type_name -> partition.v1.AccessRoleObject
	2,  // 31: partition.v1.PartitionService.GetTenant:input_type -> partition.v1.GetTenantRequest
	4,  // 32: partition.v1.PartitionService.ListTenant:input_type -> partition.v1.ListTenantRequest
	6,  // 33: partition.v1.PartitionService.CreateTenant:input_type -> partition.v1.CreateTenantRequest
	10, // 34: partition.v1.PartitionService.ListPartition:input_type -> partition.v1.ListPartitionRequest
	12, // 35: partition.v1.PartitionService.CreatePartition:input_type -> partition.v1.CreatePartitionRequest
	8,  // 36: partition.v1.PartitionService.GetPartition:input_type -> partition.v1.GetPartitionRequest
	14, // 37: partition.v1.PartitionService.UpdatePartition:input_type -> partition.v1.UpdatePartitionRequest
	17, // 38: partition.v1.PartitionService.CreatePartitionRole:input_type -> partition.v1.CreatePartitionRoleRequest
	22, // 39: partition.v1.PartitionService.ListPartitionRole:input_type -> partition.v1.ListPartitionRoleRequest
	20, // 40: partition.v1.PartitionService.RemovePartitionRole:input_type -> partition.v1.RemovePartitionRoleRequest
	25, // 41: partition.v1.PartitionService.CreatePage:input_type -> partition.v1.CreatePageRequest
	27, // 42: partition.v1.PartitionService.GetPage:input_type -> partition.v1.GetPageRequest
	29, // 43: partition.v1.PartitionService.RemovePage:input_type -> partition.v1.RemovePageRequest
	32, // 44: partition.v1.PartitionService.CreateAccess:input_type -> partition.v1.CreateAccessRequest
	34, // 45: partition.v1.PartitionService.GetAccess:input_type -> partition.v1.GetAccessRequest
	36, // 46: partition.v1.PartitionService.RemoveAccess:input_type -> partition.v1.RemoveAccessRequest
	38, // 47: partition.v1.PartitionService.CreateAccessRole:input_type -> partition.v1.CreateAccessRoleRequest
	43, // 48: partition.v1.PartitionService.ListAccessRole:input_type -> partition.v1.ListAccessRoleRequest
	41, // 49: partition.v1.PartitionService.RemoveAccessRole:input_type -> partition.v1.RemoveAccessRoleRequest
	3,  // 50: partition.v1.PartitionService.GetTenant:output_type -> partition.v1.GetTenantResponse
	5,  // 51: partition.v1.PartitionService.ListTenant:output_type -> partition.v1.ListTenantResponse
	7,  // 52: partition.v1.PartitionService.CreateTenant:output_type -> partition.v1.CreateTenantResponse
	11, // 53: partition.v1.PartitionService.ListPartition:output_type -> partition.v1.ListPartitionResponse
	13, // 54: partition.v1.PartitionService.CreatePartition:output_type -> partition.v1.CreatePartitionResponse
	9,  // 55: partition.v1.PartitionService.GetPartition:output_type -> partition.v1.GetPartitionResponse
	15, // 56: partition.v1.PartitionService.UpdatePartition:output_type -> partition.v1.UpdatePartitionResponse
	18, // 57: partition.v1.PartitionService.CreatePartitionRole:output_type -> partition.v1.CreatePartitionRoleResponse
	23, // 58: partition.v1.PartitionService.ListPartitionRole:output_type -> partition.v1.ListPartitionRoleResponse
	21, // 59: partition.v1.PartitionService.RemovePartitionRole:output_type -> partition.v1.RemovePartitionRoleResponse
	26, // 60: partition.v1.PartitionService.CreatePage:output_type -> partition.v1.CreatePageResponse
	28, // 61: partition.v1.PartitionService.GetPage:output_type -> partition.v1.GetPageResponse
	30, // 62: partition.v1.PartitionService.RemovePage:output_type -> partition.v1.RemovePageResponse
	33, // 63: partition.v1.PartitionService.CreateAccess:output_type -> partition.v1.CreateAccessResponse
	35, // 64: partition.v1.PartitionService.GetAccess:output_type -> partition.v1.GetAccessResponse
	37, // 65: partition.v1.PartitionService.RemoveAccess:output_type -> partition.v1.RemoveAccessResponse
	39, // 66: partition.v1.PartitionService.CreateAccessRole:output_type -> partition.v1.CreateAccessRoleResponse
	44, // 67: partition.v1.PartitionService.ListAccessRole:output_type -> partition.v1.ListAccessRoleResponse
	42, // 68: partition.v1.PartitionService.RemoveAccessRole:output_type -> partition.v1.RemoveAccessRoleResponse
	50, // [50:69] is the sub-list for method output_type
	31, // [31:50] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_partition_v1_partition_proto_init() }
func file_partition_v1_partition_proto_init() {
	if File_partition_v1_partition_proto != nil {
		return
	}
	file_partition_v1_partition_proto_msgTypes[32].OneofWrappers = []any{
		(*CreateAccessRequest_PartitionId)(nil),
		(*CreateAccessRequest_ClientId)(nil),
	}
	file_partition_v1_partition_proto_msgTypes[34].OneofWrappers = []any{
		(*GetAccessRequest_PartitionId)(nil),
		(*GetAccessRequest_ClientId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_partition_v1_partition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_partition_v1_partition_proto_goTypes,
		DependencyIndexes: file_partition_v1_partition_proto_depIdxs,
		MessageInfos:      file_partition_v1_partition_proto_msgTypes,
	}.Build()
	File_partition_v1_partition_proto = out.File
	file_partition_v1_partition_proto_rawDesc = nil
	file_partition_v1_partition_proto_goTypes = nil
	file_partition_v1_partition_proto_depIdxs = nil
}
