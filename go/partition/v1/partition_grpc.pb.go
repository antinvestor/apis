// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: partition/v1/partition.proto

package partitionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartitionService_GetTenant_FullMethodName           = "/partition.v1.PartitionService/GetTenant"
	PartitionService_ListTenant_FullMethodName          = "/partition.v1.PartitionService/ListTenant"
	PartitionService_CreateTenant_FullMethodName        = "/partition.v1.PartitionService/CreateTenant"
	PartitionService_UpdateTenant_FullMethodName        = "/partition.v1.PartitionService/UpdateTenant"
	PartitionService_ListPartition_FullMethodName       = "/partition.v1.PartitionService/ListPartition"
	PartitionService_CreatePartition_FullMethodName     = "/partition.v1.PartitionService/CreatePartition"
	PartitionService_GetPartition_FullMethodName        = "/partition.v1.PartitionService/GetPartition"
	PartitionService_GetPartitionParents_FullMethodName = "/partition.v1.PartitionService/GetPartitionParents"
	PartitionService_UpdatePartition_FullMethodName     = "/partition.v1.PartitionService/UpdatePartition"
	PartitionService_CreatePartitionRole_FullMethodName = "/partition.v1.PartitionService/CreatePartitionRole"
	PartitionService_ListPartitionRole_FullMethodName   = "/partition.v1.PartitionService/ListPartitionRole"
	PartitionService_RemovePartitionRole_FullMethodName = "/partition.v1.PartitionService/RemovePartitionRole"
	PartitionService_CreatePage_FullMethodName          = "/partition.v1.PartitionService/CreatePage"
	PartitionService_GetPage_FullMethodName             = "/partition.v1.PartitionService/GetPage"
	PartitionService_RemovePage_FullMethodName          = "/partition.v1.PartitionService/RemovePage"
	PartitionService_CreateAccess_FullMethodName        = "/partition.v1.PartitionService/CreateAccess"
	PartitionService_GetAccess_FullMethodName           = "/partition.v1.PartitionService/GetAccess"
	PartitionService_RemoveAccess_FullMethodName        = "/partition.v1.PartitionService/RemoveAccess"
	PartitionService_CreateAccessRole_FullMethodName    = "/partition.v1.PartitionService/CreateAccessRole"
	PartitionService_ListAccessRole_FullMethodName      = "/partition.v1.PartitionService/ListAccessRole"
	PartitionService_RemoveAccessRole_FullMethodName    = "/partition.v1.PartitionService/RemoveAccessRole"
)

// PartitionServiceClient is the client API for PartitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PartitionService provides multi-tenancy and data isolation.
// All RPCs require authentication via Bearer token.
type PartitionServiceClient interface {
	// GetTenant retrieves a tenant by ID.
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error)
	// ListTenant retrieves all tenants matching criteria.
	ListTenant(ctx context.Context, in *ListTenantRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListTenantResponse], error)
	// CreateTenant creates a new tenant.
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	// UpdateTenant updates an existing tenant.
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error)
	// ListPartition retrieves all partitions matching criteria.
	ListPartition(ctx context.Context, in *ListPartitionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListPartitionResponse], error)
	// CreatePartition creates a new partition.
	CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionResponse, error)
	// GetPartition retrieves a partition by ID.
	GetPartition(ctx context.Context, in *GetPartitionRequest, opts ...grpc.CallOption) (*GetPartitionResponse, error)
	// GetPartitionParents retrieves the parent hierarchy.
	GetPartitionParents(ctx context.Context, in *GetPartitionParentsRequest, opts ...grpc.CallOption) (*GetPartitionParentsResponse, error)
	// UpdatePartition updates an existing partition.
	UpdatePartition(ctx context.Context, in *UpdatePartitionRequest, opts ...grpc.CallOption) (*UpdatePartitionResponse, error)
	// CreatePartitionRole creates a role within a partition.
	CreatePartitionRole(ctx context.Context, in *CreatePartitionRoleRequest, opts ...grpc.CallOption) (*CreatePartitionRoleResponse, error)
	// ListPartitionRole retrieves all roles for a partition.
	ListPartitionRole(ctx context.Context, in *ListPartitionRoleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListPartitionRoleResponse], error)
	// RemovePartitionRole deletes a partition role.
	RemovePartitionRole(ctx context.Context, in *RemovePartitionRoleRequest, opts ...grpc.CallOption) (*RemovePartitionRoleResponse, error)
	// CreatePage creates a custom UI page for a partition.
	CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error)
	// GetPage retrieves a custom page.
	GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error)
	// RemovePage deletes a custom page.
	RemovePage(ctx context.Context, in *RemovePageRequest, opts ...grpc.CallOption) (*RemovePageResponse, error)
	// CreateAccess grants a profile access to a partition.
	CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*CreateAccessResponse, error)
	// GetAccess retrieves an access grant.
	GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*GetAccessResponse, error)
	// RemoveAccess revokes a profile's access to a partition.
	RemoveAccess(ctx context.Context, in *RemoveAccessRequest, opts ...grpc.CallOption) (*RemoveAccessResponse, error)
	// CreateAccessRole assigns a role to an access grant.
	CreateAccessRole(ctx context.Context, in *CreateAccessRoleRequest, opts ...grpc.CallOption) (*CreateAccessRoleResponse, error)
	// ListAccessRole retrieves all roles for an access grant.
	ListAccessRole(ctx context.Context, in *ListAccessRoleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAccessRoleResponse], error)
	// RemoveAccessRole removes a role from an access grant.
	RemoveAccessRole(ctx context.Context, in *RemoveAccessRoleRequest, opts ...grpc.CallOption) (*RemoveAccessRoleResponse, error)
}

type partitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartitionServiceClient(cc grpc.ClientConnInterface) PartitionServiceClient {
	return &partitionServiceClient{cc}
}

func (c *partitionServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, PartitionService_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ListTenant(ctx context.Context, in *ListTenantRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListTenantResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PartitionService_ServiceDesc.Streams[0], PartitionService_ListTenant_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListTenantRequest, ListTenantResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartitionService_ListTenantClient = grpc.ServerStreamingClient[ListTenantResponse]

func (c *partitionServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, PartitionService_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTenantResponse)
	err := c.cc.Invoke(ctx, PartitionService_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ListPartition(ctx context.Context, in *ListPartitionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListPartitionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PartitionService_ServiceDesc.Streams[1], PartitionService_ListPartition_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListPartitionRequest, ListPartitionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartitionService_ListPartitionClient = grpc.ServerStreamingClient[ListPartitionResponse]

func (c *partitionServiceClient) CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePartitionResponse)
	err := c.cc.Invoke(ctx, PartitionService_CreatePartition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetPartition(ctx context.Context, in *GetPartitionRequest, opts ...grpc.CallOption) (*GetPartitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartitionResponse)
	err := c.cc.Invoke(ctx, PartitionService_GetPartition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetPartitionParents(ctx context.Context, in *GetPartitionParentsRequest, opts ...grpc.CallOption) (*GetPartitionParentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartitionParentsResponse)
	err := c.cc.Invoke(ctx, PartitionService_GetPartitionParents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) UpdatePartition(ctx context.Context, in *UpdatePartitionRequest, opts ...grpc.CallOption) (*UpdatePartitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePartitionResponse)
	err := c.cc.Invoke(ctx, PartitionService_UpdatePartition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) CreatePartitionRole(ctx context.Context, in *CreatePartitionRoleRequest, opts ...grpc.CallOption) (*CreatePartitionRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePartitionRoleResponse)
	err := c.cc.Invoke(ctx, PartitionService_CreatePartitionRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ListPartitionRole(ctx context.Context, in *ListPartitionRoleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListPartitionRoleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PartitionService_ServiceDesc.Streams[2], PartitionService_ListPartitionRole_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListPartitionRoleRequest, ListPartitionRoleResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartitionService_ListPartitionRoleClient = grpc.ServerStreamingClient[ListPartitionRoleResponse]

func (c *partitionServiceClient) RemovePartitionRole(ctx context.Context, in *RemovePartitionRoleRequest, opts ...grpc.CallOption) (*RemovePartitionRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePartitionRoleResponse)
	err := c.cc.Invoke(ctx, PartitionService_RemovePartitionRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePageResponse)
	err := c.cc.Invoke(ctx, PartitionService_CreatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPageResponse)
	err := c.cc.Invoke(ctx, PartitionService_GetPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) RemovePage(ctx context.Context, in *RemovePageRequest, opts ...grpc.CallOption) (*RemovePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePageResponse)
	err := c.cc.Invoke(ctx, PartitionService_RemovePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*CreateAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccessResponse)
	err := c.cc.Invoke(ctx, PartitionService_CreateAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*GetAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccessResponse)
	err := c.cc.Invoke(ctx, PartitionService_GetAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) RemoveAccess(ctx context.Context, in *RemoveAccessRequest, opts ...grpc.CallOption) (*RemoveAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAccessResponse)
	err := c.cc.Invoke(ctx, PartitionService_RemoveAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) CreateAccessRole(ctx context.Context, in *CreateAccessRoleRequest, opts ...grpc.CallOption) (*CreateAccessRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccessRoleResponse)
	err := c.cc.Invoke(ctx, PartitionService_CreateAccessRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ListAccessRole(ctx context.Context, in *ListAccessRoleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAccessRoleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PartitionService_ServiceDesc.Streams[3], PartitionService_ListAccessRole_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListAccessRoleRequest, ListAccessRoleResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartitionService_ListAccessRoleClient = grpc.ServerStreamingClient[ListAccessRoleResponse]

func (c *partitionServiceClient) RemoveAccessRole(ctx context.Context, in *RemoveAccessRoleRequest, opts ...grpc.CallOption) (*RemoveAccessRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAccessRoleResponse)
	err := c.cc.Invoke(ctx, PartitionService_RemoveAccessRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartitionServiceServer is the server API for PartitionService service.
// All implementations must embed UnimplementedPartitionServiceServer
// for forward compatibility.
//
// PartitionService provides multi-tenancy and data isolation.
// All RPCs require authentication via Bearer token.
type PartitionServiceServer interface {
	// GetTenant retrieves a tenant by ID.
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error)
	// ListTenant retrieves all tenants matching criteria.
	ListTenant(*ListTenantRequest, grpc.ServerStreamingServer[ListTenantResponse]) error
	// CreateTenant creates a new tenant.
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	// UpdateTenant updates an existing tenant.
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error)
	// ListPartition retrieves all partitions matching criteria.
	ListPartition(*ListPartitionRequest, grpc.ServerStreamingServer[ListPartitionResponse]) error
	// CreatePartition creates a new partition.
	CreatePartition(context.Context, *CreatePartitionRequest) (*CreatePartitionResponse, error)
	// GetPartition retrieves a partition by ID.
	GetPartition(context.Context, *GetPartitionRequest) (*GetPartitionResponse, error)
	// GetPartitionParents retrieves the parent hierarchy.
	GetPartitionParents(context.Context, *GetPartitionParentsRequest) (*GetPartitionParentsResponse, error)
	// UpdatePartition updates an existing partition.
	UpdatePartition(context.Context, *UpdatePartitionRequest) (*UpdatePartitionResponse, error)
	// CreatePartitionRole creates a role within a partition.
	CreatePartitionRole(context.Context, *CreatePartitionRoleRequest) (*CreatePartitionRoleResponse, error)
	// ListPartitionRole retrieves all roles for a partition.
	ListPartitionRole(*ListPartitionRoleRequest, grpc.ServerStreamingServer[ListPartitionRoleResponse]) error
	// RemovePartitionRole deletes a partition role.
	RemovePartitionRole(context.Context, *RemovePartitionRoleRequest) (*RemovePartitionRoleResponse, error)
	// CreatePage creates a custom UI page for a partition.
	CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error)
	// GetPage retrieves a custom page.
	GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error)
	// RemovePage deletes a custom page.
	RemovePage(context.Context, *RemovePageRequest) (*RemovePageResponse, error)
	// CreateAccess grants a profile access to a partition.
	CreateAccess(context.Context, *CreateAccessRequest) (*CreateAccessResponse, error)
	// GetAccess retrieves an access grant.
	GetAccess(context.Context, *GetAccessRequest) (*GetAccessResponse, error)
	// RemoveAccess revokes a profile's access to a partition.
	RemoveAccess(context.Context, *RemoveAccessRequest) (*RemoveAccessResponse, error)
	// CreateAccessRole assigns a role to an access grant.
	CreateAccessRole(context.Context, *CreateAccessRoleRequest) (*CreateAccessRoleResponse, error)
	// ListAccessRole retrieves all roles for an access grant.
	ListAccessRole(*ListAccessRoleRequest, grpc.ServerStreamingServer[ListAccessRoleResponse]) error
	// RemoveAccessRole removes a role from an access grant.
	RemoveAccessRole(context.Context, *RemoveAccessRoleRequest) (*RemoveAccessRoleResponse, error)
	mustEmbedUnimplementedPartitionServiceServer()
}

// UnimplementedPartitionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartitionServiceServer struct{}

func (UnimplementedPartitionServiceServer) GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedPartitionServiceServer) ListTenant(*ListTenantRequest, grpc.ServerStreamingServer[ListTenantResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListTenant not implemented")
}
func (UnimplementedPartitionServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedPartitionServiceServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedPartitionServiceServer) ListPartition(*ListPartitionRequest, grpc.ServerStreamingServer[ListPartitionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListPartition not implemented")
}
func (UnimplementedPartitionServiceServer) CreatePartition(context.Context, *CreatePartitionRequest) (*CreatePartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (UnimplementedPartitionServiceServer) GetPartition(context.Context, *GetPartitionRequest) (*GetPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartition not implemented")
}
func (UnimplementedPartitionServiceServer) GetPartitionParents(context.Context, *GetPartitionParentsRequest) (*GetPartitionParentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionParents not implemented")
}
func (UnimplementedPartitionServiceServer) UpdatePartition(context.Context, *UpdatePartitionRequest) (*UpdatePartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartition not implemented")
}
func (UnimplementedPartitionServiceServer) CreatePartitionRole(context.Context, *CreatePartitionRoleRequest) (*CreatePartitionRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartitionRole not implemented")
}
func (UnimplementedPartitionServiceServer) ListPartitionRole(*ListPartitionRoleRequest, grpc.ServerStreamingServer[ListPartitionRoleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListPartitionRole not implemented")
}
func (UnimplementedPartitionServiceServer) RemovePartitionRole(context.Context, *RemovePartitionRoleRequest) (*RemovePartitionRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePartitionRole not implemented")
}
func (UnimplementedPartitionServiceServer) CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedPartitionServiceServer) GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedPartitionServiceServer) RemovePage(context.Context, *RemovePageRequest) (*RemovePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePage not implemented")
}
func (UnimplementedPartitionServiceServer) CreateAccess(context.Context, *CreateAccessRequest) (*CreateAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccess not implemented")
}
func (UnimplementedPartitionServiceServer) GetAccess(context.Context, *GetAccessRequest) (*GetAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccess not implemented")
}
func (UnimplementedPartitionServiceServer) RemoveAccess(context.Context, *RemoveAccessRequest) (*RemoveAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccess not implemented")
}
func (UnimplementedPartitionServiceServer) CreateAccessRole(context.Context, *CreateAccessRoleRequest) (*CreateAccessRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessRole not implemented")
}
func (UnimplementedPartitionServiceServer) ListAccessRole(*ListAccessRoleRequest, grpc.ServerStreamingServer[ListAccessRoleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListAccessRole not implemented")
}
func (UnimplementedPartitionServiceServer) RemoveAccessRole(context.Context, *RemoveAccessRoleRequest) (*RemoveAccessRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccessRole not implemented")
}
func (UnimplementedPartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {}
func (UnimplementedPartitionServiceServer) testEmbeddedByValue()                          {}

// UnsafePartitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartitionServiceServer will
// result in compilation errors.
type UnsafePartitionServiceServer interface {
	mustEmbedUnimplementedPartitionServiceServer()
}

func RegisterPartitionServiceServer(s grpc.ServiceRegistrar, srv PartitionServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartitionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartitionService_ServiceDesc, srv)
}

func _PartitionService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ListTenant_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTenantRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartitionServiceServer).ListTenant(m, &grpc.GenericServerStream[ListTenantRequest, ListTenantResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartitionService_ListTenantServer = grpc.ServerStreamingServer[ListTenantResponse]

func _PartitionService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ListPartition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPartitionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartitionServiceServer).ListPartition(m, &grpc.GenericServerStream[ListPartitionRequest, ListPartitionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartitionService_ListPartitionServer = grpc.ServerStreamingServer[ListPartitionResponse]

func _PartitionService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_CreatePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreatePartition(ctx, req.(*CreatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_GetPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetPartition(ctx, req.(*GetPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetPartitionParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionParentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetPartitionParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_GetPartitionParents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetPartitionParents(ctx, req.(*GetPartitionParentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_UpdatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).UpdatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_UpdatePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).UpdatePartition(ctx, req.(*UpdatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_CreatePartitionRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartitionRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreatePartitionRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_CreatePartitionRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreatePartitionRole(ctx, req.(*CreatePartitionRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ListPartitionRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPartitionRoleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartitionServiceServer).ListPartitionRole(m, &grpc.GenericServerStream[ListPartitionRoleRequest, ListPartitionRoleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartitionService_ListPartitionRoleServer = grpc.ServerStreamingServer[ListPartitionRoleResponse]

func _PartitionService_RemovePartitionRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePartitionRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemovePartitionRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_RemovePartitionRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemovePartitionRole(ctx, req.(*RemovePartitionRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreatePage(ctx, req.(*CreatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_GetPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetPage(ctx, req.(*GetPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_RemovePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemovePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_RemovePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemovePage(ctx, req.(*RemovePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_CreateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_CreateAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreateAccess(ctx, req.(*CreateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_GetAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetAccess(ctx, req.(*GetAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_RemoveAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemoveAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_RemoveAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemoveAccess(ctx, req.(*RemoveAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_CreateAccessRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreateAccessRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_CreateAccessRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreateAccessRole(ctx, req.(*CreateAccessRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ListAccessRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccessRoleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartitionServiceServer).ListAccessRole(m, &grpc.GenericServerStream[ListAccessRoleRequest, ListAccessRoleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartitionService_ListAccessRoleServer = grpc.ServerStreamingServer[ListAccessRoleResponse]

func _PartitionService_RemoveAccessRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAccessRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemoveAccessRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_RemoveAccessRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemoveAccessRole(ctx, req.(*RemoveAccessRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartitionService_ServiceDesc is the grpc.ServiceDesc for PartitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partition.v1.PartitionService",
	HandlerType: (*PartitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenant",
			Handler:    _PartitionService_GetTenant_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _PartitionService_CreateTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _PartitionService_UpdateTenant_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _PartitionService_CreatePartition_Handler,
		},
		{
			MethodName: "GetPartition",
			Handler:    _PartitionService_GetPartition_Handler,
		},
		{
			MethodName: "GetPartitionParents",
			Handler:    _PartitionService_GetPartitionParents_Handler,
		},
		{
			MethodName: "UpdatePartition",
			Handler:    _PartitionService_UpdatePartition_Handler,
		},
		{
			MethodName: "CreatePartitionRole",
			Handler:    _PartitionService_CreatePartitionRole_Handler,
		},
		{
			MethodName: "RemovePartitionRole",
			Handler:    _PartitionService_RemovePartitionRole_Handler,
		},
		{
			MethodName: "CreatePage",
			Handler:    _PartitionService_CreatePage_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _PartitionService_GetPage_Handler,
		},
		{
			MethodName: "RemovePage",
			Handler:    _PartitionService_RemovePage_Handler,
		},
		{
			MethodName: "CreateAccess",
			Handler:    _PartitionService_CreateAccess_Handler,
		},
		{
			MethodName: "GetAccess",
			Handler:    _PartitionService_GetAccess_Handler,
		},
		{
			MethodName: "RemoveAccess",
			Handler:    _PartitionService_RemoveAccess_Handler,
		},
		{
			MethodName: "CreateAccessRole",
			Handler:    _PartitionService_CreateAccessRole_Handler,
		},
		{
			MethodName: "RemoveAccessRole",
			Handler:    _PartitionService_RemoveAccessRole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTenant",
			Handler:       _PartitionService_ListTenant_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPartition",
			Handler:       _PartitionService_ListPartition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPartitionRole",
			Handler:       _PartitionService_ListPartitionRole_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAccessRole",
			Handler:       _PartitionService_ListAccessRole_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "partition/v1/partition.proto",
}
