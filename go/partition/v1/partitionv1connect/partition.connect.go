// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: partition/v1/partition.proto

package partitionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/antinvestor/apis/go/partition/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PartitionServiceName is the fully-qualified name of the PartitionService service.
	PartitionServiceName = "partition.v1.PartitionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PartitionServiceGetTenantProcedure is the fully-qualified name of the PartitionService's
	// GetTenant RPC.
	PartitionServiceGetTenantProcedure = "/partition.v1.PartitionService/GetTenant"
	// PartitionServiceListTenantProcedure is the fully-qualified name of the PartitionService's
	// ListTenant RPC.
	PartitionServiceListTenantProcedure = "/partition.v1.PartitionService/ListTenant"
	// PartitionServiceCreateTenantProcedure is the fully-qualified name of the PartitionService's
	// CreateTenant RPC.
	PartitionServiceCreateTenantProcedure = "/partition.v1.PartitionService/CreateTenant"
	// PartitionServiceUpdateTenantProcedure is the fully-qualified name of the PartitionService's
	// UpdateTenant RPC.
	PartitionServiceUpdateTenantProcedure = "/partition.v1.PartitionService/UpdateTenant"
	// PartitionServiceListPartitionProcedure is the fully-qualified name of the PartitionService's
	// ListPartition RPC.
	PartitionServiceListPartitionProcedure = "/partition.v1.PartitionService/ListPartition"
	// PartitionServiceCreatePartitionProcedure is the fully-qualified name of the PartitionService's
	// CreatePartition RPC.
	PartitionServiceCreatePartitionProcedure = "/partition.v1.PartitionService/CreatePartition"
	// PartitionServiceGetPartitionProcedure is the fully-qualified name of the PartitionService's
	// GetPartition RPC.
	PartitionServiceGetPartitionProcedure = "/partition.v1.PartitionService/GetPartition"
	// PartitionServiceGetPartitionParentsProcedure is the fully-qualified name of the
	// PartitionService's GetPartitionParents RPC.
	PartitionServiceGetPartitionParentsProcedure = "/partition.v1.PartitionService/GetPartitionParents"
	// PartitionServiceUpdatePartitionProcedure is the fully-qualified name of the PartitionService's
	// UpdatePartition RPC.
	PartitionServiceUpdatePartitionProcedure = "/partition.v1.PartitionService/UpdatePartition"
	// PartitionServiceCreatePartitionRoleProcedure is the fully-qualified name of the
	// PartitionService's CreatePartitionRole RPC.
	PartitionServiceCreatePartitionRoleProcedure = "/partition.v1.PartitionService/CreatePartitionRole"
	// PartitionServiceListPartitionRoleProcedure is the fully-qualified name of the PartitionService's
	// ListPartitionRole RPC.
	PartitionServiceListPartitionRoleProcedure = "/partition.v1.PartitionService/ListPartitionRole"
	// PartitionServiceRemovePartitionRoleProcedure is the fully-qualified name of the
	// PartitionService's RemovePartitionRole RPC.
	PartitionServiceRemovePartitionRoleProcedure = "/partition.v1.PartitionService/RemovePartitionRole"
	// PartitionServiceCreatePageProcedure is the fully-qualified name of the PartitionService's
	// CreatePage RPC.
	PartitionServiceCreatePageProcedure = "/partition.v1.PartitionService/CreatePage"
	// PartitionServiceGetPageProcedure is the fully-qualified name of the PartitionService's GetPage
	// RPC.
	PartitionServiceGetPageProcedure = "/partition.v1.PartitionService/GetPage"
	// PartitionServiceRemovePageProcedure is the fully-qualified name of the PartitionService's
	// RemovePage RPC.
	PartitionServiceRemovePageProcedure = "/partition.v1.PartitionService/RemovePage"
	// PartitionServiceCreateAccessProcedure is the fully-qualified name of the PartitionService's
	// CreateAccess RPC.
	PartitionServiceCreateAccessProcedure = "/partition.v1.PartitionService/CreateAccess"
	// PartitionServiceGetAccessProcedure is the fully-qualified name of the PartitionService's
	// GetAccess RPC.
	PartitionServiceGetAccessProcedure = "/partition.v1.PartitionService/GetAccess"
	// PartitionServiceRemoveAccessProcedure is the fully-qualified name of the PartitionService's
	// RemoveAccess RPC.
	PartitionServiceRemoveAccessProcedure = "/partition.v1.PartitionService/RemoveAccess"
	// PartitionServiceCreateAccessRoleProcedure is the fully-qualified name of the PartitionService's
	// CreateAccessRole RPC.
	PartitionServiceCreateAccessRoleProcedure = "/partition.v1.PartitionService/CreateAccessRole"
	// PartitionServiceListAccessRoleProcedure is the fully-qualified name of the PartitionService's
	// ListAccessRole RPC.
	PartitionServiceListAccessRoleProcedure = "/partition.v1.PartitionService/ListAccessRole"
	// PartitionServiceRemoveAccessRoleProcedure is the fully-qualified name of the PartitionService's
	// RemoveAccessRole RPC.
	PartitionServiceRemoveAccessRoleProcedure = "/partition.v1.PartitionService/RemoveAccessRole"
)

// PartitionServiceClient is a client for the partition.v1.PartitionService service.
type PartitionServiceClient interface {
	// GetTenant retrieves a tenant by ID.
	GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.GetTenantResponse], error)
	// ListTenant retrieves all tenants matching criteria.
	ListTenant(context.Context, *connect.Request[v1.ListTenantRequest]) (*connect.ServerStreamForClient[v1.ListTenantResponse], error)
	// CreateTenant creates a new tenant.
	CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error)
	// UpdateTenant updates an existing tenant.
	UpdateTenant(context.Context, *connect.Request[v1.UpdateTenantRequest]) (*connect.Response[v1.UpdateTenantResponse], error)
	// ListPartition retrieves all partitions matching criteria.
	ListPartition(context.Context, *connect.Request[v1.ListPartitionRequest]) (*connect.ServerStreamForClient[v1.ListPartitionResponse], error)
	// CreatePartition creates a new partition.
	CreatePartition(context.Context, *connect.Request[v1.CreatePartitionRequest]) (*connect.Response[v1.CreatePartitionResponse], error)
	// GetPartition retrieves a partition by ID.
	GetPartition(context.Context, *connect.Request[v1.GetPartitionRequest]) (*connect.Response[v1.GetPartitionResponse], error)
	// GetPartitionParents retrieves the parent hierarchy.
	GetPartitionParents(context.Context, *connect.Request[v1.GetPartitionParentsRequest]) (*connect.Response[v1.GetPartitionParentsResponse], error)
	// UpdatePartition updates an existing partition.
	UpdatePartition(context.Context, *connect.Request[v1.UpdatePartitionRequest]) (*connect.Response[v1.UpdatePartitionResponse], error)
	// CreatePartitionRole creates a role within a partition.
	CreatePartitionRole(context.Context, *connect.Request[v1.CreatePartitionRoleRequest]) (*connect.Response[v1.CreatePartitionRoleResponse], error)
	// ListPartitionRole retrieves all roles for a partition.
	ListPartitionRole(context.Context, *connect.Request[v1.ListPartitionRoleRequest]) (*connect.ServerStreamForClient[v1.ListPartitionRoleResponse], error)
	// RemovePartitionRole deletes a partition role.
	RemovePartitionRole(context.Context, *connect.Request[v1.RemovePartitionRoleRequest]) (*connect.Response[v1.RemovePartitionRoleResponse], error)
	// CreatePage creates a custom UI page for a partition.
	CreatePage(context.Context, *connect.Request[v1.CreatePageRequest]) (*connect.Response[v1.CreatePageResponse], error)
	// GetPage retrieves a custom page.
	GetPage(context.Context, *connect.Request[v1.GetPageRequest]) (*connect.Response[v1.GetPageResponse], error)
	// RemovePage deletes a custom page.
	RemovePage(context.Context, *connect.Request[v1.RemovePageRequest]) (*connect.Response[v1.RemovePageResponse], error)
	// CreateAccess grants a profile access to a partition.
	CreateAccess(context.Context, *connect.Request[v1.CreateAccessRequest]) (*connect.Response[v1.CreateAccessResponse], error)
	// GetAccess retrieves an access grant.
	GetAccess(context.Context, *connect.Request[v1.GetAccessRequest]) (*connect.Response[v1.GetAccessResponse], error)
	// RemoveAccess revokes a profile's access to a partition.
	RemoveAccess(context.Context, *connect.Request[v1.RemoveAccessRequest]) (*connect.Response[v1.RemoveAccessResponse], error)
	// CreateAccessRole assigns a role to an access grant.
	CreateAccessRole(context.Context, *connect.Request[v1.CreateAccessRoleRequest]) (*connect.Response[v1.CreateAccessRoleResponse], error)
	// ListAccessRole retrieves all roles for an access grant.
	ListAccessRole(context.Context, *connect.Request[v1.ListAccessRoleRequest]) (*connect.ServerStreamForClient[v1.ListAccessRoleResponse], error)
	// RemoveAccessRole removes a role from an access grant.
	RemoveAccessRole(context.Context, *connect.Request[v1.RemoveAccessRoleRequest]) (*connect.Response[v1.RemoveAccessRoleResponse], error)
}

// NewPartitionServiceClient constructs a client for the partition.v1.PartitionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPartitionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PartitionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	partitionServiceMethods := v1.File_partition_v1_partition_proto.Services().ByName("PartitionService").Methods()
	return &partitionServiceClient{
		getTenant: connect.NewClient[v1.GetTenantRequest, v1.GetTenantResponse](
			httpClient,
			baseURL+PartitionServiceGetTenantProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("GetTenant")),
			connect.WithClientOptions(opts...),
		),
		listTenant: connect.NewClient[v1.ListTenantRequest, v1.ListTenantResponse](
			httpClient,
			baseURL+PartitionServiceListTenantProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("ListTenant")),
			connect.WithClientOptions(opts...),
		),
		createTenant: connect.NewClient[v1.CreateTenantRequest, v1.CreateTenantResponse](
			httpClient,
			baseURL+PartitionServiceCreateTenantProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("CreateTenant")),
			connect.WithClientOptions(opts...),
		),
		updateTenant: connect.NewClient[v1.UpdateTenantRequest, v1.UpdateTenantResponse](
			httpClient,
			baseURL+PartitionServiceUpdateTenantProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("UpdateTenant")),
			connect.WithClientOptions(opts...),
		),
		listPartition: connect.NewClient[v1.ListPartitionRequest, v1.ListPartitionResponse](
			httpClient,
			baseURL+PartitionServiceListPartitionProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("ListPartition")),
			connect.WithClientOptions(opts...),
		),
		createPartition: connect.NewClient[v1.CreatePartitionRequest, v1.CreatePartitionResponse](
			httpClient,
			baseURL+PartitionServiceCreatePartitionProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("CreatePartition")),
			connect.WithClientOptions(opts...),
		),
		getPartition: connect.NewClient[v1.GetPartitionRequest, v1.GetPartitionResponse](
			httpClient,
			baseURL+PartitionServiceGetPartitionProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("GetPartition")),
			connect.WithClientOptions(opts...),
		),
		getPartitionParents: connect.NewClient[v1.GetPartitionParentsRequest, v1.GetPartitionParentsResponse](
			httpClient,
			baseURL+PartitionServiceGetPartitionParentsProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("GetPartitionParents")),
			connect.WithClientOptions(opts...),
		),
		updatePartition: connect.NewClient[v1.UpdatePartitionRequest, v1.UpdatePartitionResponse](
			httpClient,
			baseURL+PartitionServiceUpdatePartitionProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("UpdatePartition")),
			connect.WithClientOptions(opts...),
		),
		createPartitionRole: connect.NewClient[v1.CreatePartitionRoleRequest, v1.CreatePartitionRoleResponse](
			httpClient,
			baseURL+PartitionServiceCreatePartitionRoleProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("CreatePartitionRole")),
			connect.WithClientOptions(opts...),
		),
		listPartitionRole: connect.NewClient[v1.ListPartitionRoleRequest, v1.ListPartitionRoleResponse](
			httpClient,
			baseURL+PartitionServiceListPartitionRoleProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("ListPartitionRole")),
			connect.WithClientOptions(opts...),
		),
		removePartitionRole: connect.NewClient[v1.RemovePartitionRoleRequest, v1.RemovePartitionRoleResponse](
			httpClient,
			baseURL+PartitionServiceRemovePartitionRoleProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("RemovePartitionRole")),
			connect.WithClientOptions(opts...),
		),
		createPage: connect.NewClient[v1.CreatePageRequest, v1.CreatePageResponse](
			httpClient,
			baseURL+PartitionServiceCreatePageProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("CreatePage")),
			connect.WithClientOptions(opts...),
		),
		getPage: connect.NewClient[v1.GetPageRequest, v1.GetPageResponse](
			httpClient,
			baseURL+PartitionServiceGetPageProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("GetPage")),
			connect.WithClientOptions(opts...),
		),
		removePage: connect.NewClient[v1.RemovePageRequest, v1.RemovePageResponse](
			httpClient,
			baseURL+PartitionServiceRemovePageProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("RemovePage")),
			connect.WithClientOptions(opts...),
		),
		createAccess: connect.NewClient[v1.CreateAccessRequest, v1.CreateAccessResponse](
			httpClient,
			baseURL+PartitionServiceCreateAccessProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("CreateAccess")),
			connect.WithClientOptions(opts...),
		),
		getAccess: connect.NewClient[v1.GetAccessRequest, v1.GetAccessResponse](
			httpClient,
			baseURL+PartitionServiceGetAccessProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("GetAccess")),
			connect.WithClientOptions(opts...),
		),
		removeAccess: connect.NewClient[v1.RemoveAccessRequest, v1.RemoveAccessResponse](
			httpClient,
			baseURL+PartitionServiceRemoveAccessProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("RemoveAccess")),
			connect.WithClientOptions(opts...),
		),
		createAccessRole: connect.NewClient[v1.CreateAccessRoleRequest, v1.CreateAccessRoleResponse](
			httpClient,
			baseURL+PartitionServiceCreateAccessRoleProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("CreateAccessRole")),
			connect.WithClientOptions(opts...),
		),
		listAccessRole: connect.NewClient[v1.ListAccessRoleRequest, v1.ListAccessRoleResponse](
			httpClient,
			baseURL+PartitionServiceListAccessRoleProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("ListAccessRole")),
			connect.WithClientOptions(opts...),
		),
		removeAccessRole: connect.NewClient[v1.RemoveAccessRoleRequest, v1.RemoveAccessRoleResponse](
			httpClient,
			baseURL+PartitionServiceRemoveAccessRoleProcedure,
			connect.WithSchema(partitionServiceMethods.ByName("RemoveAccessRole")),
			connect.WithClientOptions(opts...),
		),
	}
}

// partitionServiceClient implements PartitionServiceClient.
type partitionServiceClient struct {
	getTenant           *connect.Client[v1.GetTenantRequest, v1.GetTenantResponse]
	listTenant          *connect.Client[v1.ListTenantRequest, v1.ListTenantResponse]
	createTenant        *connect.Client[v1.CreateTenantRequest, v1.CreateTenantResponse]
	updateTenant        *connect.Client[v1.UpdateTenantRequest, v1.UpdateTenantResponse]
	listPartition       *connect.Client[v1.ListPartitionRequest, v1.ListPartitionResponse]
	createPartition     *connect.Client[v1.CreatePartitionRequest, v1.CreatePartitionResponse]
	getPartition        *connect.Client[v1.GetPartitionRequest, v1.GetPartitionResponse]
	getPartitionParents *connect.Client[v1.GetPartitionParentsRequest, v1.GetPartitionParentsResponse]
	updatePartition     *connect.Client[v1.UpdatePartitionRequest, v1.UpdatePartitionResponse]
	createPartitionRole *connect.Client[v1.CreatePartitionRoleRequest, v1.CreatePartitionRoleResponse]
	listPartitionRole   *connect.Client[v1.ListPartitionRoleRequest, v1.ListPartitionRoleResponse]
	removePartitionRole *connect.Client[v1.RemovePartitionRoleRequest, v1.RemovePartitionRoleResponse]
	createPage          *connect.Client[v1.CreatePageRequest, v1.CreatePageResponse]
	getPage             *connect.Client[v1.GetPageRequest, v1.GetPageResponse]
	removePage          *connect.Client[v1.RemovePageRequest, v1.RemovePageResponse]
	createAccess        *connect.Client[v1.CreateAccessRequest, v1.CreateAccessResponse]
	getAccess           *connect.Client[v1.GetAccessRequest, v1.GetAccessResponse]
	removeAccess        *connect.Client[v1.RemoveAccessRequest, v1.RemoveAccessResponse]
	createAccessRole    *connect.Client[v1.CreateAccessRoleRequest, v1.CreateAccessRoleResponse]
	listAccessRole      *connect.Client[v1.ListAccessRoleRequest, v1.ListAccessRoleResponse]
	removeAccessRole    *connect.Client[v1.RemoveAccessRoleRequest, v1.RemoveAccessRoleResponse]
}

// GetTenant calls partition.v1.PartitionService.GetTenant.
func (c *partitionServiceClient) GetTenant(ctx context.Context, req *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.GetTenantResponse], error) {
	return c.getTenant.CallUnary(ctx, req)
}

// ListTenant calls partition.v1.PartitionService.ListTenant.
func (c *partitionServiceClient) ListTenant(ctx context.Context, req *connect.Request[v1.ListTenantRequest]) (*connect.ServerStreamForClient[v1.ListTenantResponse], error) {
	return c.listTenant.CallServerStream(ctx, req)
}

// CreateTenant calls partition.v1.PartitionService.CreateTenant.
func (c *partitionServiceClient) CreateTenant(ctx context.Context, req *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error) {
	return c.createTenant.CallUnary(ctx, req)
}

// UpdateTenant calls partition.v1.PartitionService.UpdateTenant.
func (c *partitionServiceClient) UpdateTenant(ctx context.Context, req *connect.Request[v1.UpdateTenantRequest]) (*connect.Response[v1.UpdateTenantResponse], error) {
	return c.updateTenant.CallUnary(ctx, req)
}

// ListPartition calls partition.v1.PartitionService.ListPartition.
func (c *partitionServiceClient) ListPartition(ctx context.Context, req *connect.Request[v1.ListPartitionRequest]) (*connect.ServerStreamForClient[v1.ListPartitionResponse], error) {
	return c.listPartition.CallServerStream(ctx, req)
}

// CreatePartition calls partition.v1.PartitionService.CreatePartition.
func (c *partitionServiceClient) CreatePartition(ctx context.Context, req *connect.Request[v1.CreatePartitionRequest]) (*connect.Response[v1.CreatePartitionResponse], error) {
	return c.createPartition.CallUnary(ctx, req)
}

// GetPartition calls partition.v1.PartitionService.GetPartition.
func (c *partitionServiceClient) GetPartition(ctx context.Context, req *connect.Request[v1.GetPartitionRequest]) (*connect.Response[v1.GetPartitionResponse], error) {
	return c.getPartition.CallUnary(ctx, req)
}

// GetPartitionParents calls partition.v1.PartitionService.GetPartitionParents.
func (c *partitionServiceClient) GetPartitionParents(ctx context.Context, req *connect.Request[v1.GetPartitionParentsRequest]) (*connect.Response[v1.GetPartitionParentsResponse], error) {
	return c.getPartitionParents.CallUnary(ctx, req)
}

// UpdatePartition calls partition.v1.PartitionService.UpdatePartition.
func (c *partitionServiceClient) UpdatePartition(ctx context.Context, req *connect.Request[v1.UpdatePartitionRequest]) (*connect.Response[v1.UpdatePartitionResponse], error) {
	return c.updatePartition.CallUnary(ctx, req)
}

// CreatePartitionRole calls partition.v1.PartitionService.CreatePartitionRole.
func (c *partitionServiceClient) CreatePartitionRole(ctx context.Context, req *connect.Request[v1.CreatePartitionRoleRequest]) (*connect.Response[v1.CreatePartitionRoleResponse], error) {
	return c.createPartitionRole.CallUnary(ctx, req)
}

// ListPartitionRole calls partition.v1.PartitionService.ListPartitionRole.
func (c *partitionServiceClient) ListPartitionRole(ctx context.Context, req *connect.Request[v1.ListPartitionRoleRequest]) (*connect.ServerStreamForClient[v1.ListPartitionRoleResponse], error) {
	return c.listPartitionRole.CallServerStream(ctx, req)
}

// RemovePartitionRole calls partition.v1.PartitionService.RemovePartitionRole.
func (c *partitionServiceClient) RemovePartitionRole(ctx context.Context, req *connect.Request[v1.RemovePartitionRoleRequest]) (*connect.Response[v1.RemovePartitionRoleResponse], error) {
	return c.removePartitionRole.CallUnary(ctx, req)
}

// CreatePage calls partition.v1.PartitionService.CreatePage.
func (c *partitionServiceClient) CreatePage(ctx context.Context, req *connect.Request[v1.CreatePageRequest]) (*connect.Response[v1.CreatePageResponse], error) {
	return c.createPage.CallUnary(ctx, req)
}

// GetPage calls partition.v1.PartitionService.GetPage.
func (c *partitionServiceClient) GetPage(ctx context.Context, req *connect.Request[v1.GetPageRequest]) (*connect.Response[v1.GetPageResponse], error) {
	return c.getPage.CallUnary(ctx, req)
}

// RemovePage calls partition.v1.PartitionService.RemovePage.
func (c *partitionServiceClient) RemovePage(ctx context.Context, req *connect.Request[v1.RemovePageRequest]) (*connect.Response[v1.RemovePageResponse], error) {
	return c.removePage.CallUnary(ctx, req)
}

// CreateAccess calls partition.v1.PartitionService.CreateAccess.
func (c *partitionServiceClient) CreateAccess(ctx context.Context, req *connect.Request[v1.CreateAccessRequest]) (*connect.Response[v1.CreateAccessResponse], error) {
	return c.createAccess.CallUnary(ctx, req)
}

// GetAccess calls partition.v1.PartitionService.GetAccess.
func (c *partitionServiceClient) GetAccess(ctx context.Context, req *connect.Request[v1.GetAccessRequest]) (*connect.Response[v1.GetAccessResponse], error) {
	return c.getAccess.CallUnary(ctx, req)
}

// RemoveAccess calls partition.v1.PartitionService.RemoveAccess.
func (c *partitionServiceClient) RemoveAccess(ctx context.Context, req *connect.Request[v1.RemoveAccessRequest]) (*connect.Response[v1.RemoveAccessResponse], error) {
	return c.removeAccess.CallUnary(ctx, req)
}

// CreateAccessRole calls partition.v1.PartitionService.CreateAccessRole.
func (c *partitionServiceClient) CreateAccessRole(ctx context.Context, req *connect.Request[v1.CreateAccessRoleRequest]) (*connect.Response[v1.CreateAccessRoleResponse], error) {
	return c.createAccessRole.CallUnary(ctx, req)
}

// ListAccessRole calls partition.v1.PartitionService.ListAccessRole.
func (c *partitionServiceClient) ListAccessRole(ctx context.Context, req *connect.Request[v1.ListAccessRoleRequest]) (*connect.ServerStreamForClient[v1.ListAccessRoleResponse], error) {
	return c.listAccessRole.CallServerStream(ctx, req)
}

// RemoveAccessRole calls partition.v1.PartitionService.RemoveAccessRole.
func (c *partitionServiceClient) RemoveAccessRole(ctx context.Context, req *connect.Request[v1.RemoveAccessRoleRequest]) (*connect.Response[v1.RemoveAccessRoleResponse], error) {
	return c.removeAccessRole.CallUnary(ctx, req)
}

// PartitionServiceHandler is an implementation of the partition.v1.PartitionService service.
type PartitionServiceHandler interface {
	// GetTenant retrieves a tenant by ID.
	GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.GetTenantResponse], error)
	// ListTenant retrieves all tenants matching criteria.
	ListTenant(context.Context, *connect.Request[v1.ListTenantRequest], *connect.ServerStream[v1.ListTenantResponse]) error
	// CreateTenant creates a new tenant.
	CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error)
	// UpdateTenant updates an existing tenant.
	UpdateTenant(context.Context, *connect.Request[v1.UpdateTenantRequest]) (*connect.Response[v1.UpdateTenantResponse], error)
	// ListPartition retrieves all partitions matching criteria.
	ListPartition(context.Context, *connect.Request[v1.ListPartitionRequest], *connect.ServerStream[v1.ListPartitionResponse]) error
	// CreatePartition creates a new partition.
	CreatePartition(context.Context, *connect.Request[v1.CreatePartitionRequest]) (*connect.Response[v1.CreatePartitionResponse], error)
	// GetPartition retrieves a partition by ID.
	GetPartition(context.Context, *connect.Request[v1.GetPartitionRequest]) (*connect.Response[v1.GetPartitionResponse], error)
	// GetPartitionParents retrieves the parent hierarchy.
	GetPartitionParents(context.Context, *connect.Request[v1.GetPartitionParentsRequest]) (*connect.Response[v1.GetPartitionParentsResponse], error)
	// UpdatePartition updates an existing partition.
	UpdatePartition(context.Context, *connect.Request[v1.UpdatePartitionRequest]) (*connect.Response[v1.UpdatePartitionResponse], error)
	// CreatePartitionRole creates a role within a partition.
	CreatePartitionRole(context.Context, *connect.Request[v1.CreatePartitionRoleRequest]) (*connect.Response[v1.CreatePartitionRoleResponse], error)
	// ListPartitionRole retrieves all roles for a partition.
	ListPartitionRole(context.Context, *connect.Request[v1.ListPartitionRoleRequest], *connect.ServerStream[v1.ListPartitionRoleResponse]) error
	// RemovePartitionRole deletes a partition role.
	RemovePartitionRole(context.Context, *connect.Request[v1.RemovePartitionRoleRequest]) (*connect.Response[v1.RemovePartitionRoleResponse], error)
	// CreatePage creates a custom UI page for a partition.
	CreatePage(context.Context, *connect.Request[v1.CreatePageRequest]) (*connect.Response[v1.CreatePageResponse], error)
	// GetPage retrieves a custom page.
	GetPage(context.Context, *connect.Request[v1.GetPageRequest]) (*connect.Response[v1.GetPageResponse], error)
	// RemovePage deletes a custom page.
	RemovePage(context.Context, *connect.Request[v1.RemovePageRequest]) (*connect.Response[v1.RemovePageResponse], error)
	// CreateAccess grants a profile access to a partition.
	CreateAccess(context.Context, *connect.Request[v1.CreateAccessRequest]) (*connect.Response[v1.CreateAccessResponse], error)
	// GetAccess retrieves an access grant.
	GetAccess(context.Context, *connect.Request[v1.GetAccessRequest]) (*connect.Response[v1.GetAccessResponse], error)
	// RemoveAccess revokes a profile's access to a partition.
	RemoveAccess(context.Context, *connect.Request[v1.RemoveAccessRequest]) (*connect.Response[v1.RemoveAccessResponse], error)
	// CreateAccessRole assigns a role to an access grant.
	CreateAccessRole(context.Context, *connect.Request[v1.CreateAccessRoleRequest]) (*connect.Response[v1.CreateAccessRoleResponse], error)
	// ListAccessRole retrieves all roles for an access grant.
	ListAccessRole(context.Context, *connect.Request[v1.ListAccessRoleRequest], *connect.ServerStream[v1.ListAccessRoleResponse]) error
	// RemoveAccessRole removes a role from an access grant.
	RemoveAccessRole(context.Context, *connect.Request[v1.RemoveAccessRoleRequest]) (*connect.Response[v1.RemoveAccessRoleResponse], error)
}

// NewPartitionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPartitionServiceHandler(svc PartitionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	partitionServiceMethods := v1.File_partition_v1_partition_proto.Services().ByName("PartitionService").Methods()
	partitionServiceGetTenantHandler := connect.NewUnaryHandler(
		PartitionServiceGetTenantProcedure,
		svc.GetTenant,
		connect.WithSchema(partitionServiceMethods.ByName("GetTenant")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceListTenantHandler := connect.NewServerStreamHandler(
		PartitionServiceListTenantProcedure,
		svc.ListTenant,
		connect.WithSchema(partitionServiceMethods.ByName("ListTenant")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceCreateTenantHandler := connect.NewUnaryHandler(
		PartitionServiceCreateTenantProcedure,
		svc.CreateTenant,
		connect.WithSchema(partitionServiceMethods.ByName("CreateTenant")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceUpdateTenantHandler := connect.NewUnaryHandler(
		PartitionServiceUpdateTenantProcedure,
		svc.UpdateTenant,
		connect.WithSchema(partitionServiceMethods.ByName("UpdateTenant")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceListPartitionHandler := connect.NewServerStreamHandler(
		PartitionServiceListPartitionProcedure,
		svc.ListPartition,
		connect.WithSchema(partitionServiceMethods.ByName("ListPartition")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceCreatePartitionHandler := connect.NewUnaryHandler(
		PartitionServiceCreatePartitionProcedure,
		svc.CreatePartition,
		connect.WithSchema(partitionServiceMethods.ByName("CreatePartition")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceGetPartitionHandler := connect.NewUnaryHandler(
		PartitionServiceGetPartitionProcedure,
		svc.GetPartition,
		connect.WithSchema(partitionServiceMethods.ByName("GetPartition")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceGetPartitionParentsHandler := connect.NewUnaryHandler(
		PartitionServiceGetPartitionParentsProcedure,
		svc.GetPartitionParents,
		connect.WithSchema(partitionServiceMethods.ByName("GetPartitionParents")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceUpdatePartitionHandler := connect.NewUnaryHandler(
		PartitionServiceUpdatePartitionProcedure,
		svc.UpdatePartition,
		connect.WithSchema(partitionServiceMethods.ByName("UpdatePartition")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceCreatePartitionRoleHandler := connect.NewUnaryHandler(
		PartitionServiceCreatePartitionRoleProcedure,
		svc.CreatePartitionRole,
		connect.WithSchema(partitionServiceMethods.ByName("CreatePartitionRole")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceListPartitionRoleHandler := connect.NewServerStreamHandler(
		PartitionServiceListPartitionRoleProcedure,
		svc.ListPartitionRole,
		connect.WithSchema(partitionServiceMethods.ByName("ListPartitionRole")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceRemovePartitionRoleHandler := connect.NewUnaryHandler(
		PartitionServiceRemovePartitionRoleProcedure,
		svc.RemovePartitionRole,
		connect.WithSchema(partitionServiceMethods.ByName("RemovePartitionRole")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceCreatePageHandler := connect.NewUnaryHandler(
		PartitionServiceCreatePageProcedure,
		svc.CreatePage,
		connect.WithSchema(partitionServiceMethods.ByName("CreatePage")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceGetPageHandler := connect.NewUnaryHandler(
		PartitionServiceGetPageProcedure,
		svc.GetPage,
		connect.WithSchema(partitionServiceMethods.ByName("GetPage")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceRemovePageHandler := connect.NewUnaryHandler(
		PartitionServiceRemovePageProcedure,
		svc.RemovePage,
		connect.WithSchema(partitionServiceMethods.ByName("RemovePage")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceCreateAccessHandler := connect.NewUnaryHandler(
		PartitionServiceCreateAccessProcedure,
		svc.CreateAccess,
		connect.WithSchema(partitionServiceMethods.ByName("CreateAccess")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceGetAccessHandler := connect.NewUnaryHandler(
		PartitionServiceGetAccessProcedure,
		svc.GetAccess,
		connect.WithSchema(partitionServiceMethods.ByName("GetAccess")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceRemoveAccessHandler := connect.NewUnaryHandler(
		PartitionServiceRemoveAccessProcedure,
		svc.RemoveAccess,
		connect.WithSchema(partitionServiceMethods.ByName("RemoveAccess")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceCreateAccessRoleHandler := connect.NewUnaryHandler(
		PartitionServiceCreateAccessRoleProcedure,
		svc.CreateAccessRole,
		connect.WithSchema(partitionServiceMethods.ByName("CreateAccessRole")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceListAccessRoleHandler := connect.NewServerStreamHandler(
		PartitionServiceListAccessRoleProcedure,
		svc.ListAccessRole,
		connect.WithSchema(partitionServiceMethods.ByName("ListAccessRole")),
		connect.WithHandlerOptions(opts...),
	)
	partitionServiceRemoveAccessRoleHandler := connect.NewUnaryHandler(
		PartitionServiceRemoveAccessRoleProcedure,
		svc.RemoveAccessRole,
		connect.WithSchema(partitionServiceMethods.ByName("RemoveAccessRole")),
		connect.WithHandlerOptions(opts...),
	)
	return "/partition.v1.PartitionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PartitionServiceGetTenantProcedure:
			partitionServiceGetTenantHandler.ServeHTTP(w, r)
		case PartitionServiceListTenantProcedure:
			partitionServiceListTenantHandler.ServeHTTP(w, r)
		case PartitionServiceCreateTenantProcedure:
			partitionServiceCreateTenantHandler.ServeHTTP(w, r)
		case PartitionServiceUpdateTenantProcedure:
			partitionServiceUpdateTenantHandler.ServeHTTP(w, r)
		case PartitionServiceListPartitionProcedure:
			partitionServiceListPartitionHandler.ServeHTTP(w, r)
		case PartitionServiceCreatePartitionProcedure:
			partitionServiceCreatePartitionHandler.ServeHTTP(w, r)
		case PartitionServiceGetPartitionProcedure:
			partitionServiceGetPartitionHandler.ServeHTTP(w, r)
		case PartitionServiceGetPartitionParentsProcedure:
			partitionServiceGetPartitionParentsHandler.ServeHTTP(w, r)
		case PartitionServiceUpdatePartitionProcedure:
			partitionServiceUpdatePartitionHandler.ServeHTTP(w, r)
		case PartitionServiceCreatePartitionRoleProcedure:
			partitionServiceCreatePartitionRoleHandler.ServeHTTP(w, r)
		case PartitionServiceListPartitionRoleProcedure:
			partitionServiceListPartitionRoleHandler.ServeHTTP(w, r)
		case PartitionServiceRemovePartitionRoleProcedure:
			partitionServiceRemovePartitionRoleHandler.ServeHTTP(w, r)
		case PartitionServiceCreatePageProcedure:
			partitionServiceCreatePageHandler.ServeHTTP(w, r)
		case PartitionServiceGetPageProcedure:
			partitionServiceGetPageHandler.ServeHTTP(w, r)
		case PartitionServiceRemovePageProcedure:
			partitionServiceRemovePageHandler.ServeHTTP(w, r)
		case PartitionServiceCreateAccessProcedure:
			partitionServiceCreateAccessHandler.ServeHTTP(w, r)
		case PartitionServiceGetAccessProcedure:
			partitionServiceGetAccessHandler.ServeHTTP(w, r)
		case PartitionServiceRemoveAccessProcedure:
			partitionServiceRemoveAccessHandler.ServeHTTP(w, r)
		case PartitionServiceCreateAccessRoleProcedure:
			partitionServiceCreateAccessRoleHandler.ServeHTTP(w, r)
		case PartitionServiceListAccessRoleProcedure:
			partitionServiceListAccessRoleHandler.ServeHTTP(w, r)
		case PartitionServiceRemoveAccessRoleProcedure:
			partitionServiceRemoveAccessRoleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPartitionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPartitionServiceHandler struct{}

func (UnimplementedPartitionServiceHandler) GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.GetTenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.GetTenant is not implemented"))
}

func (UnimplementedPartitionServiceHandler) ListTenant(context.Context, *connect.Request[v1.ListTenantRequest], *connect.ServerStream[v1.ListTenantResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.ListTenant is not implemented"))
}

func (UnimplementedPartitionServiceHandler) CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.CreateTenant is not implemented"))
}

func (UnimplementedPartitionServiceHandler) UpdateTenant(context.Context, *connect.Request[v1.UpdateTenantRequest]) (*connect.Response[v1.UpdateTenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.UpdateTenant is not implemented"))
}

func (UnimplementedPartitionServiceHandler) ListPartition(context.Context, *connect.Request[v1.ListPartitionRequest], *connect.ServerStream[v1.ListPartitionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.ListPartition is not implemented"))
}

func (UnimplementedPartitionServiceHandler) CreatePartition(context.Context, *connect.Request[v1.CreatePartitionRequest]) (*connect.Response[v1.CreatePartitionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.CreatePartition is not implemented"))
}

func (UnimplementedPartitionServiceHandler) GetPartition(context.Context, *connect.Request[v1.GetPartitionRequest]) (*connect.Response[v1.GetPartitionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.GetPartition is not implemented"))
}

func (UnimplementedPartitionServiceHandler) GetPartitionParents(context.Context, *connect.Request[v1.GetPartitionParentsRequest]) (*connect.Response[v1.GetPartitionParentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.GetPartitionParents is not implemented"))
}

func (UnimplementedPartitionServiceHandler) UpdatePartition(context.Context, *connect.Request[v1.UpdatePartitionRequest]) (*connect.Response[v1.UpdatePartitionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.UpdatePartition is not implemented"))
}

func (UnimplementedPartitionServiceHandler) CreatePartitionRole(context.Context, *connect.Request[v1.CreatePartitionRoleRequest]) (*connect.Response[v1.CreatePartitionRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.CreatePartitionRole is not implemented"))
}

func (UnimplementedPartitionServiceHandler) ListPartitionRole(context.Context, *connect.Request[v1.ListPartitionRoleRequest], *connect.ServerStream[v1.ListPartitionRoleResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.ListPartitionRole is not implemented"))
}

func (UnimplementedPartitionServiceHandler) RemovePartitionRole(context.Context, *connect.Request[v1.RemovePartitionRoleRequest]) (*connect.Response[v1.RemovePartitionRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.RemovePartitionRole is not implemented"))
}

func (UnimplementedPartitionServiceHandler) CreatePage(context.Context, *connect.Request[v1.CreatePageRequest]) (*connect.Response[v1.CreatePageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.CreatePage is not implemented"))
}

func (UnimplementedPartitionServiceHandler) GetPage(context.Context, *connect.Request[v1.GetPageRequest]) (*connect.Response[v1.GetPageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.GetPage is not implemented"))
}

func (UnimplementedPartitionServiceHandler) RemovePage(context.Context, *connect.Request[v1.RemovePageRequest]) (*connect.Response[v1.RemovePageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.RemovePage is not implemented"))
}

func (UnimplementedPartitionServiceHandler) CreateAccess(context.Context, *connect.Request[v1.CreateAccessRequest]) (*connect.Response[v1.CreateAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.CreateAccess is not implemented"))
}

func (UnimplementedPartitionServiceHandler) GetAccess(context.Context, *connect.Request[v1.GetAccessRequest]) (*connect.Response[v1.GetAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.GetAccess is not implemented"))
}

func (UnimplementedPartitionServiceHandler) RemoveAccess(context.Context, *connect.Request[v1.RemoveAccessRequest]) (*connect.Response[v1.RemoveAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.RemoveAccess is not implemented"))
}

func (UnimplementedPartitionServiceHandler) CreateAccessRole(context.Context, *connect.Request[v1.CreateAccessRoleRequest]) (*connect.Response[v1.CreateAccessRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.CreateAccessRole is not implemented"))
}

func (UnimplementedPartitionServiceHandler) ListAccessRole(context.Context, *connect.Request[v1.ListAccessRoleRequest], *connect.ServerStream[v1.ListAccessRoleResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.ListAccessRole is not implemented"))
}

func (UnimplementedPartitionServiceHandler) RemoveAccessRole(context.Context, *connect.Request[v1.RemoveAccessRoleRequest]) (*connect.Response[v1.RemoveAccessRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partition.v1.PartitionService.RemoveAccessRole is not implemented"))
}
