// Copyright 2023-2024 Ant Investor Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chat/v1/chat.proto

package chatv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/antinvestor/apis/go/chat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "chat.v1.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceConnectProcedure is the fully-qualified name of the ChatService's Connect RPC.
	ChatServiceConnectProcedure = "/chat.v1.ChatService/Connect"
	// ChatServiceSendMessageProcedure is the fully-qualified name of the ChatService's SendMessage RPC.
	ChatServiceSendMessageProcedure = "/chat.v1.ChatService/SendMessage"
	// ChatServiceGetHistoryProcedure is the fully-qualified name of the ChatService's GetHistory RPC.
	ChatServiceGetHistoryProcedure = "/chat.v1.ChatService/GetHistory"
	// ChatServiceCreateRoomProcedure is the fully-qualified name of the ChatService's CreateRoom RPC.
	ChatServiceCreateRoomProcedure = "/chat.v1.ChatService/CreateRoom"
	// ChatServiceSearchRoomsProcedure is the fully-qualified name of the ChatService's SearchRooms RPC.
	ChatServiceSearchRoomsProcedure = "/chat.v1.ChatService/SearchRooms"
	// ChatServiceUpdateRoomProcedure is the fully-qualified name of the ChatService's UpdateRoom RPC.
	ChatServiceUpdateRoomProcedure = "/chat.v1.ChatService/UpdateRoom"
	// ChatServiceDeleteRoomProcedure is the fully-qualified name of the ChatService's DeleteRoom RPC.
	ChatServiceDeleteRoomProcedure = "/chat.v1.ChatService/DeleteRoom"
	// ChatServiceAddRoomSubscriptionsProcedure is the fully-qualified name of the ChatService's
	// AddRoomSubscriptions RPC.
	ChatServiceAddRoomSubscriptionsProcedure = "/chat.v1.ChatService/AddRoomSubscriptions"
	// ChatServiceRemoveRoomSubscriptionsProcedure is the fully-qualified name of the ChatService's
	// RemoveRoomSubscriptions RPC.
	ChatServiceRemoveRoomSubscriptionsProcedure = "/chat.v1.ChatService/RemoveRoomSubscriptions"
	// ChatServiceUpdateSubscriptionRoleProcedure is the fully-qualified name of the ChatService's
	// UpdateSubscriptionRole RPC.
	ChatServiceUpdateSubscriptionRoleProcedure = "/chat.v1.ChatService/UpdateSubscriptionRole"
	// ChatServiceSearchRoomSubscriptionsProcedure is the fully-qualified name of the ChatService's
	// SearchRoomSubscriptions RPC.
	ChatServiceSearchRoomSubscriptionsProcedure = "/chat.v1.ChatService/SearchRoomSubscriptions"
)

// ChatServiceClient is a client for the chat.v1.ChatService service.
type ChatServiceClient interface {
	// Bi-directional, long-lived connection. Client sends ConnectRequest (initial auth + acks/commands).
	// Server streams ServerEvent objects in chronological order for rooms the client is subscribed to.
	// Stream resume: client may provide last_received_event_id or resume_token to continue after reconnect.
	Connect(context.Context) *connect.BidiStreamForClient[v1.ConnectRequest, v1.ServerEvent]
	// Send a message (unified message model). Idempotent if idempotency_key is provided.
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	// Fetch history for a room. Cursor-based paging (cursor = opaque server token).
	GetHistory(context.Context, *connect.Request[v1.GetHistoryRequest]) (*connect.Response[v1.GetHistoryResponse], error)
	// Room lifecycle & management
	CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error)
	SearchRooms(context.Context, *connect.Request[v1.SearchRoomsRequest]) (*connect.ServerStreamForClient[v1.SearchRoomsResponse], error)
	UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error)
	DeleteRoom(context.Context, *connect.Request[v1.DeleteRoomRequest]) (*connect.Response[v1.DeleteRoomResponse], error)
	// Subscriptionship & roles
	AddRoomSubscriptions(context.Context, *connect.Request[v1.AddRoomSubscriptionsRequest]) (*connect.Response[v1.AddRoomSubscriptionsResponse], error)
	RemoveRoomSubscriptions(context.Context, *connect.Request[v1.RemoveRoomSubscriptionsRequest]) (*connect.Response[v1.RemoveRoomSubscriptionsResponse], error)
	UpdateSubscriptionRole(context.Context, *connect.Request[v1.UpdateSubscriptionRoleRequest]) (*connect.Response[v1.UpdateSubscriptionRoleResponse], error)
	SearchRoomSubscriptions(context.Context, *connect.Request[v1.SearchRoomSubscriptionsRequest]) (*connect.Response[v1.SearchRoomSubscriptionsResponse], error)
}

// NewChatServiceClient constructs a client for the chat.v1.ChatService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chatServiceMethods := v1.File_chat_v1_chat_proto.Services().ByName("ChatService").Methods()
	return &chatServiceClient{
		connect: connect.NewClient[v1.ConnectRequest, v1.ServerEvent](
			httpClient,
			baseURL+ChatServiceConnectProcedure,
			connect.WithSchema(chatServiceMethods.ByName("Connect")),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+ChatServiceSendMessageProcedure,
			connect.WithSchema(chatServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
		getHistory: connect.NewClient[v1.GetHistoryRequest, v1.GetHistoryResponse](
			httpClient,
			baseURL+ChatServiceGetHistoryProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetHistory")),
			connect.WithClientOptions(opts...),
		),
		createRoom: connect.NewClient[v1.CreateRoomRequest, v1.CreateRoomResponse](
			httpClient,
			baseURL+ChatServiceCreateRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("CreateRoom")),
			connect.WithClientOptions(opts...),
		),
		searchRooms: connect.NewClient[v1.SearchRoomsRequest, v1.SearchRoomsResponse](
			httpClient,
			baseURL+ChatServiceSearchRoomsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("SearchRooms")),
			connect.WithClientOptions(opts...),
		),
		updateRoom: connect.NewClient[v1.UpdateRoomRequest, v1.UpdateRoomResponse](
			httpClient,
			baseURL+ChatServiceUpdateRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("UpdateRoom")),
			connect.WithClientOptions(opts...),
		),
		deleteRoom: connect.NewClient[v1.DeleteRoomRequest, v1.DeleteRoomResponse](
			httpClient,
			baseURL+ChatServiceDeleteRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("DeleteRoom")),
			connect.WithClientOptions(opts...),
		),
		addRoomSubscriptions: connect.NewClient[v1.AddRoomSubscriptionsRequest, v1.AddRoomSubscriptionsResponse](
			httpClient,
			baseURL+ChatServiceAddRoomSubscriptionsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("AddRoomSubscriptions")),
			connect.WithClientOptions(opts...),
		),
		removeRoomSubscriptions: connect.NewClient[v1.RemoveRoomSubscriptionsRequest, v1.RemoveRoomSubscriptionsResponse](
			httpClient,
			baseURL+ChatServiceRemoveRoomSubscriptionsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("RemoveRoomSubscriptions")),
			connect.WithClientOptions(opts...),
		),
		updateSubscriptionRole: connect.NewClient[v1.UpdateSubscriptionRoleRequest, v1.UpdateSubscriptionRoleResponse](
			httpClient,
			baseURL+ChatServiceUpdateSubscriptionRoleProcedure,
			connect.WithSchema(chatServiceMethods.ByName("UpdateSubscriptionRole")),
			connect.WithClientOptions(opts...),
		),
		searchRoomSubscriptions: connect.NewClient[v1.SearchRoomSubscriptionsRequest, v1.SearchRoomSubscriptionsResponse](
			httpClient,
			baseURL+ChatServiceSearchRoomSubscriptionsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("SearchRoomSubscriptions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	connect                 *connect.Client[v1.ConnectRequest, v1.ServerEvent]
	sendMessage             *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	getHistory              *connect.Client[v1.GetHistoryRequest, v1.GetHistoryResponse]
	createRoom              *connect.Client[v1.CreateRoomRequest, v1.CreateRoomResponse]
	searchRooms             *connect.Client[v1.SearchRoomsRequest, v1.SearchRoomsResponse]
	updateRoom              *connect.Client[v1.UpdateRoomRequest, v1.UpdateRoomResponse]
	deleteRoom              *connect.Client[v1.DeleteRoomRequest, v1.DeleteRoomResponse]
	addRoomSubscriptions    *connect.Client[v1.AddRoomSubscriptionsRequest, v1.AddRoomSubscriptionsResponse]
	removeRoomSubscriptions *connect.Client[v1.RemoveRoomSubscriptionsRequest, v1.RemoveRoomSubscriptionsResponse]
	updateSubscriptionRole  *connect.Client[v1.UpdateSubscriptionRoleRequest, v1.UpdateSubscriptionRoleResponse]
	searchRoomSubscriptions *connect.Client[v1.SearchRoomSubscriptionsRequest, v1.SearchRoomSubscriptionsResponse]
}

// Connect calls chat.v1.ChatService.Connect.
func (c *chatServiceClient) Connect(ctx context.Context) *connect.BidiStreamForClient[v1.ConnectRequest, v1.ServerEvent] {
	return c.connect.CallBidiStream(ctx)
}

// SendMessage calls chat.v1.ChatService.SendMessage.
func (c *chatServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// GetHistory calls chat.v1.ChatService.GetHistory.
func (c *chatServiceClient) GetHistory(ctx context.Context, req *connect.Request[v1.GetHistoryRequest]) (*connect.Response[v1.GetHistoryResponse], error) {
	return c.getHistory.CallUnary(ctx, req)
}

// CreateRoom calls chat.v1.ChatService.CreateRoom.
func (c *chatServiceClient) CreateRoom(ctx context.Context, req *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// SearchRooms calls chat.v1.ChatService.SearchRooms.
func (c *chatServiceClient) SearchRooms(ctx context.Context, req *connect.Request[v1.SearchRoomsRequest]) (*connect.ServerStreamForClient[v1.SearchRoomsResponse], error) {
	return c.searchRooms.CallServerStream(ctx, req)
}

// UpdateRoom calls chat.v1.ChatService.UpdateRoom.
func (c *chatServiceClient) UpdateRoom(ctx context.Context, req *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error) {
	return c.updateRoom.CallUnary(ctx, req)
}

// DeleteRoom calls chat.v1.ChatService.DeleteRoom.
func (c *chatServiceClient) DeleteRoom(ctx context.Context, req *connect.Request[v1.DeleteRoomRequest]) (*connect.Response[v1.DeleteRoomResponse], error) {
	return c.deleteRoom.CallUnary(ctx, req)
}

// AddRoomSubscriptions calls chat.v1.ChatService.AddRoomSubscriptions.
func (c *chatServiceClient) AddRoomSubscriptions(ctx context.Context, req *connect.Request[v1.AddRoomSubscriptionsRequest]) (*connect.Response[v1.AddRoomSubscriptionsResponse], error) {
	return c.addRoomSubscriptions.CallUnary(ctx, req)
}

// RemoveRoomSubscriptions calls chat.v1.ChatService.RemoveRoomSubscriptions.
func (c *chatServiceClient) RemoveRoomSubscriptions(ctx context.Context, req *connect.Request[v1.RemoveRoomSubscriptionsRequest]) (*connect.Response[v1.RemoveRoomSubscriptionsResponse], error) {
	return c.removeRoomSubscriptions.CallUnary(ctx, req)
}

// UpdateSubscriptionRole calls chat.v1.ChatService.UpdateSubscriptionRole.
func (c *chatServiceClient) UpdateSubscriptionRole(ctx context.Context, req *connect.Request[v1.UpdateSubscriptionRoleRequest]) (*connect.Response[v1.UpdateSubscriptionRoleResponse], error) {
	return c.updateSubscriptionRole.CallUnary(ctx, req)
}

// SearchRoomSubscriptions calls chat.v1.ChatService.SearchRoomSubscriptions.
func (c *chatServiceClient) SearchRoomSubscriptions(ctx context.Context, req *connect.Request[v1.SearchRoomSubscriptionsRequest]) (*connect.Response[v1.SearchRoomSubscriptionsResponse], error) {
	return c.searchRoomSubscriptions.CallUnary(ctx, req)
}

// ChatServiceHandler is an implementation of the chat.v1.ChatService service.
type ChatServiceHandler interface {
	// Bi-directional, long-lived connection. Client sends ConnectRequest (initial auth + acks/commands).
	// Server streams ServerEvent objects in chronological order for rooms the client is subscribed to.
	// Stream resume: client may provide last_received_event_id or resume_token to continue after reconnect.
	Connect(context.Context, *connect.BidiStream[v1.ConnectRequest, v1.ServerEvent]) error
	// Send a message (unified message model). Idempotent if idempotency_key is provided.
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	// Fetch history for a room. Cursor-based paging (cursor = opaque server token).
	GetHistory(context.Context, *connect.Request[v1.GetHistoryRequest]) (*connect.Response[v1.GetHistoryResponse], error)
	// Room lifecycle & management
	CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error)
	SearchRooms(context.Context, *connect.Request[v1.SearchRoomsRequest], *connect.ServerStream[v1.SearchRoomsResponse]) error
	UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error)
	DeleteRoom(context.Context, *connect.Request[v1.DeleteRoomRequest]) (*connect.Response[v1.DeleteRoomResponse], error)
	// Subscriptionship & roles
	AddRoomSubscriptions(context.Context, *connect.Request[v1.AddRoomSubscriptionsRequest]) (*connect.Response[v1.AddRoomSubscriptionsResponse], error)
	RemoveRoomSubscriptions(context.Context, *connect.Request[v1.RemoveRoomSubscriptionsRequest]) (*connect.Response[v1.RemoveRoomSubscriptionsResponse], error)
	UpdateSubscriptionRole(context.Context, *connect.Request[v1.UpdateSubscriptionRoleRequest]) (*connect.Response[v1.UpdateSubscriptionRoleResponse], error)
	SearchRoomSubscriptions(context.Context, *connect.Request[v1.SearchRoomSubscriptionsRequest]) (*connect.Response[v1.SearchRoomSubscriptionsResponse], error)
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceMethods := v1.File_chat_v1_chat_proto.Services().ByName("ChatService").Methods()
	chatServiceConnectHandler := connect.NewBidiStreamHandler(
		ChatServiceConnectProcedure,
		svc.Connect,
		connect.WithSchema(chatServiceMethods.ByName("Connect")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceSendMessageHandler := connect.NewUnaryHandler(
		ChatServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(chatServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetHistoryHandler := connect.NewUnaryHandler(
		ChatServiceGetHistoryProcedure,
		svc.GetHistory,
		connect.WithSchema(chatServiceMethods.ByName("GetHistory")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceCreateRoomHandler := connect.NewUnaryHandler(
		ChatServiceCreateRoomProcedure,
		svc.CreateRoom,
		connect.WithSchema(chatServiceMethods.ByName("CreateRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceSearchRoomsHandler := connect.NewServerStreamHandler(
		ChatServiceSearchRoomsProcedure,
		svc.SearchRooms,
		connect.WithSchema(chatServiceMethods.ByName("SearchRooms")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceUpdateRoomHandler := connect.NewUnaryHandler(
		ChatServiceUpdateRoomProcedure,
		svc.UpdateRoom,
		connect.WithSchema(chatServiceMethods.ByName("UpdateRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceDeleteRoomHandler := connect.NewUnaryHandler(
		ChatServiceDeleteRoomProcedure,
		svc.DeleteRoom,
		connect.WithSchema(chatServiceMethods.ByName("DeleteRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceAddRoomSubscriptionsHandler := connect.NewUnaryHandler(
		ChatServiceAddRoomSubscriptionsProcedure,
		svc.AddRoomSubscriptions,
		connect.WithSchema(chatServiceMethods.ByName("AddRoomSubscriptions")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceRemoveRoomSubscriptionsHandler := connect.NewUnaryHandler(
		ChatServiceRemoveRoomSubscriptionsProcedure,
		svc.RemoveRoomSubscriptions,
		connect.WithSchema(chatServiceMethods.ByName("RemoveRoomSubscriptions")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceUpdateSubscriptionRoleHandler := connect.NewUnaryHandler(
		ChatServiceUpdateSubscriptionRoleProcedure,
		svc.UpdateSubscriptionRole,
		connect.WithSchema(chatServiceMethods.ByName("UpdateSubscriptionRole")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceSearchRoomSubscriptionsHandler := connect.NewUnaryHandler(
		ChatServiceSearchRoomSubscriptionsProcedure,
		svc.SearchRoomSubscriptions,
		connect.WithSchema(chatServiceMethods.ByName("SearchRoomSubscriptions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chat.v1.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceConnectProcedure:
			chatServiceConnectHandler.ServeHTTP(w, r)
		case ChatServiceSendMessageProcedure:
			chatServiceSendMessageHandler.ServeHTTP(w, r)
		case ChatServiceGetHistoryProcedure:
			chatServiceGetHistoryHandler.ServeHTTP(w, r)
		case ChatServiceCreateRoomProcedure:
			chatServiceCreateRoomHandler.ServeHTTP(w, r)
		case ChatServiceSearchRoomsProcedure:
			chatServiceSearchRoomsHandler.ServeHTTP(w, r)
		case ChatServiceUpdateRoomProcedure:
			chatServiceUpdateRoomHandler.ServeHTTP(w, r)
		case ChatServiceDeleteRoomProcedure:
			chatServiceDeleteRoomHandler.ServeHTTP(w, r)
		case ChatServiceAddRoomSubscriptionsProcedure:
			chatServiceAddRoomSubscriptionsHandler.ServeHTTP(w, r)
		case ChatServiceRemoveRoomSubscriptionsProcedure:
			chatServiceRemoveRoomSubscriptionsHandler.ServeHTTP(w, r)
		case ChatServiceUpdateSubscriptionRoleProcedure:
			chatServiceUpdateSubscriptionRoleHandler.ServeHTTP(w, r)
		case ChatServiceSearchRoomSubscriptionsProcedure:
			chatServiceSearchRoomSubscriptionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) Connect(context.Context, *connect.BidiStream[v1.ConnectRequest, v1.ServerEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.Connect is not implemented"))
}

func (UnimplementedChatServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.SendMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) GetHistory(context.Context, *connect.Request[v1.GetHistoryRequest]) (*connect.Response[v1.GetHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.GetHistory is not implemented"))
}

func (UnimplementedChatServiceHandler) CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.CreateRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) SearchRooms(context.Context, *connect.Request[v1.SearchRoomsRequest], *connect.ServerStream[v1.SearchRoomsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.SearchRooms is not implemented"))
}

func (UnimplementedChatServiceHandler) UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.UpdateRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) DeleteRoom(context.Context, *connect.Request[v1.DeleteRoomRequest]) (*connect.Response[v1.DeleteRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.DeleteRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) AddRoomSubscriptions(context.Context, *connect.Request[v1.AddRoomSubscriptionsRequest]) (*connect.Response[v1.AddRoomSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.AddRoomSubscriptions is not implemented"))
}

func (UnimplementedChatServiceHandler) RemoveRoomSubscriptions(context.Context, *connect.Request[v1.RemoveRoomSubscriptionsRequest]) (*connect.Response[v1.RemoveRoomSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.RemoveRoomSubscriptions is not implemented"))
}

func (UnimplementedChatServiceHandler) UpdateSubscriptionRole(context.Context, *connect.Request[v1.UpdateSubscriptionRoleRequest]) (*connect.Response[v1.UpdateSubscriptionRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.UpdateSubscriptionRole is not implemented"))
}

func (UnimplementedChatServiceHandler) SearchRoomSubscriptions(context.Context, *connect.Request[v1.SearchRoomSubscriptionsRequest]) (*connect.Response[v1.SearchRoomSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.SearchRoomSubscriptions is not implemented"))
}
