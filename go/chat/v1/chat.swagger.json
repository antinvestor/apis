{
  "swagger": "2.0",
  "info": {
    "title": "chat Service",
    "version": "1.0",
    "contact": {
      "name": "Ant Investor Ltd",
      "url": "https://github.com/antinvestor/service-chat",
      "email": "info@antinvestor.com"
    }
  },
  "tags": [
    {
      "name": "chat.v1.ChatService"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Fetch history for a room. Cursor-based paging (cursor = opaque server token).",
        "operationId": "ChatService_GetHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.GetHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "roomId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cursor",
            "description": "opaque token from prior GetHistoryResponse",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "forward",
            "description": "direction: FORWARD means older -\u003e newer; BACKWARD newer -\u003e older (default BACKWARD).",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      },
      "post": {
        "summary": "Send a message (unified message model). Idempotent if idempotency_key is provided.",
        "operationId": "ChatService_SendMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.SendMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chat.v1.SendMessageRequest"
            }
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      }
    },
    "/connect": {
      "post": {
        "summary": "Bi-directional, long-lived connection. Client sends ConnectRequest (initial auth + acks/commands).\nServer streams ServerEvent objects in chronological order for rooms the client is subscribed to.\nStream resume: client may provide last_received_event_id or resume_token to continue after reconnect.",
        "operationId": "ChatService_Connect",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/chat.v1.ServerEvent"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of chat.v1.ServerEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Client message over Connect stream. After initial connect frame, client sends acks/commands. (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chat.v1.ConnectRequest"
            }
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      }
    },
    "/room": {
      "get": {
        "operationId": "ChatService_SearchRooms",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/chat.v1.SearchRoomsResponse"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of chat.v1.SearchRoomsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "extras",
            "in": "query",
            "required": false,
            "type": "object"
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      },
      "post": {
        "summary": "Room lifecycle \u0026 management",
        "operationId": "ChatService_CreateRoom",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.CreateRoomResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chat.v1.CreateRoomRequest"
            }
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      }
    },
    "/room/{roomId}": {
      "delete": {
        "operationId": "ChatService_DeleteRoom",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.DeleteRoomResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      },
      "patch": {
        "operationId": "ChatService_UpdateRoom",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.UpdateRoomResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chat.v1.ChatService.UpdateRoomBody"
            }
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      }
    },
    "/room/{roomId}/subscription": {
      "get": {
        "operationId": "ChatService_SearchRoomSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.SearchRoomSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      },
      "delete": {
        "operationId": "ChatService_RemoveRoomSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.RemoveRoomSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      },
      "post": {
        "summary": "Subscriptionship \u0026 roles",
        "operationId": "ChatService_AddRoomSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.AddRoomSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chat.v1.ChatService.AddRoomSubscriptionsBody"
            }
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      }
    },
    "/room/{roomId}/subscription/{profileId}/role": {
      "patch": {
        "operationId": "ChatService_UpdateSubscriptionRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chat.v1.UpdateSubscriptionRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chat.v1.ChatService.UpdateSubscriptionRoleBody"
            }
          }
        ],
        "tags": [
          "chat.v1.ChatService"
        ]
      }
    }
  },
  "definitions": {
    "chat.v1.AddRoomSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "roomId": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/chat.v1.ErrorDetail"
        }
      }
    },
    "chat.v1.ChatService.AddRoomSubscriptionsBody": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chat.v1.RoomSubscription"
          },
          "title": "include roles if desired"
        }
      }
    },
    "chat.v1.ChatService.UpdateRoomBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "topic": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "chat.v1.ChatService.UpdateSubscriptionRoleBody": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "chat.v1.ClientCommand": {
      "type": "object",
      "properties": {
        "typing": {
          "$ref": "#/definitions/chat.v1.TypingUpdate"
        },
        "readMarker": {
          "$ref": "#/definitions/chat.v1.ReadMarker",
          "title": "marker for \"read up to X\""
        }
      },
      "title": "Generic client commands (typing, read markers that aren't receipts)"
    },
    "chat.v1.ConnectRequest": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "Servers should validate auth token before accepting further payload."
        },
        "deviceId": {
          "type": "string"
        },
        "authToken": {
          "type": "string",
          "title": "JWT or short-lived token; also accepted via metadata at the transport layer"
        },
        "resumeToken": {
          "type": "string",
          "description": "Optional resume token: server-supplied resume_token from previous session.\nServer will validate and accept resume only if resume window allows it."
        },
        "ack": {
          "$ref": "#/definitions/chat.v1.StreamAck"
        },
        "command": {
          "$ref": "#/definitions/chat.v1.ClientCommand"
        }
      },
      "description": "Client message over Connect stream. After initial connect frame, client sends acks/commands."
    },
    "chat.v1.CreateRoomRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "optional client-provided idempotency key"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "optional"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "chat.v1.CreateRoomResponse": {
      "type": "object",
      "properties": {
        "room": {
          "$ref": "#/definitions/chat.v1.Room"
        },
        "error": {
          "$ref": "#/definitions/chat.v1.ErrorDetail"
        }
      }
    },
    "chat.v1.DeleteRoomResponse": {
      "type": "object",
      "properties": {
        "roomId": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/chat.v1.ErrorDetail"
        }
      }
    },
    "chat.v1.ErrorDetail": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "application code (see doc)"
        },
        "message": {
          "type": "string",
          "title": "human readable"
        },
        "meta": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "additional machine-readable data"
        }
      },
      "description": "Standard error codes used by API responses.\nUse gRPC status codes; the application-level ErrorDetail below may carry more."
    },
    "chat.v1.GetHistoryResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chat.v1.ServerEvent"
          }
        },
        "nextCursor": {
          "type": "string",
          "title": "opaque; empty when no more pages"
        },
        "prevCursor": {
          "type": "string"
        }
      }
    },
    "chat.v1.PresenceEvent": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/chat.v1.PresenceStatus"
        },
        "statusMsg": {
          "type": "string"
        },
        "lastActive": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Presence event affecting a user (and visible to rooms the user is a member of)"
    },
    "chat.v1.PresenceStatus": {
      "type": "string",
      "enum": [
        "PRESENCE_UNKNOWN",
        "PRESENCE_OFFLINE",
        "PRESENCE_ONLINE",
        "PRESENCE_AWAY",
        "PRESENCE_BUSY"
      ],
      "default": "PRESENCE_UNKNOWN"
    },
    "chat.v1.ReadMarker": {
      "type": "object",
      "properties": {
        "roomId": {
          "type": "string"
        },
        "upToEventId": {
          "type": "string"
        }
      }
    },
    "chat.v1.ReceiptEvent": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string"
        },
        "roomId": {
          "type": "string"
        },
        "messageId": {
          "type": "string"
        },
        "readAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Read receipts"
    },
    "chat.v1.RemoveRoomSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "roomId": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/chat.v1.ErrorDetail"
        }
      }
    },
    "chat.v1.Room": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "creatorId": {
          "type": "string"
        }
      }
    },
    "chat.v1.RoomEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "client-supplied or server-generated UUID"
        },
        "roomId": {
          "type": "string",
          "title": "room_id"
        },
        "senderId": {
          "type": "string",
          "title": "profile_id or service/bot id"
        },
        "type": {
          "$ref": "#/definitions/chat.v1.RoomEventType",
          "description": "text, attachment, call_offer, etc."
        },
        "payload": {
          "type": "object",
          "title": "e.g. {\"format\":\"markdown\",\"mime\":\"image/png\",\"attachment_id\":\"...\"}"
        },
        "sentAt": {
          "type": "string",
          "format": "date-time"
        },
        "edited": {
          "type": "boolean"
        },
        "redacted": {
          "type": "boolean"
        },
        "replacesEventId": {
          "type": "string",
          "title": "if this message replaces another (edit)"
        },
        "relatesToEventId": {
          "type": "string",
          "title": "for reactions / replies"
        }
      },
      "title": "Unified message (user / bot / system / signalling)"
    },
    "chat.v1.RoomEventType": {
      "type": "string",
      "enum": [
        "MESSAGE_TYPE_UNSPECIFIED",
        "MESSAGE_TYPE_EVENT",
        "MESSAGE_TYPE_TEXT",
        "MESSAGE_TYPE_ATTACHMENT",
        "MESSAGE_TYPE_REACTION",
        "MESSAGE_TYPE_ENCRYPTED",
        "MESSAGE_TYPE_SYSTEM",
        "MESSAGE_TYPE_CALL_OFFER",
        "MESSAGE_TYPE_CALL_ANSWER",
        "MESSAGE_TYPE_CALL_ICE",
        "MESSAGE_TYPE_CALL_END",
        "MESSAGE_TYPE_CUSTOM"
      ],
      "default": "MESSAGE_TYPE_UNSPECIFIED",
      "description": "Allowed message types. Extendable via new enum values; clients must ignore unknown values.\n\n - MESSAGE_TYPE_ENCRYPTED: opaque ciphertext\n - MESSAGE_TYPE_CUSTOM: vendor/app specific; metadata must indicate schema"
    },
    "chat.v1.RoomSubscription": {
      "type": "object",
      "properties": {
        "roomId": {
          "type": "string"
        },
        "profileId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "e.g. [\"owner\",\"moderator\",\"member\",\"guest\"]"
        },
        "joinedAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastActive": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "chat.v1.SearchRoomSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "roomId": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chat.v1.RoomSubscription"
          }
        },
        "nextCursor": {
          "type": "string"
        }
      }
    },
    "chat.v1.SearchRoomsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chat.v1.Room"
          }
        }
      }
    },
    "chat.v1.SendMessageRequest": {
      "type": "object",
      "properties": {
        "message": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chat.v1.RoomEvent"
          },
          "title": "message payload (server will assign final message_id if empty)"
        }
      }
    },
    "chat.v1.SendMessageResponse": {
      "type": "object",
      "properties": {
        "ack": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chat.v1.StreamAck"
          }
        }
      }
    },
    "chat.v1.ServerEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "$ref": "#/definitions/chat.v1.RoomEvent"
        },
        "presenceEvent": {
          "$ref": "#/definitions/chat.v1.PresenceEvent",
          "title": "user presence change affecting the room"
        },
        "receiptEvent": {
          "$ref": "#/definitions/chat.v1.ReceiptEvent"
        },
        "typingEvent": {
          "$ref": "#/definitions/chat.v1.TypingEvent"
        }
      },
      "description": "Server -\u003e Client event payload. All events in a room are delivered over Connect stream.\nevent_id: globally unique id (opaque string) assigned by server, strictly monotonically increasing per room.\nsequence: strictly increasing 64-bit integer per-room sequence number (useful for resume \u0026 ordering)."
    },
    "chat.v1.StreamAck": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string"
        },
        "ackAt": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object"
        }
      },
      "description": "Acknowledgement for event(s) received; server uses it to free ephemeral delivery buffers.\nack_event_id: last event_id client processed (inclusive)."
    },
    "chat.v1.TypingEvent": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string"
        },
        "roomId": {
          "type": "string"
        },
        "typing": {
          "type": "boolean"
        },
        "since": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Typing indicator"
    },
    "chat.v1.TypingUpdate": {
      "type": "object",
      "properties": {
        "roomId": {
          "type": "string"
        },
        "typing": {
          "type": "boolean"
        }
      }
    },
    "chat.v1.UpdateRoomResponse": {
      "type": "object",
      "properties": {
        "room": {
          "$ref": "#/definitions/chat.v1.Room"
        },
        "error": {
          "$ref": "#/definitions/chat.v1.ErrorDetail"
        }
      }
    },
    "chat.v1.UpdateSubscriptionRoleResponse": {
      "type": "object",
      "properties": {
        "roomId": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/chat.v1.ErrorDetail"
        }
      }
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "google.rpc.Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
