// Code generated by MockGen. DO NOT EDIT.
// Source: /home/j/code/antinvestor/apis/go/chat/v1/chat_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/j/code/antinvestor/apis/go/chat/v1/chat_grpc.pb.go -package=chatv1_mocks -destination=/home/j/code/antinvestor/apis/go/chat/v1_mocks/chat_grpc_mock.go
//

// Package chatv1_mocks is a generated GoMock package.
package chatv1_mocks

import (
	context "context"
	reflect "reflect"

	chatv1 "github.com/antinvestor/apis/go/chat/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStreamServiceClient is a mock of StreamServiceClient interface.
type MockStreamServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamServiceClientMockRecorder
	isgomock struct{}
}

// MockStreamServiceClientMockRecorder is the mock recorder for MockStreamServiceClient.
type MockStreamServiceClientMockRecorder struct {
	mock *MockStreamServiceClient
}

// NewMockStreamServiceClient creates a new mock instance.
func NewMockStreamServiceClient(ctrl *gomock.Controller) *MockStreamServiceClient {
	mock := &MockStreamServiceClient{ctrl: ctrl}
	mock.recorder = &MockStreamServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamServiceClient) EXPECT() *MockStreamServiceClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockStreamServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[chatv1.ConnectRequest, chatv1.ServerEvent], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(grpc.BidiStreamingClient[chatv1.ConnectRequest, chatv1.ServerEvent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockStreamServiceClientMockRecorder) Connect(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStreamServiceClient)(nil).Connect), varargs...)
}

// MockStreamServiceServer is a mock of StreamServiceServer interface.
type MockStreamServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamServiceServerMockRecorder
	isgomock struct{}
}

// MockStreamServiceServerMockRecorder is the mock recorder for MockStreamServiceServer.
type MockStreamServiceServerMockRecorder struct {
	mock *MockStreamServiceServer
}

// NewMockStreamServiceServer creates a new mock instance.
func NewMockStreamServiceServer(ctrl *gomock.Controller) *MockStreamServiceServer {
	mock := &MockStreamServiceServer{ctrl: ctrl}
	mock.recorder = &MockStreamServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamServiceServer) EXPECT() *MockStreamServiceServerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockStreamServiceServer) Connect(arg0 grpc.BidiStreamingServer[chatv1.ConnectRequest, chatv1.ServerEvent]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockStreamServiceServerMockRecorder) Connect(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStreamServiceServer)(nil).Connect), arg0)
}

// mustEmbedUnimplementedStreamServiceServer mocks base method.
func (m *MockStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamServiceServer")
}

// mustEmbedUnimplementedStreamServiceServer indicates an expected call of mustEmbedUnimplementedStreamServiceServer.
func (mr *MockStreamServiceServerMockRecorder) mustEmbedUnimplementedStreamServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamServiceServer", reflect.TypeOf((*MockStreamServiceServer)(nil).mustEmbedUnimplementedStreamServiceServer))
}

// MockUnsafeStreamServiceServer is a mock of UnsafeStreamServiceServer interface.
type MockUnsafeStreamServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStreamServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeStreamServiceServerMockRecorder is the mock recorder for MockUnsafeStreamServiceServer.
type MockUnsafeStreamServiceServerMockRecorder struct {
	mock *MockUnsafeStreamServiceServer
}

// NewMockUnsafeStreamServiceServer creates a new mock instance.
func NewMockUnsafeStreamServiceServer(ctrl *gomock.Controller) *MockUnsafeStreamServiceServer {
	mock := &MockUnsafeStreamServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStreamServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStreamServiceServer) EXPECT() *MockUnsafeStreamServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStreamServiceServer mocks base method.
func (m *MockUnsafeStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamServiceServer")
}

// mustEmbedUnimplementedStreamServiceServer indicates an expected call of mustEmbedUnimplementedStreamServiceServer.
func (mr *MockUnsafeStreamServiceServerMockRecorder) mustEmbedUnimplementedStreamServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamServiceServer", reflect.TypeOf((*MockUnsafeStreamServiceServer)(nil).mustEmbedUnimplementedStreamServiceServer))
}

// MockChatServiceClient is a mock of ChatServiceClient interface.
type MockChatServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceClientMockRecorder
	isgomock struct{}
}

// MockChatServiceClientMockRecorder is the mock recorder for MockChatServiceClient.
type MockChatServiceClientMockRecorder struct {
	mock *MockChatServiceClient
}

// NewMockChatServiceClient creates a new mock instance.
func NewMockChatServiceClient(ctrl *gomock.Controller) *MockChatServiceClient {
	mock := &MockChatServiceClient{ctrl: ctrl}
	mock.recorder = &MockChatServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServiceClient) EXPECT() *MockChatServiceClientMockRecorder {
	return m.recorder
}

// AddRoomSubscriptions mocks base method.
func (m *MockChatServiceClient) AddRoomSubscriptions(ctx context.Context, in *chatv1.AddRoomSubscriptionsRequest, opts ...grpc.CallOption) (*chatv1.AddRoomSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRoomSubscriptions", varargs...)
	ret0, _ := ret[0].(*chatv1.AddRoomSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoomSubscriptions indicates an expected call of AddRoomSubscriptions.
func (mr *MockChatServiceClientMockRecorder) AddRoomSubscriptions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoomSubscriptions", reflect.TypeOf((*MockChatServiceClient)(nil).AddRoomSubscriptions), varargs...)
}

// CreateRoom mocks base method.
func (m *MockChatServiceClient) CreateRoom(ctx context.Context, in *chatv1.CreateRoomRequest, opts ...grpc.CallOption) (*chatv1.CreateRoomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoom", varargs...)
	ret0, _ := ret[0].(*chatv1.CreateRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockChatServiceClientMockRecorder) CreateRoom(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockChatServiceClient)(nil).CreateRoom), varargs...)
}

// DeleteRoom mocks base method.
func (m *MockChatServiceClient) DeleteRoom(ctx context.Context, in *chatv1.DeleteRoomRequest, opts ...grpc.CallOption) (*chatv1.DeleteRoomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoom", varargs...)
	ret0, _ := ret[0].(*chatv1.DeleteRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockChatServiceClientMockRecorder) DeleteRoom(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockChatServiceClient)(nil).DeleteRoom), varargs...)
}

// GetHistory mocks base method.
func (m *MockChatServiceClient) GetHistory(ctx context.Context, in *chatv1.GetHistoryRequest, opts ...grpc.CallOption) (*chatv1.GetHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHistory", varargs...)
	ret0, _ := ret[0].(*chatv1.GetHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockChatServiceClientMockRecorder) GetHistory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockChatServiceClient)(nil).GetHistory), varargs...)
}

// RemoveRoomSubscriptions mocks base method.
func (m *MockChatServiceClient) RemoveRoomSubscriptions(ctx context.Context, in *chatv1.RemoveRoomSubscriptionsRequest, opts ...grpc.CallOption) (*chatv1.RemoveRoomSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveRoomSubscriptions", varargs...)
	ret0, _ := ret[0].(*chatv1.RemoveRoomSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoomSubscriptions indicates an expected call of RemoveRoomSubscriptions.
func (mr *MockChatServiceClientMockRecorder) RemoveRoomSubscriptions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoomSubscriptions", reflect.TypeOf((*MockChatServiceClient)(nil).RemoveRoomSubscriptions), varargs...)
}

// SearchRoomSubscriptions mocks base method.
func (m *MockChatServiceClient) SearchRoomSubscriptions(ctx context.Context, in *chatv1.SearchRoomSubscriptionsRequest, opts ...grpc.CallOption) (*chatv1.SearchRoomSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchRoomSubscriptions", varargs...)
	ret0, _ := ret[0].(*chatv1.SearchRoomSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRoomSubscriptions indicates an expected call of SearchRoomSubscriptions.
func (mr *MockChatServiceClientMockRecorder) SearchRoomSubscriptions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRoomSubscriptions", reflect.TypeOf((*MockChatServiceClient)(nil).SearchRoomSubscriptions), varargs...)
}

// SearchRooms mocks base method.
func (m *MockChatServiceClient) SearchRooms(ctx context.Context, in *chatv1.SearchRoomsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[chatv1.SearchRoomsResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchRooms", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[chatv1.SearchRoomsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRooms indicates an expected call of SearchRooms.
func (mr *MockChatServiceClientMockRecorder) SearchRooms(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRooms", reflect.TypeOf((*MockChatServiceClient)(nil).SearchRooms), varargs...)
}

// SendEvent mocks base method.
func (m *MockChatServiceClient) SendEvent(ctx context.Context, in *chatv1.SendEventRequest, opts ...grpc.CallOption) (*chatv1.SendEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEvent", varargs...)
	ret0, _ := ret[0].(*chatv1.SendEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockChatServiceClientMockRecorder) SendEvent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockChatServiceClient)(nil).SendEvent), varargs...)
}

// UpdateRoom mocks base method.
func (m *MockChatServiceClient) UpdateRoom(ctx context.Context, in *chatv1.UpdateRoomRequest, opts ...grpc.CallOption) (*chatv1.UpdateRoomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoom", varargs...)
	ret0, _ := ret[0].(*chatv1.UpdateRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockChatServiceClientMockRecorder) UpdateRoom(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockChatServiceClient)(nil).UpdateRoom), varargs...)
}

// UpdateSubscriptionRole mocks base method.
func (m *MockChatServiceClient) UpdateSubscriptionRole(ctx context.Context, in *chatv1.UpdateSubscriptionRoleRequest, opts ...grpc.CallOption) (*chatv1.UpdateSubscriptionRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscriptionRole", varargs...)
	ret0, _ := ret[0].(*chatv1.UpdateSubscriptionRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionRole indicates an expected call of UpdateSubscriptionRole.
func (mr *MockChatServiceClientMockRecorder) UpdateSubscriptionRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionRole", reflect.TypeOf((*MockChatServiceClient)(nil).UpdateSubscriptionRole), varargs...)
}

// MockChatServiceServer is a mock of ChatServiceServer interface.
type MockChatServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceServerMockRecorder
	isgomock struct{}
}

// MockChatServiceServerMockRecorder is the mock recorder for MockChatServiceServer.
type MockChatServiceServerMockRecorder struct {
	mock *MockChatServiceServer
}

// NewMockChatServiceServer creates a new mock instance.
func NewMockChatServiceServer(ctrl *gomock.Controller) *MockChatServiceServer {
	mock := &MockChatServiceServer{ctrl: ctrl}
	mock.recorder = &MockChatServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServiceServer) EXPECT() *MockChatServiceServerMockRecorder {
	return m.recorder
}

// AddRoomSubscriptions mocks base method.
func (m *MockChatServiceServer) AddRoomSubscriptions(arg0 context.Context, arg1 *chatv1.AddRoomSubscriptionsRequest) (*chatv1.AddRoomSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoomSubscriptions", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.AddRoomSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoomSubscriptions indicates an expected call of AddRoomSubscriptions.
func (mr *MockChatServiceServerMockRecorder) AddRoomSubscriptions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoomSubscriptions", reflect.TypeOf((*MockChatServiceServer)(nil).AddRoomSubscriptions), arg0, arg1)
}

// CreateRoom mocks base method.
func (m *MockChatServiceServer) CreateRoom(arg0 context.Context, arg1 *chatv1.CreateRoomRequest) (*chatv1.CreateRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.CreateRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockChatServiceServerMockRecorder) CreateRoom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockChatServiceServer)(nil).CreateRoom), arg0, arg1)
}

// DeleteRoom mocks base method.
func (m *MockChatServiceServer) DeleteRoom(arg0 context.Context, arg1 *chatv1.DeleteRoomRequest) (*chatv1.DeleteRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.DeleteRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockChatServiceServerMockRecorder) DeleteRoom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockChatServiceServer)(nil).DeleteRoom), arg0, arg1)
}

// GetHistory mocks base method.
func (m *MockChatServiceServer) GetHistory(arg0 context.Context, arg1 *chatv1.GetHistoryRequest) (*chatv1.GetHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.GetHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockChatServiceServerMockRecorder) GetHistory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockChatServiceServer)(nil).GetHistory), arg0, arg1)
}

// RemoveRoomSubscriptions mocks base method.
func (m *MockChatServiceServer) RemoveRoomSubscriptions(arg0 context.Context, arg1 *chatv1.RemoveRoomSubscriptionsRequest) (*chatv1.RemoveRoomSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoomSubscriptions", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.RemoveRoomSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoomSubscriptions indicates an expected call of RemoveRoomSubscriptions.
func (mr *MockChatServiceServerMockRecorder) RemoveRoomSubscriptions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoomSubscriptions", reflect.TypeOf((*MockChatServiceServer)(nil).RemoveRoomSubscriptions), arg0, arg1)
}

// SearchRoomSubscriptions mocks base method.
func (m *MockChatServiceServer) SearchRoomSubscriptions(arg0 context.Context, arg1 *chatv1.SearchRoomSubscriptionsRequest) (*chatv1.SearchRoomSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRoomSubscriptions", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.SearchRoomSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRoomSubscriptions indicates an expected call of SearchRoomSubscriptions.
func (mr *MockChatServiceServerMockRecorder) SearchRoomSubscriptions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRoomSubscriptions", reflect.TypeOf((*MockChatServiceServer)(nil).SearchRoomSubscriptions), arg0, arg1)
}

// SearchRooms mocks base method.
func (m *MockChatServiceServer) SearchRooms(arg0 *chatv1.SearchRoomsRequest, arg1 grpc.ServerStreamingServer[chatv1.SearchRoomsResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRooms", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchRooms indicates an expected call of SearchRooms.
func (mr *MockChatServiceServerMockRecorder) SearchRooms(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRooms", reflect.TypeOf((*MockChatServiceServer)(nil).SearchRooms), arg0, arg1)
}

// SendEvent mocks base method.
func (m *MockChatServiceServer) SendEvent(arg0 context.Context, arg1 *chatv1.SendEventRequest) (*chatv1.SendEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.SendEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockChatServiceServerMockRecorder) SendEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockChatServiceServer)(nil).SendEvent), arg0, arg1)
}

// UpdateRoom mocks base method.
func (m *MockChatServiceServer) UpdateRoom(arg0 context.Context, arg1 *chatv1.UpdateRoomRequest) (*chatv1.UpdateRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.UpdateRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockChatServiceServerMockRecorder) UpdateRoom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockChatServiceServer)(nil).UpdateRoom), arg0, arg1)
}

// UpdateSubscriptionRole mocks base method.
func (m *MockChatServiceServer) UpdateSubscriptionRole(arg0 context.Context, arg1 *chatv1.UpdateSubscriptionRoleRequest) (*chatv1.UpdateSubscriptionRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionRole", arg0, arg1)
	ret0, _ := ret[0].(*chatv1.UpdateSubscriptionRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionRole indicates an expected call of UpdateSubscriptionRole.
func (mr *MockChatServiceServerMockRecorder) UpdateSubscriptionRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionRole", reflect.TypeOf((*MockChatServiceServer)(nil).UpdateSubscriptionRole), arg0, arg1)
}

// mustEmbedUnimplementedChatServiceServer mocks base method.
func (m *MockChatServiceServer) mustEmbedUnimplementedChatServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChatServiceServer")
}

// mustEmbedUnimplementedChatServiceServer indicates an expected call of mustEmbedUnimplementedChatServiceServer.
func (mr *MockChatServiceServerMockRecorder) mustEmbedUnimplementedChatServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChatServiceServer", reflect.TypeOf((*MockChatServiceServer)(nil).mustEmbedUnimplementedChatServiceServer))
}

// MockUnsafeChatServiceServer is a mock of UnsafeChatServiceServer interface.
type MockUnsafeChatServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeChatServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeChatServiceServerMockRecorder is the mock recorder for MockUnsafeChatServiceServer.
type MockUnsafeChatServiceServerMockRecorder struct {
	mock *MockUnsafeChatServiceServer
}

// NewMockUnsafeChatServiceServer creates a new mock instance.
func NewMockUnsafeChatServiceServer(ctrl *gomock.Controller) *MockUnsafeChatServiceServer {
	mock := &MockUnsafeChatServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeChatServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeChatServiceServer) EXPECT() *MockUnsafeChatServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedChatServiceServer mocks base method.
func (m *MockUnsafeChatServiceServer) mustEmbedUnimplementedChatServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChatServiceServer")
}

// mustEmbedUnimplementedChatServiceServer indicates an expected call of mustEmbedUnimplementedChatServiceServer.
func (mr *MockUnsafeChatServiceServerMockRecorder) mustEmbedUnimplementedChatServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChatServiceServer", reflect.TypeOf((*MockUnsafeChatServiceServer)(nil).mustEmbedUnimplementedChatServiceServer))
}
